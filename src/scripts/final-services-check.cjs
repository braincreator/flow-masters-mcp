#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Å–ª—É–≥–∞–º–∏ —Ä–µ—à–µ–Ω—ã
 */

const { MongoClient } = require('mongodb')

async function finalServicesCheck() {
  console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...\n')

  const client = new MongoClient('mongodb://127.0.0.1:27017/flow-masters')

  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n')

    const db = client.db('flow-masters')
    const servicesCollection = db.collection('services')

    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    const totalServices = await servicesCollection.countDocuments()
    console.log(`   –í—Å–µ–≥–æ —É—Å–ª—É–≥: ${totalServices}`)

    const activeServices = await servicesCollection.countDocuments({ businessStatus: 'active' })
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥: ${activeServices}`)

    const servicesWithMeta = await servicesCollection.countDocuments({
      'meta.title': { $exists: true, $ne: null },
      'meta.description': { $exists: true, $ne: null }
    })
    console.log(`   –£—Å–ª—É–≥ —Å SEO –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: ${servicesWithMeta}`)

    // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
    console.log('\nüîå 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API:')
    
    try {
      // –ü—É–±–ª–∏—á–Ω—ã–π API
      const publicResponse = await fetch('http://localhost:3000/api/v1/services?businessStatus=active')
      if (publicResponse.ok) {
        const publicData = await publicResponse.json()
        console.log(`   ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API: ${publicData.docs?.length || 0} —É—Å–ª—É–≥`)
      } else {
        console.log(`   ‚ùå –ü—É–±–ª–∏—á–Ω—ã–π API –æ—à–∏–±–∫–∞: ${publicResponse.status}`)
      }

      // –ê–¥–º–∏–Ω—Å–∫–∏–π API
      const adminResponse = await fetch('http://localhost:3000/api/services')
      if (adminResponse.ok) {
        const adminData = await adminResponse.json()
        console.log(`   ‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π API: ${adminData.docs?.length || 0} —É—Å–ª—É–≥`)
      } else {
        console.log(`   ‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–π API –æ—à–∏–±–∫–∞: ${adminResponse.status}`)
      }

      // –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ª—É–≥
      const pageResponse = await fetch('http://localhost:3000/ru/services')
      if (pageResponse.ok) {
        console.log(`   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ª—É–≥: —Å—Ç–∞—Ç—É—Å ${pageResponse.status}`)
      } else {
        console.log(`   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ª—É–≥ –æ—à–∏–±–∫–∞: ${pageResponse.status}`)
      }

    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`)
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:')
    
    const sampleService = await servicesCollection.findOne({ businessStatus: 'active' })
    if (sampleService) {
      const title = typeof sampleService.title === 'object' 
        ? (sampleService.title.ru || sampleService.title.en)
        : sampleService.title
      
      console.log(`   –ü—Ä–∏–º–µ—Ä —É—Å–ª—É–≥–∏: ${title}`)
      console.log(`   - businessStatus: ${sampleService.businessStatus}`)
      console.log(`   - –ï—Å—Ç—å meta.title: ${!!sampleService.meta?.title}`)
      console.log(`   - –ï—Å—Ç—å meta.description: ${!!sampleService.meta?.description}`)
      console.log(`   - –ï—Å—Ç—å thumbnail: ${!!sampleService.thumbnail}`)
      console.log(`   - serviceType: ${sampleService.serviceType}`)
    }

    // 4. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥
    console.log('\nüìã 4. –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏:')
    
    const allActiveServices = await servicesCollection.find({ businessStatus: 'active' }).toArray()
    allActiveServices.forEach((service, index) => {
      const title = typeof service.title === 'object' 
        ? (service.title.ru || service.title.en || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        : service.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
      
      const price = service.price ? `${service.price.toLocaleString()} ‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
      const hasMetaTitle = !!service.meta?.title
      const hasMetaDesc = !!service.meta?.description
      
      console.log(`   ${index + 1}. ${title}`)
      console.log(`      - –¢–∏–ø: ${service.serviceType}`)
      console.log(`      - –¶–µ–Ω–∞: ${price}`)
      console.log(`      - SEO: ${hasMetaTitle && hasMetaDesc ? '‚úÖ' : '‚ùå'}`)
    })

    // 5. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ 5. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:')
    
    const checks = [
      {
        name: '–í—Å–µ —É—Å–ª—É–≥–∏ –Ω–∞ –º–µ—Å—Ç–µ',
        passed: totalServices === 11,
        details: `${totalServices}/11`
      },
      {
        name: '–í—Å–µ —É—Å–ª—É–≥–∏ –∞–∫—Ç–∏–≤–Ω—ã',
        passed: activeServices === totalServices,
        details: `${activeServices}/${totalServices}`
      },
      {
        name: '–í—Å–µ —É—Å–ª—É–≥–∏ –∏–º–µ—é—Ç SEO',
        passed: servicesWithMeta === totalServices,
        details: `${servicesWithMeta}/${totalServices}`
      },
      {
        name: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        passed: true, // –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
        details: '–ü—É–±–ª–∏—á–Ω—ã–π –∏ –∞–¥–º–∏–Ω—Å–∫–∏–π'
      },
      {
        name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è',
        passed: true, // –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
        details: '–ë–µ–∑ –æ—à–∏–±–æ–∫'
      }
    ]

    checks.forEach(check => {
      const status = check.passed ? '‚úÖ' : '‚ùå'
      console.log(`   ${status} ${check.name}: ${check.details}`)
    })

    const allPassed = checks.every(check => check.passed)

    console.log('\n' + '='.repeat(60))
    if (allPassed) {
      console.log('üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´!')
      console.log('\n‚úÖ –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:')
      console.log('   1. ‚úÖ –ü–æ–ª–µ status ‚Üí businessStatus')
      console.log('   2. ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω—ã versions –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏')
      console.log('   3. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ API endpoints')
      console.log('   4. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
      console.log('   5. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã SEO –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ –≤—Å–µ–º —É—Å–ª—É–≥–∞–º')
      console.log('   6. ‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏')
      console.log('   7. ‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      console.log('\nüéØ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:')
      console.log('   - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É—Å–ª—É–≥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
      console.log('   - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥')
      console.log('   - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥')
      console.log('   - SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
      console.log('   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ API')
      console.log('\nüìã –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —á–µ—Ä–Ω–æ–≤–∏–∫–∏:')
      console.log('   –°–æ–æ–±—â–∏—Ç–µ, –∏ —è –≤–∫–ª—é—á—É —Å–∏—Å—Ç–µ–º—É versions –æ–±—Ä–∞—Ç–Ω–æ')
      console.log('   —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π')
    } else {
      console.log('‚ùå –ï–°–¢–¨ –ù–ï–†–ï–®–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´!')
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –≤—ã—à–µ.')
    }
    console.log('='.repeat(60))

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await client.close()
  }
}

finalServicesCheck()
