#!/usr/bin/env tsx

/**
 * Script to seed TermsPages collection with proper Lexical format
 * Run with: npx tsx src/scripts/seed-terms-pages-fixed.ts
 */

import { getPayloadClient } from '@/utilities/payload/index'

import { logDebug, logInfo, logWarn, logError } from '@/utils/logger'
// Helper function to create proper Lexical text node
function createTextNode(text: string) {
  return {
    type: 'text',
    version: 1,
    detail: 0,
    format: 0,
    mode: 'normal',
    style: '',
    text,
  }
}

// Helper function to create proper Lexical paragraph
function createParagraph(text: string) {
  return {
    type: 'paragraph',
    version: 1,
    direction: null,
    format: '',
    indent: 0,
    children: [createTextNode(text)],
  }
}

// Helper function to create proper Lexical heading
function createHeading(text: string, tag: string = 'h2') {
  return {
    type: 'heading',
    version: 1,
    tag,
    direction: null,
    format: '',
    indent: 0,
    children: [createTextNode(text)],
  }
}

// Helper function to create proper Lexical list
function createList(items: string[]) {
  return {
    type: 'list',
    version: 1,
    listType: 'bullet',
    start: 1,
    tag: 'ul',
    direction: null,
    format: '',
    indent: 0,
    children: items.map((item) => ({
      type: 'listitem',
      version: 1,
      value: 1,
      direction: null,
      format: '',
      indent: 0,
      children: [
        {
          type: 'paragraph',
          version: 1,
          direction: null,
          format: '',
          indent: 0,
          children: [createTextNode(item)],
        },
      ],
    })),
  }
}

// Helper function to create proper Lexical root
function createLexicalRoot(children: any[]) {
  return {
    root: {
      type: 'root',
      version: 1,
      direction: null,
      format: '',
      indent: 0,
      children,
    },
  }
}

// Terms pages data with proper Lexical structure
const termsPages = [
  {
    title: {
      ru: '–£—Å–ª—É–≥–∏',
      en: 'Services',
    },
    tabType: 'services',
    subtitle: {
      ru: '–û–±—â–∏–µ —É—Å–ª–æ–≤–∏—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥',
      en: 'General service terms',
    },
    badge: {
      ru: '–û—Å–Ω–æ–≤–Ω—ã–µ',
      en: 'Core',
    },
    content: {
      ru: createLexicalRoot([
        createHeading('–£—Å–ª–æ–≤–∏—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥', 'h2'),
        createParagraph(
          '–ù–∞—Å—Ç–æ—è—â–∏–µ —É—Å–ª–æ–≤–∏—è —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É Flow Masters –∏ –∫–ª–∏–µ–Ω—Ç–æ–º –ø—Ä–∏ –æ–∫–∞–∑–∞–Ω–∏–∏ —É—Å–ª—É–≥ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.',
        ),
        createHeading('–ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞', 'h3'),
        createList([
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –ò–ò-—Ä–µ—à–µ–Ω–∏–π',
          '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º',
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ò–ò –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã',
          '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
        ]),
        createHeading('–ü–æ—Ä—è–¥–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥', 'h3'),
        createParagraph(
          '–£—Å–ª—É–≥–∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞. –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.',
        ),
      ]),
      en: createLexicalRoot([
        createHeading('Service Terms and Conditions', 'h2'),
        createParagraph(
          'These terms govern the relationship between Flow Masters and the client when providing services in artificial intelligence, business process automation, and software development.',
        ),
        createHeading('Subject of Agreement', 'h3'),
        createList([
          'AI implementation consulting',
          'Chatbot and automation system development',
          'AI integration into existing business processes',
          'Technical support and maintenance',
        ]),
      ]),
    },
    importantNote: {
      ru: createLexicalRoot([
        createParagraph(
          '–í—Å–µ —É—Å–ª—É–≥–∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§. –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞.',
        ),
      ]),
      en: createLexicalRoot([
        createParagraph(
          'All services are provided in accordance with applicable law. Service costs may vary depending on project complexity.',
        ),
      ]),
    },
    order: 0,
    isActive: true,
    publishedAt: new Date().toISOString(),
  },
  {
    title: {
      ru: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
      en: 'Consulting',
    },
    tabType: 'consulting',
    subtitle: {
      ru: '–£—Å–ª–æ–≤–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥',
      en: 'Consulting service terms',
    },
    badge: {
      ru: '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞',
      en: 'Expertise',
    },
    content: {
      ru: createLexicalRoot([
        createHeading('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏', 'h2'),
        createParagraph(
          '–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –ò–ò-—Ä–µ—à–µ–Ω–∏–π, –∞–Ω–∞–ª–∏–∑—É –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –≤—ã–±–æ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.',
        ),
        createHeading('–í–∏–¥—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π', 'h3'),
        createList([
          '–≠–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (30 –º–∏–Ω—É—Ç)',
          '–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (1-2 —á–∞—Å–∞)',
          '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
        ]),
      ]),
      en: createLexicalRoot([
        createHeading('Consulting Services', 'h2'),
        createParagraph(
          'We provide expert consulting on AI solution implementation, business process analysis, and optimal technology selection.',
        ),
      ]),
    },
    order: 1,
    isActive: true,
    publishedAt: new Date().toISOString(),
  },
  {
    title: {
      ru: '–°–µ—Ä–≤–∏—Å—ã',
      en: 'Systems',
    },
    tabType: 'systems',
    subtitle: {
      ru: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º –∏ —Å–µ—Ä–≤–∏—Å–æ–≤',
      en: 'System and service usage terms',
    },
    badge: {
      ru: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      en: 'Technology',
    },
    content: {
      ru: createLexicalRoot([
        createHeading('–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º', 'h2'),
        createParagraph(
          '–ù–∞—Å—Ç–æ—è—â–∏–µ —É—Å–ª–æ–≤–∏—è —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, API –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.',
        ),
        createHeading('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã', 'h3'),
        createList([
          'API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò-—Ä–µ—à–µ–Ω–∏–π',
          '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
          '–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
        ]),
      ]),
      en: createLexicalRoot([
        createHeading('System Usage Terms', 'h2'),
        createParagraph(
          'These terms govern the use of our technological platforms, APIs, and integrated systems.',
        ),
      ]),
    },
    order: 2,
    isActive: true,
    publishedAt: new Date().toISOString(),
  },
  {
    title: {
      ru: '–ü—Ä–æ–¥—É–∫—Ç—ã',
      en: 'Products',
    },
    tabType: 'products',
    subtitle: {
      ru: '–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
      en: 'Product purchase and usage terms',
    },
    badge: {
      ru: '–†–µ—à–µ–Ω–∏—è',
      en: 'Solutions',
    },
    content: {
      ru: createLexicalRoot([
        createHeading('–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤', 'h2'),
        createParagraph(
          '–ù–∞—Å—Ç–æ—è—â–∏–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö –ò–ò-—Ä–µ—à–µ–Ω–∏–π, –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.',
        ),
        createHeading('–¢–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤', 'h3'),
        createList([
          '–ì–æ—Ç–æ–≤—ã–µ —á–∞—Ç-–±–æ—Ç—ã –∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
          '–®–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
          '–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        ]),
      ]),
      en: createLexicalRoot([
        createHeading('Product Purchase Terms', 'h2'),
        createParagraph(
          'These terms apply to the purchase of ready-made AI solutions, software, and digital products.',
        ),
      ]),
    },
    order: 3,
    isActive: true,
    publishedAt: new Date().toISOString(),
  },
]

async function seedTermsPages() {
  logDebug('üìÑ Seeding TermsPages collection with fixed Lexical format...')

  try {
    const payload = await getPayloadClient()
    logDebug('‚úÖ Payload client initialized')

    // Create pages for each locale
    const locales = ['ru', 'en']

    for (const pageData of termsPages) {
      for (const locale of locales) {
        try {
          // Check if page with this tabType already exists for this locale
          const existing = await payload.find({
            collection: 'terms-pages',
            locale,
            where: {
              tabType: {
                equals: pageData.tabType,
              },
            },
            limit: 1,
          })

          if (existing.docs.length > 0) {
            logDebug("Debug:",  `‚ö†Ô∏è  Terms page "${pageData.tabType}" for locale "${locale}" already exists, skipping...`,
            )
            continue
          }

          // Prepare data for this locale
          const localizedData = {
            tabType: pageData.tabType,
            title: pageData.title[locale],
            subtitle: pageData.subtitle[locale],
            badge: pageData.badge[locale],
            content: pageData.content[locale],
            importantNote: pageData.importantNote?.[locale],
            order: pageData.order,
            isActive: pageData.isActive,
            publishedAt: pageData.publishedAt,
          }

          // Create the terms page for this locale
          const page = await payload.create({
            collection: 'terms-pages',
            locale,
            data: localizedData,
          })

          logDebug(`‚úÖ Created terms page: ${pageData.tabType} for ${locale} (${page.id})`)
        } catch (error) {
          logError(
            `‚ùå Error creating terms page "${pageData.tabType}" for locale "${locale}":`,
            error,
          )
        }
      }
    }

    logDebug('üéâ TermsPages seeding completed!')
  } catch (error) {
    logError('‚ùå Error:', error)
    process.exit(1)
  }
}

// Run the script
seedTermsPages()
