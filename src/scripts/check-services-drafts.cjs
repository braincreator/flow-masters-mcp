#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services
 */

const { MongoClient } = require('mongodb')

async function checkServicesDrafts() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services...\n')

  const client = new MongoClient('mongodb://127.0.0.1:27017/flow-masters')

  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n')

    const db = client.db('flow-masters')
    const servicesCollection = db.collection('services')

    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    const totalCount = await servicesCollection.countDocuments()
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalCount}`)

    // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    console.log('\nüìã 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:')
    const statusStats = await servicesCollection.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } }
    ]).toArray()

    statusStats.forEach(stat => {
      console.log(`   ${stat._id || 'undefined'}: ${stat.count}`)
    })

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
    console.log('\nüìù 3. –ó–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "draft":')
    const draftServices = await servicesCollection.find({ status: 'draft' }).limit(10).toArray()
    
    if (draftServices.length > 0) {
      draftServices.forEach((service, index) => {
        console.log(`   ${index + 1}. ${service.title} (ID: ${service._id})`)
        console.log(`      - createdAt: ${service.createdAt}`)
        console.log(`      - updatedAt: ${service.updatedAt}`)
        console.log(`      - _status: ${service._status}`)
        console.log(`      - hasVersions: ${!!service.versions}`)
      })
    } else {
      console.log('   –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "draft"')
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é versions
    console.log('\nüîÑ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ versions:')
    const versionsCollection = db.collection('services_versions')
    const versionsCount = await versionsCollection.countDocuments()
    console.log(`   –í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π: ${versionsCount}`)

    if (versionsCount > 0) {
      const versionStats = await versionsCollection.aggregate([
        {
          $group: {
            _id: '$version._status',
            count: { $sum: 1 }
          }
        },
        { $sort: { count: -1 } }
      ]).toArray()

      console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä—Å–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:')
      versionStats.forEach(stat => {
        console.log(`     ${stat._id || 'undefined'}: ${stat.count}`)
      })

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π
      const sampleVersions = await versionsCollection.find().limit(5).toArray()
      console.log('\n   –ü—Ä–∏–º–µ—Ä—ã –≤–µ—Ä—Å–∏–π:')
      sampleVersions.forEach((version, index) => {
        console.log(`     ${index + 1}. Parent: ${version.parent}, Status: ${version.version?._status}`)
        console.log(`        - createdAt: ${version.createdAt}`)
        console.log(`        - autosave: ${version.autosave}`)
      })
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    console.log('\nüîó 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π:')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º orders
    const ordersCollection = db.collection('orders')
    const ordersWithServices = await ordersCollection.countDocuments({
      'items.service': { $exists: true }
    })
    console.log(`   –ó–∞–∫–∞–∑—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ services: ${ordersWithServices}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º service-projects
    const serviceProjectsCollection = db.collection('service-projects')
    const serviceProjectsCount = await serviceProjectsCollection.countDocuments()
    console.log(`   –ü—Ä–æ–µ–∫—Ç—ã —É—Å–ª—É–≥: ${serviceProjectsCount}`)

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await client.close()
  }
}

checkServicesDrafts()
