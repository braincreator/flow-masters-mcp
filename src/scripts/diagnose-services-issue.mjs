#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π services
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
 */

import { getPayload } from 'payload'
import configPromise from '../../src/payload.config.ts'

async function diagnoseServicesIssue() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π services...\n')

  try {
    const payload = await getPayload({ config: configPromise })
    console.log('‚úÖ Payload –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n')

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    console.log('üìä 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services:')

    const allServices = await payload.find({
      collection: 'services',
      limit: 0, // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ count
    })
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${allServices.totalDocs}`)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    console.log('\nüìã 2. –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (status: published):')
    const publishedServices = await payload.find({
      collection: 'services',
      where: {
        status: {
          equals: 'published',
        },
      },
      limit: 10,
    })
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${publishedServices.totalDocs}`)
    publishedServices.docs.forEach((service, index) => {
      console.log(
        `   ${index + 1}. ${service.title} (ID: ${service.id}, Status: ${service.status})`,
      )
    })

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏
    console.log('\nüìù 3. –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ (status: draft):')
    const draftServices = await payload.find({
      collection: 'services',
      where: {
        status: {
          equals: 'draft',
        },
      },
      limit: 10,
    })
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${draftServices.totalDocs}`)
    draftServices.docs.forEach((service, index) => {
      console.log(
        `   ${index + 1}. ${service.title} (ID: ${service.id}, Status: ${service.status})`,
      )
    })

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –≤–µ—Ä—Å–∏—è–º–∏ (drafts)
    console.log('\nüîÑ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤:')
    try {
      const servicesWithDrafts = await payload.find({
        collection: 'services',
        draft: true,
        limit: 10,
      })
      console.log(`   –ó–∞–ø–∏—Å–µ–π —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏: ${servicesWithDrafts.totalDocs}`)
      servicesWithDrafts.docs.forEach((service, index) => {
        console.log(
          `   ${index + 1}. ${service.title} (ID: ${service.id}, Status: ${service.status}, Draft: ${service._status === 'draft' ? 'Yes' : 'No'})`,
        )
      })
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ${error.message}`)
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞
    console.log('\n‚ùì 5. –ó–∞–ø–∏—Å–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º:')
    const servicesWithoutStatus = await payload.find({
      collection: 'services',
      where: {
        or: [
          {
            status: {
              exists: false,
            },
          },
          {
            status: {
              not_in: ['published', 'draft', 'archived'],
            },
          },
        ],
      },
      limit: 10,
    })
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${servicesWithoutStatus.totalDocs}`)
    servicesWithoutStatus.docs.forEach((service, index) => {
      console.log(
        `   ${index + 1}. ${service.title} (ID: ${service.id}, Status: ${service.status || 'undefined'})`,
      )
    })

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    console.log('\nüåê 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints:')

    // –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ API (—Ç–æ–ª—å–∫–æ published)
    try {
      const response = await fetch('http://localhost:3000/api/v1/services?status=published&limit=5')
      if (response.ok) {
        const data = await response.json()
        console.log(`   ‚úÖ Frontend API (published): ${data.docs?.length || 0} –∑–∞–ø–∏—Å–µ–π`)
      } else {
        console.log(`   ‚ùå Frontend API error: ${response.status}`)
      }
    } catch (error) {
      console.log(`   ‚ùå Frontend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`)
    }

    // –¢–µ—Å—Ç API —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
    try {
      const response = await fetch(
        'http://localhost:3000/api/v1/services?includeDrafts=true&limit=5',
      )
      if (response.ok) {
        const data = await response.json()
        console.log(`   ‚úÖ Frontend API (—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏): ${data.docs?.length || 0} –∑–∞–ø–∏—Å–µ–π`)
      } else {
        console.log(`   ‚ùå Frontend API (—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏) error: ${response.status}`)
      }
    } catch (error) {
      console.log(`   ‚ùå Frontend API (—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`)
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîß 7. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:')
    if (allServices.docs.length > 0) {
      const sampleService = allServices.docs[0]
      console.log('   –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø–∏—Å–∏:')
      console.log(`   - ID: ${sampleService.id}`)
      console.log(`   - Title: ${sampleService.title}`)
      console.log(`   - Status: ${sampleService.status}`)
      console.log(`   - _status: ${sampleService._status || 'undefined'}`)
      console.log(`   - createdAt: ${sampleService.createdAt}`)
      console.log(`   - updatedAt: ${sampleService.updatedAt}`)
      console.log(`   - publishedAt: ${sampleService.publishedAt || 'undefined'}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ—Ä—Å–∏–π
      if (sampleService.versions) {
        console.log(`   - Versions: ${sampleService.versions.length || 0} –≤–µ—Ä—Å–∏–π`)
      }
    }

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseServicesIssue()
  .then(() => {
    console.log('\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
