#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services
 */

const { MongoClient } = require('mongodb')

async function testDraftCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services...\n')

  const client = new MongoClient('mongodb://127.0.0.1:27017/flow-masters')

  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n')

    const db = client.db('flow-masters')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å services
    console.log('üìã –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:')
    const collections = await db.listCollections().toArray()
    const serviceRelatedCollections = collections.filter(col => 
      col.name.includes('service') || col.name.includes('version')
    )
    
    serviceRelatedCollections.forEach(col => {
      console.log(`   - ${col.name}`)
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é services
    const servicesCollection = db.collection('services')
    console.log('\nüìä –ö–æ–ª–ª–µ–∫—Ü–∏—è services:')
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const sampleService = await servicesCollection.findOne()
    if (sampleService) {
      console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:')
      console.log(`   - _id: ${sampleService._id}`)
      console.log(`   - title: ${sampleService.title}`)
      console.log(`   - status: ${sampleService.status}`)
      console.log(`   - _status: ${sampleService._status}`)
      console.log(`   - createdAt: ${sampleService.createdAt}`)
      console.log(`   - updatedAt: ${sampleService.updatedAt}`)
      console.log(`   - versions: ${JSON.stringify(sampleService.versions)}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
      const fields = Object.keys(sampleService)
      console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª–µ–π: ${fields.length}`)
      console.log(`   - –ü–æ–ª—è: ${fields.join(', ')}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é services_versions (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      const versionsCollection = db.collection('services_versions')
      const versionsCount = await versionsCollection.countDocuments()
      console.log(`\nüîÑ –ö–æ–ª–ª–µ–∫—Ü–∏—è services_versions: ${versionsCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
      
      if (versionsCount > 0) {
        const sampleVersion = await versionsCollection.findOne()
        console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–µ—Ä—Å–∏–∏:')
        console.log(`   - _id: ${sampleVersion._id}`)
        console.log(`   - parent: ${sampleVersion.parent}`)
        console.log(`   - version: ${JSON.stringify(sampleVersion.version, null, 2)}`)
        console.log(`   - autosave: ${sampleVersion.autosave}`)
        console.log(`   - createdAt: ${sampleVersion.createdAt}`)
      }
    } catch (error) {
      console.log('\n‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è services_versions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º payload-preferences (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Payload)
    try {
      const preferencesCollection = db.collection('payload-preferences')
      const preferencesCount = await preferencesCollection.countDocuments()
      console.log(`\n‚öôÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è payload-preferences: ${preferencesCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
      
      if (preferencesCount > 0) {
        const preferences = await preferencesCollection.find().toArray()
        preferences.forEach(pref => {
          console.log(`   - ${pref.key}: ${JSON.stringify(pref.value)}`)
        })
      }
    } catch (error) {
      console.log('\n‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è payload-preferences –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º payload-migrations
    try {
      const migrationsCollection = db.collection('payload-migrations')
      const migrationsCount = await migrationsCollection.countDocuments()
      console.log(`\nüîÑ –ö–æ–ª–ª–µ–∫—Ü–∏—è payload-migrations: ${migrationsCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
      
      if (migrationsCount > 0) {
        const migrations = await migrationsCollection.find().sort({ batch: -1 }).limit(5).toArray()
        console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:')
        migrations.forEach(migration => {
          console.log(`   - ${migration.name} (batch: ${migration.batch})`)
        })
      }
    } catch (error) {
      console.log('\n‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è payload-migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }

    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await client.close()
  }
}

testDraftCreation()
