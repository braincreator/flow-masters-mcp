#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —É—Å–ª—É–≥ –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */

const { MongoClient } = require('mongodb')

async function checkAllServices() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª—É–≥ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services...\n')

  const client = new MongoClient('mongodb://127.0.0.1:27017/flow-masters')

  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n')

    const db = client.db('flow-masters')
    const servicesCollection = db.collection('services')

    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    const totalCount = await servicesCollection.countDocuments()
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalCount}`)

    // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
    console.log('\nüìã 2. –í—Å–µ —É—Å–ª—É–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:')
    const allServices = await servicesCollection.find({}).toArray()
    
    if (allServices.length > 0) {
      allServices.forEach((service, index) => {
        const title = typeof service.title === 'object' 
          ? (service.title.ru || service.title.en || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
          : service.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        
        console.log(`   ${index + 1}. ${title}`)
        console.log(`      - ID: ${service._id}`)
        console.log(`      - _status: ${service._status}`)
        console.log(`      - businessStatus: ${service.businessStatus}`)
        console.log(`      - status (—Å—Ç–∞—Ä–æ–µ): ${service.status}`)
        console.log(`      - serviceType: ${service.serviceType}`)
        console.log(`      - createdAt: ${service.createdAt}`)
        console.log(`      - updatedAt: ${service.updatedAt}`)
        console.log('')
      })
    } else {
      console.log('   ‚ùå –ù–ï–¢ –£–°–õ–£–ì –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!')
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—è–º
    console.log('üìä 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º:')
    
    const statusStats = await servicesCollection.aggregate([
      {
        $group: {
          _id: '$_status',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } }
    ]).toArray()

    console.log('   –ü–æ _status:')
    statusStats.forEach(stat => {
      console.log(`     ${stat._id || 'undefined'}: ${stat.count}`)
    })

    const businessStatusStats = await servicesCollection.aggregate([
      {
        $group: {
          _id: '$businessStatus',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } }
    ]).toArray()

    console.log('   –ü–æ businessStatus:')
    businessStatusStats.forEach(stat => {
      console.log(`     ${stat._id || 'undefined'}: ${stat.count}`)
    })

    const oldStatusStats = await servicesCollection.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } }
    ]).toArray()

    console.log('   –ü–æ —Å—Ç–∞—Ä–æ–º—É status:')
    oldStatusStats.forEach(stat => {
      console.log(`     ${stat._id || 'undefined'}: ${stat.count}`)
    })

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    console.log('\nüåê 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API:')
    
    try {
      // –¢–µ—Å—Ç —Å _status=published
      const response1 = await fetch('http://localhost:3000/api/v1/services?_status=published')
      if (response1.ok) {
        const data1 = await response1.json()
        console.log(`   ‚úÖ API —Å _status=published: ${data1.docs?.length || 0} —É—Å–ª—É–≥`)
      } else {
        console.log(`   ‚ùå API —Å _status=published –æ—à–∏–±–∫–∞: ${response1.status}`)
      }

      // –¢–µ—Å—Ç –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const response2 = await fetch('http://localhost:3000/api/v1/services')
      if (response2.ok) {
        const data2 = await response2.json()
        console.log(`   ‚úÖ API –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${data2.docs?.length || 0} —É—Å–ª—É–≥`)
      } else {
        console.log(`   ‚ùå API –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—à–∏–±–∫–∞: ${response2.status}`)
      }

      // –¢–µ—Å—Ç —Å–æ —Å—Ç–∞—Ä—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º status
      const response3 = await fetch('http://localhost:3000/api/v1/services?status=published')
      if (response3.ok) {
        const data3 = await response3.json()
        console.log(`   ‚úÖ API —Å–æ —Å—Ç–∞—Ä—ã–º status=published: ${data3.docs?.length || 0} —É—Å–ª—É–≥`)
      } else {
        console.log(`   ‚ùå API —Å–æ —Å—Ç–∞—Ä—ã–º status=published –æ—à–∏–±–∫–∞: ${response3.status}`)
      }

    } catch (error) {
      console.log(`   ‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`)
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    console.log('\nüéõÔ∏è 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:')
    
    const publishedServices = await servicesCollection.countDocuments({ _status: 'published' })
    const draftServices = await servicesCollection.countDocuments({ _status: 'draft' })
    const activeServices = await servicesCollection.countDocuments({ businessStatus: 'active' })
    const hiddenServices = await servicesCollection.countDocuments({ businessStatus: 'hidden' })
    
    console.log(`   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ (_status: published): ${publishedServices}`)
    console.log(`   –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ (_status: draft): ${draftServices}`)
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ (businessStatus: active): ${activeServices}`)
    console.log(`   –°–∫—Ä—ã—Ç—ã–µ (businessStatus: hidden): ${hiddenServices}`)

    // 6. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ 6. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:')
    
    if (totalCount === 0) {
      console.log('   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ —É—Å–ª—É–≥–∏ –∏—Å—á–µ–∑–ª–∏!')
      console.log('   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞.')
    } else if (publishedServices === 0) {
      console.log('   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –£—Å–ª—É–≥–∏ –µ—Å—Ç—å, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!')
      console.log('   –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ _status.')
    } else {
      console.log('   ‚úÖ –£—Å–ª—É–≥–∏ –Ω–∞ –º–µ—Å—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã!')
      console.log(`   –í—Å–µ–≥–æ: ${totalCount}, –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: ${publishedServices}`)
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await client.close()
  }
}

checkAllServices()
