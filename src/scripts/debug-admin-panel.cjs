#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 */

const { MongoClient } = require('mongodb')

async function debugAdminPanel() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...\n')

  const client = new MongoClient('mongodb://127.0.0.1:27017/flow-masters')

  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n')

    const db = client.db('flow-masters')
    const servicesCollection = db.collection('services')
    const versionsCollection = db.collection('_services_versions')

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    console.log('üìä 1. –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è services:')
    const totalServices = await servicesCollection.countDocuments()
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalServices}`)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    console.log('\nüîç 2. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:')
    
    const sampleService = await servicesCollection.findOne()
    if (sampleService) {
      console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏:')
      console.log(`   - _id: ${sampleService._id}`)
      console.log(`   - _status: ${sampleService._status}`)
      console.log(`   - businessStatus: ${sampleService.businessStatus}`)
      console.log(`   - status (—Å—Ç–∞—Ä–æ–µ): ${sampleService.status}`)
      console.log(`   - title: ${JSON.stringify(sampleService.title)}`)
      console.log(`   - createdAt: ${sampleService.createdAt}`)
      console.log(`   - updatedAt: ${sampleService.updatedAt}`)
      console.log(`   - __v: ${sampleService.__v}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
      const requiredFields = ['_id', '_status', 'title', 'serviceType', 'createdAt', 'updatedAt']
      const missingFields = requiredFields.filter(field => !sampleService.hasOwnProperty(field))
      
      if (missingFields.length > 0) {
        console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: ${missingFields.join(', ')}`)
      } else {
        console.log(`   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`)
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é versions
    console.log('\nüîÑ 3. –ö–æ–ª–ª–µ–∫—Ü–∏—è versions:')
    const totalVersions = await versionsCollection.countDocuments()
    console.log(`   –í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π: ${totalVersions}`)

    if (totalVersions > 0) {
      const sampleVersion = await versionsCollection.findOne()
      console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–µ—Ä—Å–∏–∏:')
      console.log(`   - _id: ${sampleVersion._id}`)
      console.log(`   - parent: ${sampleVersion.parent}`)
      console.log(`   - version._status: ${sampleVersion.version?._status}`)
      console.log(`   - autosave: ${sampleVersion.autosave}`)
      console.log(`   - latest: ${sampleVersion.latest}`)
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å versions
    console.log('\n‚ö†Ô∏è 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –≤ versions –±–µ–∑ parent –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (totalVersions > 0) {
      const versionsWithoutParent = await versionsCollection.aggregate([
        {
          $lookup: {
            from: 'services',
            localField: 'parent',
            foreignField: '_id',
            as: 'parentDoc'
          }
        },
        {
          $match: {
            parentDoc: { $size: 0 }
          }
        }
      ]).toArray()

      if (versionsWithoutParent.length > 0) {
        console.log(`   ‚ùå –ù–∞–π–¥–µ–Ω–æ ${versionsWithoutParent.length} –≤–µ—Ä—Å–∏–π –±–µ–∑ parent –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏`)
        versionsWithoutParent.forEach((version, index) => {
          console.log(`     ${index + 1}. Version ID: ${version._id}, Parent: ${version.parent}`)
        })
      } else {
        console.log(`   ‚úÖ –í—Å–µ –≤–µ—Ä—Å–∏–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ parent –∑–∞–ø–∏—Å–∏`)
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–≥—É—Ç –ª–∏ –∑–∞–ø–∏—Å–∏ –±—ã—Ç—å "—Å–∫—Ä—ã—Ç—ã" –∏–∑-–∑–∞ versions
    console.log('\nüé≠ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ "—Å–∫—Ä—ã—Ç—ã—Ö" –∑–∞–ø–∏—Å–µ–π:')
    
    // –í–æ–∑–º–æ–∂–Ω–æ, Payload CMS –æ–∂–∏–¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É versions
    const servicesWithoutVersions = await servicesCollection.find({
      $or: [
        { versions: { $exists: false } },
        { versions: null },
        { versions: { $size: 0 } }
      ]
    }).toArray()

    console.log(`   –ó–∞–ø–∏—Å–µ–π –±–µ–∑ –ø–æ–ª—è versions: ${servicesWithoutVersions.length}`)
    
    if (servicesWithoutVersions.length > 0) {
      console.log('   –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –±–µ–∑ versions:')
      servicesWithoutVersions.slice(0, 3).forEach((service, index) => {
        const title = typeof service.title === 'object' 
          ? (service.title.ru || service.title.en) 
          : service.title
        console.log(`     ${index + 1}. ${title} (ID: ${service._id})`)
      })
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º Payload API –Ω–∞–ø—Ä—è–º—É—é
    console.log('\nüîå 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Payload API:')
    
    try {
      // –¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ API
      const adminResponse = await fetch('http://localhost:3000/api/services', {
        headers: {
          'Content-Type': 'application/json'
        }
      })
      
      if (adminResponse.ok) {
        const adminData = await adminResponse.json()
        console.log(`   ‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π API (/api/services): ${adminData.docs?.length || 0} –∑–∞–ø–∏—Å–µ–π`)
        
        if (adminData.docs && adminData.docs.length > 0) {
          console.log('   –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ API:')
          const firstDoc = adminData.docs[0]
          console.log(`     - ID: ${firstDoc.id}`)
          console.log(`     - _status: ${firstDoc._status}`)
          console.log(`     - title: ${JSON.stringify(firstDoc.title)}`)
        }
      } else {
        console.log(`   ‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–π API –æ—à–∏–±–∫–∞: ${adminResponse.status}`)
        const errorText = await adminResponse.text()
        console.log(`   –û—à–∏–±–∫–∞: ${errorText.substring(0, 200)}...`)
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ API: ${error.message}`)
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    console.log('\nüîê 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞:')
    console.log('   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ access –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services:')
    console.log('   - read: () => true (–ø—É–±–ª–∏—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ)')
    console.log('   - create: isAdmin (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)')
    console.log('   - update: isAdmin (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)')
    console.log('   - delete: isAdmin (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)')

    // 8. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüéØ 8. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è:')
    
    if (totalServices === 0) {
      console.log('   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏')
    } else if (totalVersions > totalServices * 2) {
      console.log('   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–µ—Ä—Å–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø–∏—Å–∏ "–∑–∞—Å—Ç—Ä—è–ª–∏" –≤ versions')
    } else {
      console.log('   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ')
    }

    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
    console.log('   2. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞')
    console.log('   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    console.log('   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏')
    console.log('   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await client.close()
  }
}

debugAdminPanel()
