#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –≤–µ—Ä—Å–∏—è–º–∏
 */

import { getPayload } from 'payload'
import configPromise from '../../src/payload.config.ts'

async function fixServicesData() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services...\n')

  try {
    const payload = await getPayload({ config: configPromise })
    console.log('‚úÖ Payload –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n')

    let fixedCount = 0
    let errorCount = 0

    // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    console.log('üîç 1. –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞...')

    const problematicServices = await payload.find({
      collection: 'services',
      where: {
        or: [
          {
            status: {
              exists: false,
            },
          },
          {
            status: {
              not_in: ['published', 'draft', 'archived'],
            },
          },
        ],
      },
      limit: 100,
    })

    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${problematicServices.totalDocs} –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞`)

    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞
    for (const service of problematicServices.docs) {
      try {
        console.log(`   –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å: ${service.title} (ID: ${service.id})`)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'published' –¥–ª—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞
        const updateData = {
          status: 'published',
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç publishedAt, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        if (!service.publishedAt) {
          updateData.publishedAt = new Date().toISOString()
        }

        await payload.update({
          collection: 'services',
          id: service.id,
          data: updateData,
        })

        fixedCount++
        console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${service.title}`)
      } catch (error) {
        errorCount++
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${service.title}: ${error.message}`)
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    console.log('\nüåê 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π...')

    const allServices = await payload.find({
      collection: 'services',
      limit: 100,
    })

    for (const service of allServices.docs) {
      try {
        let needsUpdate = false
        const updateData = {}

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º title
        if (typeof service.title === 'string') {
          // –ï—Å–ª–∏ title - —Å—Ç—Ä–æ–∫–∞, –∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å –ª–æ–∫–∞–ª—è–º–∏
          updateData.title = {
            en: service.title,
            ru: service.title,
          }
          needsUpdate = true
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º price
        if (typeof service.price === 'number') {
          // –ï—Å–ª–∏ price - —á–∏—Å–ª–æ, –∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å –ª–æ–∫–∞–ª—è–º–∏
          updateData.price = {
            en: service.price,
            ru: service.price,
          }
          needsUpdate = true
        }

        if (needsUpdate) {
          console.log(`   –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è: ${service.title}`)

          await payload.update({
            collection: 'services',
            id: service.id,
            data: updateData,
          })

          fixedCount++
          console.log(`   ‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${service.title}`)
        }
      } catch (error) {
        errorCount++
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ${service.title}: ${error.message}`)
      }
    }

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ slug'–∏
    console.log("\nüîó 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ slug'–æ–≤...")

    const servicesWithoutSlug = await payload.find({
      collection: 'services',
      where: {
        slug: {
          exists: false,
        },
      },
      limit: 100,
    })

    for (const service of servicesWithoutSlug.docs) {
      try {
        const title =
          typeof service.title === 'object' ? service.title.en || service.title.ru : service.title
        const slug = title
          .toLowerCase()
          .replace(/[^a-z0-9\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim('-')

        console.log(`   –°–æ–∑–¥–∞–µ–º slug –¥–ª—è: ${title} -> ${slug}`)

        await payload.update({
          collection: 'services',
          id: service.id,
          data: {
            slug: slug,
          },
        })

        fixedCount++
        console.log(`   ‚úÖ Slug —Å–æ–∑–¥–∞–Ω: ${slug}`)
      } catch (error) {
        errorCount++
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ slug –¥–ª—è ${service.title}: ${error.message}`)
      }
    }

    // 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${fixedCount}`)
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`)

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...')

    const finalCheck = await payload.find({
      collection: 'services',
      where: {
        status: {
          equals: 'published',
        },
      },
      limit: 5,
    })

    console.log(`   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${finalCheck.totalDocs}`)
    finalCheck.docs.forEach((service, index) => {
      console.log(
        `   ${index + 1}. ${service.title} (Status: ${service.status}, Slug: ${service.slug})`,
      )
    })

    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixServicesData()
  .then(() => {
    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
