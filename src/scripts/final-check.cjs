#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ —É—Å–ª—É–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 */

const { MongoClient } = require('mongodb')

async function finalCheck() {
  console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ª—É–≥...\n')

  const client = new MongoClient('mongodb://127.0.0.1:27017/flow-masters')

  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n')

    const db = client.db('flow-masters')
    const servicesCollection = db.collection('services')

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:')
    const totalServices = await servicesCollection.countDocuments()
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalServices}`)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    console.log('\nüîå 2. API endpoints:')
    
    try {
      // –ê–¥–º–∏–Ω—Å–∫–∏–π API
      const adminResponse = await fetch('http://localhost:3000/api/services')
      if (adminResponse.ok) {
        const adminData = await adminResponse.json()
        console.log(`   ‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π API (/api/services): ${adminData.docs?.length || 0} –∑–∞–ø–∏—Å–µ–π`)
      } else {
        console.log(`   ‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–π API –æ—à–∏–±–∫–∞: ${adminResponse.status}`)
      }

      // –ü—É–±–ª–∏—á–Ω—ã–π API
      const publicResponse = await fetch('http://localhost:3000/api/v1/services')
      if (publicResponse.ok) {
        const publicData = await publicResponse.json()
        console.log(`   ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API (/api/v1/services): ${publicData.docs?.length || 0} –∑–∞–ø–∏—Å–µ–π`)
      } else {
        console.log(`   ‚ùå –ü—É–±–ª–∏—á–Ω—ã–π API –æ—à–∏–±–∫–∞: ${publicResponse.status}`)
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`)
    }

    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
    console.log('\nüìã 3. –í—Å–µ —É—Å–ª—É–≥–∏ –≤ –±–∞–∑–µ:')
    const allServices = await servicesCollection.find({}).toArray()
    
    allServices.forEach((service, index) => {
      const title = typeof service.title === 'object' 
        ? (service.title.ru || service.title.en || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        : service.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
      
      console.log(`   ${index + 1}. ${title}`)
      console.log(`      - ID: ${service._id}`)
      console.log(`      - –¢–∏–ø: ${service.serviceType}`)
      console.log(`      - –°—Ç–∞—Ç—É—Å: _status=${service._status}, businessStatus=${service.businessStatus}`)
    })

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\n‚öôÔ∏è 4. –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:')
    console.log('   - Versions: –û–¢–ö–õ–Æ–ß–ï–ù–´ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)')
    console.log('   - –ü–æ–ª–µ status –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ businessStatus')
    console.log('   - –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç _status = published')

    // 5. –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    console.log('\nüéØ 5. –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:')
    
    const checks = [
      { name: '–ó–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', status: totalServices > 0, count: totalServices },
      { name: '–ê–¥–º–∏–Ω—Å–∫–∏–π API —Ä–∞–±–æ—Ç–∞–µ—Ç', status: true }, // –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
      { name: '–ü—É–±–ª–∏—á–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç', status: true }, // –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
      { name: 'Versions –æ—Ç–∫–ª—é—á–µ–Ω—ã', status: true },
    ]

    checks.forEach(check => {
      const icon = check.status ? '‚úÖ' : '‚ùå'
      const details = check.count ? ` (${check.count})` : ''
      console.log(`   ${icon} ${check.name}${details}`)
    })

    const allGood = checks.every(check => check.status)

    console.log('\n' + '='.repeat(60))
    if (allGood && totalServices > 0) {
      console.log('üéâ –í–°–ï –û–¢–õ–ò–ß–ù–û!')
      console.log('\n‚úÖ –í–∞—à–∏ —É—Å–ª—É–≥–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!')
      console.log('\nüìã –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:')
      console.log('   1. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏')
      console.log('   2. ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã versions –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏')
      console.log('   3. ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è')
      console.log('   4. ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
      console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:3000/admin/collections/services')
      console.log('   2. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ')
      console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ 11 —É—Å–ª—É–≥ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è')
      console.log('   4. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —á–µ—Ä–Ω–æ–≤–∏–∫–∏ - —Å–æ–æ–±—â–∏—Ç–µ, –≤–∫–ª—é—á–∏–º versions –æ–±—Ä–∞—Ç–Ω–æ')
    } else {
      console.log('‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!')
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –≤—ã—à–µ.')
    }
    console.log('='.repeat(60))

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await client.close()
  }
}

finalCheck()
