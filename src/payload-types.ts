/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones = 'Europe/Moscow' | 'America/Los_Angeles' | 'America/New_York';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {
    content: ContentBlock;
    cta: CallToActionBlock;
    urgencyCTA: UrgencyCTABlock;
    hero: HeroBlock;
    features: Features;
    divider: Divider;
    steps: Steps;
    accordion: Accordion;
    card: CardBlock;
    mediaBlock: MediaBlock;
    code: CodeBlock;
    video: Video;
    audio: AudioBlock;
    carousel: Carousel;
    gallery: Gallery;
    videoLessons: VideoLessonsBlock;
    banner: BannerBlock;
    faq: FAQBlock;
    courseFAQ: CourseFAQBlock;
    pricingTable: PricingTable;
    coursePricingComparison: CoursePricingComparisonBlock;
    stats: StatsBlock;
    tabs: TabsBlock;
    timeline: Timeline;
    tableOfContents: TableOfContents;
    roadmap: RoadmapBlock;
    benefitsOutcomes: BenefitsOutcomesBlock;
    targetAudience: TargetAudienceBlock;
    guarantee: GuaranteeBlock;
    socialProofAdvanced: SocialProofAdvancedBlock;
    teamMembers: TeamMembers;
    testimonials: Testimonials;
    instructorProfile: InstructorProfileBlock;
    header: HeaderBlock;
    footer: FooterBlock;
    services: ServicesBlock;
    caseStudies: CaseStudiesBlock;
    techStack: TechStackBlock;
    plansComparison: PlansComparisonBlock;
    course: CourseBlock;
    curriculum: CurriculumBlock;
    userProgress: UserProgressBlock;
    certificates: CertificatesBlock;
    resourceLibrary: ResourceLibraryBlock;
    aiTools: AiToolsBlock;
    leaderboard: LeaderboardBlock;
    courseOverview: CourseOverviewBlock;
    quizAssessment: QuizAssessmentBlock;
    assignments: AssignmentsBlock;
    achievementsBlock: AchievementsBlockType;
    projectShowcase: ProjectShowcaseBlock;
    funnelStep: FunnelStepBlock;
    recommendations: RecommendationsBlock;
    popupTriggerConfig: PopupTriggerConfigBlock;
    productsFilter: ProductsFilterBlock;
    productsList: ProductsList;
    formBlock: FormBlock;
    newsletter: Newsletter;
    feedback: FeedbackBlock;
    poll: PollBlock;
    aiAssistant: AiAssistantBlock;
    leadMagnetOffer: LeadMagnetOfferBlock;
    discussionForum: DiscussionForumBlock;
    articleHeader: ArticleHeader;
    authorBio: AuthorBio;
    blockquote: Blockquote;
    comments: Comments;
    relatedPosts: RelatedPosts;
    socialShare: SocialShare;
    interactiveDemo: InteractiveDemoBlock;
    calendar: CalendarBlock;
    eventTracker: EventTrackerBlock;
    reportEmbed: ReportEmbedBlock;
    chat: ChatBlock;
  };
  collections: {
    pages: Page;
    media: Media;
    users: User;
    categories: Category;
    tags: Tag;
    notifications: Notification;
    'course-analytics': CourseAnalytic;
    posts: Post;
    'post-metrics': PostMetric;
    authors: Author;
    comments: Comments;
    products: Product;
    productCategories: ProductCategory;
    services: Service;
    orders: Order;
    'order-tracking': OrderTracking;
    'cart-sessions': CartSession;
    discounts: Discount;
    promotions: Promotion;
    reviews: Review;
    courses: Course;
    modules: Module;
    lessons: Lesson;
    resources: Resource;
    achievements: Achievement;
    'user-achievements': UserAchievement;
    'course-enrollments': CourseEnrollment;
    'lesson-progress': LessonProgress;
    leaderboard: Leaderboard;
    rewards: Reward;
    'user-rewards': UserReward;
    certificates: Certificate;
    templates: Template;
    'automation-jobs': AutomationJob;
    'forum-categories': ForumCategory;
    messages: Message;
    'newsletter-subscribers': NewsletterSubscriber;
    'email-templates': EmailTemplate;
    'sender-emails': SenderEmail;
    'email-campaigns': EmailCampaign;
    broadcasts: Broadcast;
    'broadcast-reports': BroadcastReport;
    popups: Popup;
    'user-segments': UserSegment;
    testimonials: Testimonials;
    'user-favorites': UserFavorite;
    'subscription-plans': SubscriptionPlan;
    subscriptions: Subscription;
    'subscription-payments': SubscriptionPayment;
    integrations: Integration;
    projects: Project;
    solutions: Solution;
    events: Event;
    'calendly-settings': CalendlySetting;
    bookings: Booking;
    assessments: Assessment;
    'course-reviews': CourseReview;
    'assessment-submissions': AssessmentSubmission;
    'learning-paths': LearningPath;
    'waiting-list-entries': WaitingListEntry;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    notifications: NotificationsSelect<false> | NotificationsSelect<true>;
    'course-analytics': CourseAnalyticsSelect<false> | CourseAnalyticsSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    'post-metrics': PostMetricsSelect<false> | PostMetricsSelect<true>;
    authors: AuthorsSelect<false> | AuthorsSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    productCategories: ProductCategoriesSelect<false> | ProductCategoriesSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    'order-tracking': OrderTrackingSelect<false> | OrderTrackingSelect<true>;
    'cart-sessions': CartSessionsSelect<false> | CartSessionsSelect<true>;
    discounts: DiscountsSelect<false> | DiscountsSelect<true>;
    promotions: PromotionsSelect<false> | PromotionsSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    modules: ModulesSelect<false> | ModulesSelect<true>;
    lessons: LessonsSelect<false> | LessonsSelect<true>;
    resources: ResourcesSelect<false> | ResourcesSelect<true>;
    achievements: AchievementsSelect<false> | AchievementsSelect<true>;
    'user-achievements': UserAchievementsSelect<false> | UserAchievementsSelect<true>;
    'course-enrollments': CourseEnrollmentsSelect<false> | CourseEnrollmentsSelect<true>;
    'lesson-progress': LessonProgressSelect<false> | LessonProgressSelect<true>;
    leaderboard: LeaderboardSelect<false> | LeaderboardSelect<true>;
    rewards: RewardsSelect<false> | RewardsSelect<true>;
    'user-rewards': UserRewardsSelect<false> | UserRewardsSelect<true>;
    certificates: CertificatesSelect<false> | CertificatesSelect<true>;
    templates: TemplatesSelect<false> | TemplatesSelect<true>;
    'automation-jobs': AutomationJobsSelect<false> | AutomationJobsSelect<true>;
    'forum-categories': ForumCategoriesSelect<false> | ForumCategoriesSelect<true>;
    messages: MessagesSelect<false> | MessagesSelect<true>;
    'newsletter-subscribers': NewsletterSubscribersSelect<false> | NewsletterSubscribersSelect<true>;
    'email-templates': EmailTemplatesSelect<false> | EmailTemplatesSelect<true>;
    'sender-emails': SenderEmailsSelect<false> | SenderEmailsSelect<true>;
    'email-campaigns': EmailCampaignsSelect<false> | EmailCampaignsSelect<true>;
    broadcasts: BroadcastsSelect<false> | BroadcastsSelect<true>;
    'broadcast-reports': BroadcastReportsSelect<false> | BroadcastReportsSelect<true>;
    popups: PopupsSelect<false> | PopupsSelect<true>;
    'user-segments': UserSegmentsSelect<false> | UserSegmentsSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    'user-favorites': UserFavoritesSelect<false> | UserFavoritesSelect<true>;
    'subscription-plans': SubscriptionPlansSelect<false> | SubscriptionPlansSelect<true>;
    subscriptions: SubscriptionsSelect<false> | SubscriptionsSelect<true>;
    'subscription-payments': SubscriptionPaymentsSelect<false> | SubscriptionPaymentsSelect<true>;
    integrations: IntegrationsSelect<false> | IntegrationsSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    solutions: SolutionsSelect<false> | SolutionsSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    'calendly-settings': CalendlySettingsSelect<false> | CalendlySettingsSelect<true>;
    bookings: BookingsSelect<false> | BookingsSelect<true>;
    assessments: AssessmentsSelect<false> | AssessmentsSelect<true>;
    'course-reviews': CourseReviewsSelect<false> | CourseReviewsSelect<true>;
    'assessment-submissions': AssessmentSubmissionsSelect<false> | AssessmentSubmissionsSelect<true>;
    'learning-paths': LearningPathsSelect<false> | LearningPathsSelect<true>;
    'waiting-list-entries': WaitingListEntriesSelect<false> | WaitingListEntriesSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
    'email-settings': EmailSetting;
    'payment-providers': PaymentProvider;
    'notification-settings': NotificationSetting;
    'currency-settings': CurrencySetting;
    'exchange-rate-settings': ExchangeRateSetting;
    'webhook-settings': WebhookSetting;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'email-settings': EmailSettingsSelect<false> | EmailSettingsSelect<true>;
    'payment-providers': PaymentProvidersSelect<false> | PaymentProvidersSelect<true>;
    'notification-settings': NotificationSettingsSelect<false> | NotificationSettingsSelect<true>;
    'currency-settings': CurrencySettingsSelect<false> | CurrencySettingsSelect<true>;
    'exchange-rate-settings': ExchangeRateSettingsSelect<false> | ExchangeRateSettingsSelect<true>;
    'webhook-settings': WebhookSettingsSelect<false> | WebhookSettingsSelect<true>;
  };
  locale: 'en' | 'ru';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      'newsletter-broadcast': TaskNewsletterBroadcast;
      'recalculate-user-segments': TaskRecalculateUserSegments;
      'email-campaign': TaskEmailCampaign;
      'check-expiring-rewards': TaskCheckExpiringRewards;
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  /**
   * Если указан, будет отображаться над колонками
   */
  heading?: string | null;
  /**
   * Если указан, будет отображаться под заголовком
   */
  subheading?: string | null;
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        verticalAlignment?: ('top' | 'center' | 'bottom') | null;
        horizontalAlignment?: ('left' | 'center' | 'right') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableActions?: boolean | null;
        actions?:
          | {
              actionType: 'link' | 'button';
              label: string;
              type?: ('reference' | 'custom') | null;
              reference?:
                | ({
                    relationTo: 'pages';
                    value: string | Page;
                  } | null)
                | ({
                    relationTo: 'posts';
                    value: string | Post;
                  } | null);
              url?: string | null;
              appearance?: ('default' | 'primary' | 'secondary' | 'outline' | 'ghost') | null;
              newTab?: boolean | null;
              icon?: ('none' | 'arrow-right' | 'external-link' | 'download') | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Дополнительные настройки для блока
   */
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    textAlignment?: ('left' | 'center' | 'right') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (string | null) | Media;
  };
  layout: (
    | ContentBlock
    | CallToActionBlock
    | UrgencyCTABlock
    | HeroBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Список фич
         */
        features: {
          title: string;
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Имя иконки из коллекции
           */
          icon?: string | null;
          id?: string | null;
        }[];
        layout?: ('grid' | 'list' | 'carousel') | null;
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'features';
      }
    | {
        blockName?: string | null;
        /**
         * Стиль разделителя
         */
        style?: ('solid' | 'dashed' | 'dotted') | null;
        /**
         * Ширина разделителя
         */
        width?: ('narrow' | 'medium' | 'wide' | 'full') | null;
        /**
         * Внешний отступ
         */
        spacing?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'divider';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Шаги процесса
         */
        steps: {
          /**
           * Заголовок шага
           */
          title: string;
          /**
           * Описание шага
           */
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Имя иконки из коллекции (опционально)
           */
          icon?: string | null;
          /**
           * Изображение или видео (опционально)
           */
          media?: (string | null) | Media;
          id?: string | null;
        }[];
        /**
         * Стиль отображения шагов
         */
        layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
        /**
         * Показывать номера шагов
         */
        showNumbers?: boolean | null;
        /**
         * Показывать соединительные линии
         */
        showLines?: boolean | null;
        id?: string | null;
        blockType: 'steps';
      }
    | {
        blockName?: string | null;
        /**
         * Добавьте элементы аккордеона
         */
        items: {
          /**
           * Заголовок элемента
           */
          label: string;
          /**
           * Содержимое элемента
           */
          content: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          /**
           * Вложенные элементы (опционально)
           */
          items?:
            | {
                label: string;
                content: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        /**
         * Выберите стиль отображения
         */
        style?: ('default' | 'separated' | 'boxed') | null;
        /**
         * Выберите размер
         */
        size?: ('sm' | 'md' | 'lg') | null;
        /**
         * Выберите вариант отображения
         */
        variant?: ('default' | 'separated' | 'boxed') | null;
        /**
         * Разрешить открытие нескольких элементов одновременно
         */
        allowMultiple?: boolean | null;
        /**
         * Индексы элементов, открытых по умолчанию (начиная с 0)
         */
        defaultOpen?:
          | {
              /**
               * Индекс элемента
               */
              index: number;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockType: 'accordion';
      }
    | CardBlock
    | MediaBlock
    | CodeBlock
    | {
        blockName?: string | null;
        /**
         * Выберите тип видео
         */
        videoType: 'youtube' | 'vimeo' | 'rutube' | 'vk' | 'mp4';
        /**
         * ID видео (для YouTube, Vimeo, RuTube, VK)
         */
        videoId?: string | null;
        /**
         * URL видео (опционально)
         */
        videoUrl?: string | null;
        /**
         * Загрузите MP4 файл
         */
        videoFile?: (string | null) | Media;
        /**
         * Превью изображение для видео
         */
        poster?: (string | null) | Media;
        /**
         * Соотношение сторон видео
         */
        aspectRatio?: ('16/9' | '4/3' | '1/1' | '9/16') | null;
        /**
         * Автоматическое воспроизведение
         */
        autoPlay?: boolean | null;
        /**
         * Без звука по умолчанию
         */
        muted?: boolean | null;
        /**
         * Зациклить воспроизведение
         */
        loop?: boolean | null;
        /**
         * Показывать элементы управления
         */
        controls?: boolean | null;
        /**
         * Подпись к видео
         */
        caption?: string | null;
        /**
         * Стиль отображения
         */
        style?: ('default' | 'shadow' | 'bordered') | null;
        /**
         * Размер блока
         */
        size?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'video';
      }
    | AudioBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока (опционально)
         */
        heading?: string | null;
        /**
         * Подзаголовок (опционально)
         */
        subheading?: string | null;
        /**
         * Описание карусели (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Элементы карусели
         */
        items: {
          /**
           * Изображение или видео
           */
          media: string | Media;
          /**
           * Заголовок элемента (опционально)
           */
          heading?: string | null;
          /**
           * Подпись к элементу (опционально)
           */
          caption?: string | null;
          /**
           * Текстовое содержимое (опционально)
           */
          content?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Кнопки или ссылки (опционально)
           */
          actions?:
            | {
                label: string;
                url: string;
                style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
                /**
                 * Открыть в новой вкладке
                 */
                newTab?: boolean | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        /**
         * Автоматическое прокручивание карусели
         */
        autoplay?: boolean | null;
        /**
         * Интервал прокрутки в миллисекундах
         */
        interval?: number | null;
        /**
         * Показывать кнопки управления
         */
        showControls?: boolean | null;
        /**
         * Показывать индикаторы слайдов
         */
        showIndicators?: boolean | null;
        id?: string | null;
        blockType: 'carousel';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок галереи (опционально)
         */
        heading?: string | null;
        /**
         * Изображения для галереи
         */
        items: {
          /**
           * Выберите изображение
           */
          media: string | Media;
          /**
           * Подпись к изображению (опционально)
           */
          caption?: string | null;
          id?: string | null;
        }[];
        /**
         * Выберите тип отображения
         */
        layout?: ('grid' | 'masonry' | 'carousel') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        /**
         * Расстояние между изображениями
         */
        spacing?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'gallery';
      }
    | VideoLessonsBlock
    | BannerBlock
    | FAQBlock
    | CourseFAQBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Тарифные планы
         */
        plans: {
          /**
           * Название тарифа
           */
          name: string;
          /**
           * Цена (например, "9900" или "Бесплатно")
           */
          price: string;
          /**
           * Интервал оплаты (например, "/месяц", "/год")
           */
          interval?: string | null;
          /**
           * Краткое описание тарифа
           */
          description?: string | null;
          /**
           * Список функций
           */
          features?:
            | {
                text: string;
                /**
                 * Функция включена в тариф
                 */
                included?: boolean | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Отметить как популярный тариф
           */
          isPopular?: boolean | null;
          /**
           * Кнопки
           */
          actions?:
            | {
                label: string;
                url: string;
                style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        layout?: ('default' | 'grid' | 'compact') | null;
        id?: string | null;
        blockType: 'pricingTable';
      }
    | CoursePricingComparisonBlock
    | StatsBlock
    | TabsBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * События таймлайна
         */
        items: {
          /**
           * Заголовок события
           */
          title: string;
          /**
           * Дата события (текстовый формат, например "Июнь 2023")
           */
          date?: string | null;
          /**
           * Описание события
           */
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Изображение для события (опционально)
           */
          media?: (string | null) | Media;
          id?: string | null;
        }[];
        /**
         * Стиль отображения таймлайна
         */
        layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
        /**
         * Показывать даты
         */
        showDates?: boolean | null;
        /**
         * Показывать соединительные линии
         */
        showLines?: boolean | null;
        id?: string | null;
        blockType: 'timeline';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока (опционально)
         */
        title?: string | null;
        /**
         * Автоматически генерировать оглавление на основе заголовков страницы
         */
        autoGenerate?: boolean | null;
        /**
         * Элементы оглавления (используется, если автогенерация отключена)
         */
        items?:
          | {
              /**
               * Текст пункта оглавления
               */
              title: string;
              /**
               * Якорь (ID элемента, например "about-section")
               */
              anchor: string;
              /**
               * Уровень вложенности
               */
              level?: (1 | 2 | 3) | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Фиксировать оглавление при прокрутке
         */
        sticky?: boolean | null;
        /**
         * Показывать нумерацию пунктов
         */
        showNumbers?: boolean | null;
        /**
         * Максимальный уровень заголовков для отображения
         */
        maxDepth?: (1 | 2 | 3) | null;
        id?: string | null;
        blockType: 'tableOfContents';
      }
    | RoadmapBlock
    | BenefitsOutcomesBlock
    | TargetAudienceBlock
    | GuaranteeBlock
    | SocialProofAdvancedBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Члены команды
         */
        members: {
          /**
           * Имя участника команды
           */
          name: string;
          /**
           * Должность или роль
           */
          role?: string | null;
          /**
           * Краткая биография (опционально)
           */
          bio?: string | null;
          /**
           * Фото участника команды
           */
          avatar?: (string | null) | Media;
          /**
           * Ссылки на социальные сети (опционально)
           */
          social?: {
            /**
             * Ссылка на Twitter
             */
            twitter?: string | null;
            /**
             * Ссылка на LinkedIn
             */
            linkedin?: string | null;
            /**
             * Ссылка на GitHub
             */
            github?: string | null;
            /**
             * Ссылка на персональный сайт
             */
            website?: string | null;
          };
          id?: string | null;
        }[];
        /**
         * Стиль отображения
         */
        layout?: ('grid' | 'list') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'teamMembers';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Список отзывов
         */
        items: {
          /**
           * Имя автора отзыва
           */
          author: string;
          /**
           * Должность или роль автора (опционально)
           */
          role?: string | null;
          /**
           * Название компании автора (опционально)
           */
          company?: string | null;
          /**
           * Фото автора (опционально)
           */
          avatar?: (string | null) | Media;
          /**
           * Текст отзыва
           */
          content: string;
          /**
           * Рейтинг (опционально)
           */
          rating?: (1 | 2 | 3 | 4 | 5) | null;
          id?: string | null;
        }[];
        /**
         * Стиль отображения отзывов
         */
        layout?: ('grid' | 'carousel' | 'featured') | null;
        /**
         * Стиль отображения
         */
        style?: ('card' | 'minimal' | 'quote') | null;
        id?: string | null;
        blockType: 'testimonials';
      }
    | InstructorProfileBlock
    | HeaderBlock
    | FooterBlock
    | ServicesBlock
    | CaseStudiesBlock
    | TechStackBlock
    | PlansComparisonBlock
    | CourseBlock
    | CurriculumBlock
    | UserProgressBlock
    | CertificatesBlock
    | ResourceLibraryBlock
    | AiToolsBlock
    | LeaderboardBlock
    | CourseOverviewBlock
    | QuizAssessmentBlock
    | AssignmentsBlock
    | AchievementsBlockType
    | ProjectShowcaseBlock
    | FunnelStepBlock
    | RecommendationsBlock
    | PopupTriggerConfigBlock
    | ProductsFilterBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Выберите продукты для отображения
         */
        products?: (string | Product)[] | null;
        /**
         * Использовать динамический источник продуктов
         */
        enableDynamicSource?: boolean | null;
        /**
         * Источник продуктов
         */
        source?: ('new' | 'popular' | 'sale' | 'featured') | null;
        /**
         * Максимальное количество продуктов
         */
        limit?: number | null;
        /**
         * Включить фильтрацию продуктов
         */
        enableFiltering?: boolean | null;
        /**
         * Стиль отображения продуктов
         */
        layout?: ('grid' | 'list' | 'carousel') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'productsList';
      }
    | FormBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока подписки
         */
        heading?: string | null;
        /**
         * Описание блока подписки
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Текст кнопки подписки
         */
        buttonText?: string | null;
        layout?: ('default' | 'compact' | 'withImage') | null;
        /**
         * Изображение для блока (опционально)
         */
        image?: (string | null) | Media;
        /**
         * Placeholder для поля ввода email
         */
        placeholder?: string | null;
        /**
         * Сообщение об успешной подписке
         */
        successMessage?: string | null;
        id?: string | null;
        blockType: 'newsletter';
      }
    | FeedbackBlock
    | PollBlock
    | AiAssistantBlock
    | LeadMagnetOfferBlock
    | DiscussionForumBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок статьи
         */
        title: string;
        /**
         * Подзаголовок (опционально)
         */
        subtitle?: string | null;
        /**
         * Краткое описание статьи (опционально)
         */
        description?: string | null;
        /**
         * Обложка статьи
         */
        coverImage?: (string | null) | Media;
        /**
         * Дата публикации
         */
        publishDate?: string | null;
        /**
         * Информация об авторе
         */
        author: {
          /**
           * Имя автора
           */
          name: string;
          /**
           * Аватар автора (опционально)
           */
          avatar?: (string | null) | Media;
          /**
           * Должность автора (опционально)
           */
          role?: string | null;
        };
        /**
         * Категории статьи (опционально)
         */
        categories?:
          | {
              category: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Стиль отображения заголовка статьи
         */
        layout?: ('standard' | 'large' | 'minimal') | null;
        id?: string | null;
        blockType: 'articleHeader';
      }
    | {
        blockName?: string | null;
        /**
         * Информация об авторе
         */
        author: {
          /**
           * Имя автора
           */
          name: string;
          /**
           * Аватар автора
           */
          avatar?: (string | null) | Media;
          /**
           * Биография автора
           */
          bio?: string | null;
          /**
           * Должность автора
           */
          role?: string | null;
          /**
           * Название компании
           */
          company?: string | null;
          /**
           * Социальные сети
           */
          socialLinks?:
            | {
                /**
                 * Платформа
                 */
                platform: 'twitter' | 'facebook' | 'linkedin' | 'github' | 'instagram' | 'website';
                /**
                 * URL профиля
                 */
                url: string;
                id?: string | null;
              }[]
            | null;
        };
        /**
         * Стиль отображения
         */
        layout?: ('card' | 'inline') | null;
        id?: string | null;
        blockType: 'authorBio';
      }
    | {
        blockName?: string | null;
        /**
         * Текст цитаты
         */
        quote: string;
        /**
         * Автор цитаты (опционально)
         */
        author?: string | null;
        /**
         * Источник цитаты или должность автора (опционально)
         */
        source?: string | null;
        /**
         * Изображение автора (опционально)
         */
        avatar?: (string | null) | Media;
        /**
         * Стиль оформления цитаты
         */
        style?: ('default' | 'highlight' | 'minimal') | null;
        /**
         * Выравнивание текста
         */
        align?: ('left' | 'center' | 'right') | null;
        id?: string | null;
        blockType: 'blockquote';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок секции комментариев
         */
        title?: string | null;
        /**
         * Система комментариев
         */
        provider?: ('native' | 'disqus' | 'facebook') | null;
        /**
         * Shortname для Disqus (если выбран Disqus)
         */
        disqusShortname?: string | null;
        /**
         * Facebook App ID (если выбран Facebook)
         */
        facebookAppId?: string | null;
        /**
         * Показывать количество комментариев
         */
        showCount?: boolean | null;
        /**
         * Количество комментариев на странице (для встроенных комментариев)
         */
        commentsPerPage?: number | null;
        /**
         * Разрешить ответы на комментарии
         */
        allowReplies?: boolean | null;
        /**
         * Требовать авторизацию для комментирования
         */
        requireAuth?: boolean | null;
        /**
         * Включить модерацию комментариев
         */
        moderationEnabled?: boolean | null;
        id?: string | null;
        blockType: 'comments';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок секции похожих статей
         */
        title?: string | null;
        /**
         * Метод выбора похожих статей
         */
        selectionMethod?: ('automatic' | 'manual') | null;
        /**
         * Выбрать статьи вручную
         */
        posts?: (string | Post)[] | null;
        /**
         * Максимальное количество статей для отображения
         */
        maxPosts?: number | null;
        /**
         * Критерии для автоматического подбора похожих статей
         */
        criteria?: ('category' | 'tags' | 'author' | 'popularity')[] | null;
        /**
         * Стиль отображения похожих статей
         */
        layout?: ('grid' | 'list' | 'carousel') | null;
        /**
         * Показывать обложку статьи
         */
        showFeaturedImage?: boolean | null;
        /**
         * Показывать краткое описание
         */
        showExcerpt?: boolean | null;
        /**
         * Показывать дату публикации
         */
        showDate?: boolean | null;
        /**
         * Показывать автора
         */
        showAuthor?: boolean | null;
        id?: string | null;
        blockType: 'relatedPosts';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        title?: string | null;
        /**
         * Выберите платформы для шеринга
         */
        platforms?:
          | (
              | 'x'
              | 'facebook'
              | 'linkedin'
              | 'pinterest'
              | 'vk'
              | 'instagram'
              | 'threads'
              | 'tenchat'
              | 'whatsapp'
              | 'telegram'
              | 'email'
              | 'copy'
            )[]
          | null;
        /**
         * Выберите расположение кнопок
         */
        layout?: ('horizontal' | 'vertical') | null;
        /**
         * Показывать количество шерингов (если поддерживается)
         */
        showShareCount?: boolean | null;
        id?: string | null;
        blockType: 'socialShare';
      }
    | InteractiveDemoBlock
    | CalendarBlock
    | EventTrackerBlock
    | ReportEmbedBlock
    | ChatBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  heroImage?: (string | null) | Media;
  /**
   * A short summary of the post (max 160 characters).
   */
  excerpt?: string | null;
  /**
   * Square image for post cards and previews.
   */
  thumbnail?: (string | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Automatically calculated based on content length.
   */
  readingTime?: number | null;
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  tags?: (string | Tag)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * General or Blog categories.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  /**
   * A brief description of this category
   */
  description?: string | null;
  /**
   * Fields specific to blog categories
   */
  blogCategoryDetails?: {
    /**
     * Show this category in the blog sidebar
     */
    showInSidebar?: boolean | null;
    /**
     * Hex color code for this category (e.g. #FF5500)
     */
    color?: string | null;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  title: string;
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role: 'admin' | 'customer';
  locale?: ('ru' | 'en') | null;
  /**
   * Email notification preferences
   */
  emailNotifications?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Push notification preferences
   */
  pushNotifications?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * How often to receive notifications
   */
  notificationFrequency?: ('immediately' | 'daily' | 'weekly' | 'never') | null;
  /**
   * Сегменты, к которым относится пользователь. Вычисляются и обновляются автоматически.
   */
  segments?: (string | UserSegment)[] | null;
  /**
   * Очки опыта пользователя, заработанные за достижения и активность
   */
  xp?: number | null;
  /**
   * Текущий уровень пользователя, основанный на количестве XP
   */
  level?: number | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * Определение правил для сегментации пользователей.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-segments".
 */
export interface UserSegment {
  id: string;
  name: string;
  /**
   * Латиница, цифры, дефисы. Используется в коде (напр., в DynamicContent).
   */
  slug: string;
  description?: string | null;
  /**
   * Пользователь попадает в сегмент, если выполняется хотя бы одна группа правил.
   */
  ruleGroups?:
    | {
        /**
         * Все правила в этой группе должны быть выполнены.
         */
        rules?:
          | {
              parameter:
                | 'registrationDate'
                | 'orderCount'
                | 'totalSpent'
                | 'completedCourse'
                | 'activeSubscriptionPlan'
                | 'userRole'
                | 'userProfileField'
                | 'registrationUtmSource'
                | 'visitedPage';
              operator:
                | 'equals'
                | 'notEquals'
                | 'contains'
                | 'notContains'
                | 'greaterThan'
                | 'lessThan'
                | 'greaterThanOrEqual'
                | 'lessThanOrEqual'
                | 'exists'
                | 'doesNotExist'
                | 'registeredBefore'
                | 'registeredAfter';
              /**
               * Значение для сравнения. Для дат используйте формат YYYY-MM-DD.
               */
              value?: string | null;
              /**
               * Например, 'city' или 'company'.
               */
              profileFieldName?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  actions?:
    | {
        actionType: 'link' | 'button';
        label: string;
        type?: ('reference' | 'custom') | null;
        reference?:
          | ({
              relationTo: 'pages';
              value: string | Page;
            } | null)
          | ({
              relationTo: 'posts';
              value: string | Post;
            } | null);
        url?: string | null;
        appearance?: ('default' | 'primary' | 'secondary' | 'outline' | 'ghost') | null;
        newTab?: boolean | null;
        icon?: ('none' | 'arrow-right' | 'external-link' | 'download') | null;
        id?: string | null;
      }[]
    | null;
  style?: ('default' | 'centered' | 'split') | null;
  background?: ('none' | 'light' | 'dark' | 'primary') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UrgencyCTABlock".
 */
export interface UrgencyCTABlock {
  /**
   * Основной призыв, например: "Последний шанс записаться со скидкой!"
   */
  heading: string;
  /**
   * Дополнительное пояснение или усиление призыва.
   */
  subheading?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  urgencyElement?: ('none' | 'countdown' | 'limitedSpots' | 'endDate') | null;
  countdownEndDate?: string | null;
  /**
   * Используйте {count} для подстановки реального числа (потребует логики на фронтенде)
   */
  limitedSpotsText?: string | null;
  initialSpotsCount?: number | null;
  /**
   * Используйте {date} для подстановки даты
   */
  endDateText?: string | null;
  offerEndDate?: string | null;
  ctaButton: {
    label: string;
    url: string;
    openInNewTab?: boolean | null;
  };
  secondaryButton?: {
    label?: string | null;
    url?: string | null;
  };
  layout?: ('centerAligned' | 'leftTextButtonRight' | 'columns') | null;
  backgroundColor?: string | null;
  backgroundImage?: (string | null) | Media;
  textColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'urgencyCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock".
 */
export interface HeroBlock {
  title: string;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  media: string | Media;
  actions?:
    | {
        actionType?: string | null;
        label: string;
        type: 'reference' | 'custom';
        reference?:
          | ({
              relationTo: 'pages';
              value: string | Page;
            } | null)
          | ({
              relationTo: 'posts';
              value: string | Post;
            } | null);
        url?: string | null;
        appearance?: ('default' | 'outline') | null;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardBlock".
 */
export interface CardBlock {
  /**
   * Заголовок карточки
   */
  title?: string | null;
  /**
   * Текстовое содержимое карточки
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Изображение для карточки
   */
  media?: (string | null) | Media;
  /**
   * Кнопка или ссылка для карточки
   */
  action: {
    label: string;
    href: string;
    style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
  };
  /**
   * Если отмечено, вся карточка будет кликабельной и будет вести по указанной ссылке
   */
  isLink?: boolean | null;
  style?: ('default' | 'accent' | 'light' | 'dark') | null;
  size?: ('sm' | 'md' | 'lg') | null;
  hover?: ('none' | 'lift' | 'glow' | 'border') | null;
  /**
   * Дополнительные настройки для блока
   */
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'card';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AudioBlock".
 */
export interface AudioBlock {
  /**
   * Поддерживаемые форматы: MP3, WAV, OGG
   */
  audioFile: string | Media;
  title: string;
  artist?: string | null;
  description?: string | null;
  /**
   * Показывать визуализацию аудио в виде волны
   */
  showWaveform?: boolean | null;
  autoPlay?: boolean | null;
  loop?: boolean | null;
  /**
   * Разрешить скачивание аудио файла
   */
  downloadable?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'audio';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoLessonsBlock".
 */
export interface VideoLessonsBlock {
  /**
   * Основной заголовок блока видео-уроков
   */
  heading?: string | null;
  /**
   * Краткое описание блока или темы уроков
   */
  subheading?: string | null;
  lessonsSource?: ('manual' | 'collection' | 'api') | null;
  /**
   * Список видео-уроков для отображения
   */
  lessons?:
    | {
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        videoSourceType?: ('upload' | 'youtube' | 'vimeo' | 'externalUrl') | null;
        videoFile?: (string | null) | Media;
        videoUrl?: string | null;
        thumbnail?: (string | null) | Media;
        duration?: number | null;
        chapters?:
          | {
              timestamp: number;
              title: string;
              description?: string | null;
              id?: string | null;
            }[]
          | null;
        interactiveElements?:
          | {
              timestamp: number;
              elementType?: ('quiz' | 'poll' | 'link' | 'note' | 'cta') | null;
              quizQuestion?: string | null;
              quizOptions?:
                | {
                    text: string;
                    isCorrect?: boolean | null;
                    id?: string | null;
                  }[]
                | null;
              pollQuestion?: string | null;
              pollOptions?:
                | {
                    text: string;
                    id?: string | null;
                  }[]
                | null;
              linkUrl?: string | null;
              linkLabel?: string | null;
              noteText?: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              ctaText?: string | null;
              ctaUrl?: string | null;
              pauseVideo?: boolean | null;
              duration?: number | null;
              id?: string | null;
            }[]
          | null;
        transcript?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        attachments?:
          | {
              title: string;
              file: string | Media;
              id?: string | null;
            }[]
          | null;
        level?: ('beginner' | 'intermediate' | 'advanced') | null;
        tags?:
          | {
              tag: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  collectionSettings?: {
    /**
     * Введите слаг коллекции, из которой нужно брать видео-уроки.
     */
    targetCollection: string;
    limit?: number | null;
    sortField?: string | null;
    sortDirection?: ('asc' | 'desc') | null;
    filters?:
      | {
          field: string;
          operator?: ('equals' | 'not_equals' | 'contains' | 'in') | null;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  apiSettings?: {
    apiUrl: string;
  };
  playerSettings?: {
    layout?: ('playlistRight' | 'playlistLeft' | 'playlistBottom' | 'playerOnly' | 'playlistOnly') | null;
    autoplay?: boolean | null;
    showControls?: boolean | null;
    showChapters?: boolean | null;
    showTranscript?: boolean | null;
    enablePictureInPicture?: boolean | null;
    playbackRates?:
      | {
          rate: number;
          id?: string | null;
        }[]
      | null;
    rememberPlaybackPosition?: boolean | null;
    markAsCompleted?: ('auto' | 'manual' | 'none') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'videoLessons';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlock".
 */
export interface FAQBlock {
  heading: string;
  subheading?: string | null;
  /**
   * Добавьте вопросы и ответы
   */
  items: {
    question: string;
    answer: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    id?: string | null;
  }[];
  layout?: ('accordion' | 'list' | 'grid') | null;
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark') | null;
    containerWidth?: ('default' | 'narrow' | 'wide') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'faq';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CourseFAQBlock".
 */
export interface CourseFAQBlock {
  heading?: string | null;
  subheading?: string | null;
  /**
   * Если выбрать курс, вопросы будут отображаться только на его странице.
   */
  relatedCourse?: (string | null) | Course;
  questions?:
    | {
        question: string;
        answer: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        /**
         * Для группировки вопросов, если их много
         */
        category?: string | null;
        id?: string | null;
      }[]
    | null;
  layout?: ('accordion' | 'list') | null;
  allowMultipleOpen?: boolean | null;
  showCategories?: boolean | null;
  backgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'courseFAQ';
}
/**
 * Коллекция для учебных курсов платформы.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  status?: ('draft' | 'published' | 'archived') | null;
  author: string | User;
  featuredImage: string | Media;
  excerpt?: string | null;
  learningObjectives?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  liveSessions?:
    | {
        title: string;
        dateTime: string;
        durationMinutes?: number | null;
        meetingLink?: string | null;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  difficulty?: ('beginner' | 'intermediate' | 'advanced') | null;
  /**
   * Например, '10 часов', '3 недели'.
   */
  estimatedDuration?: string | null;
  tags?: (string | Tag)[] | null;
  /**
   * Курсы, которые необходимо пройти перед началом этого.
   */
  prerequisites?: (string | Course)[] | null;
  layout: (
    | ContentBlock
    | CallToActionBlock
    | UrgencyCTABlock
    | HeroBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Список фич
         */
        features: {
          title: string;
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Имя иконки из коллекции
           */
          icon?: string | null;
          id?: string | null;
        }[];
        layout?: ('grid' | 'list' | 'carousel') | null;
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'features';
      }
    | {
        blockName?: string | null;
        /**
         * Стиль разделителя
         */
        style?: ('solid' | 'dashed' | 'dotted') | null;
        /**
         * Ширина разделителя
         */
        width?: ('narrow' | 'medium' | 'wide' | 'full') | null;
        /**
         * Внешний отступ
         */
        spacing?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'divider';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Шаги процесса
         */
        steps: {
          /**
           * Заголовок шага
           */
          title: string;
          /**
           * Описание шага
           */
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Имя иконки из коллекции (опционально)
           */
          icon?: string | null;
          /**
           * Изображение или видео (опционально)
           */
          media?: (string | null) | Media;
          id?: string | null;
        }[];
        /**
         * Стиль отображения шагов
         */
        layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
        /**
         * Показывать номера шагов
         */
        showNumbers?: boolean | null;
        /**
         * Показывать соединительные линии
         */
        showLines?: boolean | null;
        id?: string | null;
        blockType: 'steps';
      }
    | {
        blockName?: string | null;
        /**
         * Добавьте элементы аккордеона
         */
        items: {
          /**
           * Заголовок элемента
           */
          label: string;
          /**
           * Содержимое элемента
           */
          content: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          /**
           * Вложенные элементы (опционально)
           */
          items?:
            | {
                label: string;
                content: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        /**
         * Выберите стиль отображения
         */
        style?: ('default' | 'separated' | 'boxed') | null;
        /**
         * Выберите размер
         */
        size?: ('sm' | 'md' | 'lg') | null;
        /**
         * Выберите вариант отображения
         */
        variant?: ('default' | 'separated' | 'boxed') | null;
        /**
         * Разрешить открытие нескольких элементов одновременно
         */
        allowMultiple?: boolean | null;
        /**
         * Индексы элементов, открытых по умолчанию (начиная с 0)
         */
        defaultOpen?:
          | {
              /**
               * Индекс элемента
               */
              index: number;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockType: 'accordion';
      }
    | CardBlock
    | MediaBlock
    | CodeBlock
    | {
        blockName?: string | null;
        /**
         * Выберите тип видео
         */
        videoType: 'youtube' | 'vimeo' | 'rutube' | 'vk' | 'mp4';
        /**
         * ID видео (для YouTube, Vimeo, RuTube, VK)
         */
        videoId?: string | null;
        /**
         * URL видео (опционально)
         */
        videoUrl?: string | null;
        /**
         * Загрузите MP4 файл
         */
        videoFile?: (string | null) | Media;
        /**
         * Превью изображение для видео
         */
        poster?: (string | null) | Media;
        /**
         * Соотношение сторон видео
         */
        aspectRatio?: ('16/9' | '4/3' | '1/1' | '9/16') | null;
        /**
         * Автоматическое воспроизведение
         */
        autoPlay?: boolean | null;
        /**
         * Без звука по умолчанию
         */
        muted?: boolean | null;
        /**
         * Зациклить воспроизведение
         */
        loop?: boolean | null;
        /**
         * Показывать элементы управления
         */
        controls?: boolean | null;
        /**
         * Подпись к видео
         */
        caption?: string | null;
        /**
         * Стиль отображения
         */
        style?: ('default' | 'shadow' | 'bordered') | null;
        /**
         * Размер блока
         */
        size?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'video';
      }
    | AudioBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока (опционально)
         */
        heading?: string | null;
        /**
         * Подзаголовок (опционально)
         */
        subheading?: string | null;
        /**
         * Описание карусели (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Элементы карусели
         */
        items: {
          /**
           * Изображение или видео
           */
          media: string | Media;
          /**
           * Заголовок элемента (опционально)
           */
          heading?: string | null;
          /**
           * Подпись к элементу (опционально)
           */
          caption?: string | null;
          /**
           * Текстовое содержимое (опционально)
           */
          content?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Кнопки или ссылки (опционально)
           */
          actions?:
            | {
                label: string;
                url: string;
                style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
                /**
                 * Открыть в новой вкладке
                 */
                newTab?: boolean | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        /**
         * Автоматическое прокручивание карусели
         */
        autoplay?: boolean | null;
        /**
         * Интервал прокрутки в миллисекундах
         */
        interval?: number | null;
        /**
         * Показывать кнопки управления
         */
        showControls?: boolean | null;
        /**
         * Показывать индикаторы слайдов
         */
        showIndicators?: boolean | null;
        id?: string | null;
        blockType: 'carousel';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок галереи (опционально)
         */
        heading?: string | null;
        /**
         * Изображения для галереи
         */
        items: {
          /**
           * Выберите изображение
           */
          media: string | Media;
          /**
           * Подпись к изображению (опционально)
           */
          caption?: string | null;
          id?: string | null;
        }[];
        /**
         * Выберите тип отображения
         */
        layout?: ('grid' | 'masonry' | 'carousel') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        /**
         * Расстояние между изображениями
         */
        spacing?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'gallery';
      }
    | VideoLessonsBlock
    | BannerBlock
    | FAQBlock
    | CourseFAQBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Тарифные планы
         */
        plans: {
          /**
           * Название тарифа
           */
          name: string;
          /**
           * Цена (например, "9900" или "Бесплатно")
           */
          price: string;
          /**
           * Интервал оплаты (например, "/месяц", "/год")
           */
          interval?: string | null;
          /**
           * Краткое описание тарифа
           */
          description?: string | null;
          /**
           * Список функций
           */
          features?:
            | {
                text: string;
                /**
                 * Функция включена в тариф
                 */
                included?: boolean | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Отметить как популярный тариф
           */
          isPopular?: boolean | null;
          /**
           * Кнопки
           */
          actions?:
            | {
                label: string;
                url: string;
                style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        layout?: ('default' | 'grid' | 'compact') | null;
        id?: string | null;
        blockType: 'pricingTable';
      }
    | CoursePricingComparisonBlock
    | StatsBlock
    | TabsBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * События таймлайна
         */
        items: {
          /**
           * Заголовок события
           */
          title: string;
          /**
           * Дата события (текстовый формат, например "Июнь 2023")
           */
          date?: string | null;
          /**
           * Описание события
           */
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Изображение для события (опционально)
           */
          media?: (string | null) | Media;
          id?: string | null;
        }[];
        /**
         * Стиль отображения таймлайна
         */
        layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
        /**
         * Показывать даты
         */
        showDates?: boolean | null;
        /**
         * Показывать соединительные линии
         */
        showLines?: boolean | null;
        id?: string | null;
        blockType: 'timeline';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока (опционально)
         */
        title?: string | null;
        /**
         * Автоматически генерировать оглавление на основе заголовков страницы
         */
        autoGenerate?: boolean | null;
        /**
         * Элементы оглавления (используется, если автогенерация отключена)
         */
        items?:
          | {
              /**
               * Текст пункта оглавления
               */
              title: string;
              /**
               * Якорь (ID элемента, например "about-section")
               */
              anchor: string;
              /**
               * Уровень вложенности
               */
              level?: (1 | 2 | 3) | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Фиксировать оглавление при прокрутке
         */
        sticky?: boolean | null;
        /**
         * Показывать нумерацию пунктов
         */
        showNumbers?: boolean | null;
        /**
         * Максимальный уровень заголовков для отображения
         */
        maxDepth?: (1 | 2 | 3) | null;
        id?: string | null;
        blockType: 'tableOfContents';
      }
    | RoadmapBlock
    | BenefitsOutcomesBlock
    | TargetAudienceBlock
    | GuaranteeBlock
    | SocialProofAdvancedBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Члены команды
         */
        members: {
          /**
           * Имя участника команды
           */
          name: string;
          /**
           * Должность или роль
           */
          role?: string | null;
          /**
           * Краткая биография (опционально)
           */
          bio?: string | null;
          /**
           * Фото участника команды
           */
          avatar?: (string | null) | Media;
          /**
           * Ссылки на социальные сети (опционально)
           */
          social?: {
            /**
             * Ссылка на Twitter
             */
            twitter?: string | null;
            /**
             * Ссылка на LinkedIn
             */
            linkedin?: string | null;
            /**
             * Ссылка на GitHub
             */
            github?: string | null;
            /**
             * Ссылка на персональный сайт
             */
            website?: string | null;
          };
          id?: string | null;
        }[];
        /**
         * Стиль отображения
         */
        layout?: ('grid' | 'list') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'teamMembers';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Список отзывов
         */
        items: {
          /**
           * Имя автора отзыва
           */
          author: string;
          /**
           * Должность или роль автора (опционально)
           */
          role?: string | null;
          /**
           * Название компании автора (опционально)
           */
          company?: string | null;
          /**
           * Фото автора (опционально)
           */
          avatar?: (string | null) | Media;
          /**
           * Текст отзыва
           */
          content: string;
          /**
           * Рейтинг (опционально)
           */
          rating?: (1 | 2 | 3 | 4 | 5) | null;
          id?: string | null;
        }[];
        /**
         * Стиль отображения отзывов
         */
        layout?: ('grid' | 'carousel' | 'featured') | null;
        /**
         * Стиль отображения
         */
        style?: ('card' | 'minimal' | 'quote') | null;
        id?: string | null;
        blockType: 'testimonials';
      }
    | InstructorProfileBlock
    | HeaderBlock
    | FooterBlock
    | ServicesBlock
    | CaseStudiesBlock
    | TechStackBlock
    | PlansComparisonBlock
    | CourseBlock
    | CurriculumBlock
    | UserProgressBlock
    | CertificatesBlock
    | ResourceLibraryBlock
    | AiToolsBlock
    | LeaderboardBlock
    | CourseOverviewBlock
    | QuizAssessmentBlock
    | AssignmentsBlock
    | AchievementsBlockType
    | ProjectShowcaseBlock
    | FunnelStepBlock
    | RecommendationsBlock
    | PopupTriggerConfigBlock
    | ProductsFilterBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Выберите продукты для отображения
         */
        products?: (string | Product)[] | null;
        /**
         * Использовать динамический источник продуктов
         */
        enableDynamicSource?: boolean | null;
        /**
         * Источник продуктов
         */
        source?: ('new' | 'popular' | 'sale' | 'featured') | null;
        /**
         * Максимальное количество продуктов
         */
        limit?: number | null;
        /**
         * Включить фильтрацию продуктов
         */
        enableFiltering?: boolean | null;
        /**
         * Стиль отображения продуктов
         */
        layout?: ('grid' | 'list' | 'carousel') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'productsList';
      }
    | FormBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока подписки
         */
        heading?: string | null;
        /**
         * Описание блока подписки
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Текст кнопки подписки
         */
        buttonText?: string | null;
        layout?: ('default' | 'compact' | 'withImage') | null;
        /**
         * Изображение для блока (опционально)
         */
        image?: (string | null) | Media;
        /**
         * Placeholder для поля ввода email
         */
        placeholder?: string | null;
        /**
         * Сообщение об успешной подписке
         */
        successMessage?: string | null;
        id?: string | null;
        blockType: 'newsletter';
      }
    | FeedbackBlock
    | PollBlock
    | AiAssistantBlock
    | LeadMagnetOfferBlock
    | DiscussionForumBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок статьи
         */
        title: string;
        /**
         * Подзаголовок (опционально)
         */
        subtitle?: string | null;
        /**
         * Краткое описание статьи (опционально)
         */
        description?: string | null;
        /**
         * Обложка статьи
         */
        coverImage?: (string | null) | Media;
        /**
         * Дата публикации
         */
        publishDate?: string | null;
        /**
         * Информация об авторе
         */
        author: {
          /**
           * Имя автора
           */
          name: string;
          /**
           * Аватар автора (опционально)
           */
          avatar?: (string | null) | Media;
          /**
           * Должность автора (опционально)
           */
          role?: string | null;
        };
        /**
         * Категории статьи (опционально)
         */
        categories?:
          | {
              category: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Стиль отображения заголовка статьи
         */
        layout?: ('standard' | 'large' | 'minimal') | null;
        id?: string | null;
        blockType: 'articleHeader';
      }
    | {
        blockName?: string | null;
        /**
         * Информация об авторе
         */
        author: {
          /**
           * Имя автора
           */
          name: string;
          /**
           * Аватар автора
           */
          avatar?: (string | null) | Media;
          /**
           * Биография автора
           */
          bio?: string | null;
          /**
           * Должность автора
           */
          role?: string | null;
          /**
           * Название компании
           */
          company?: string | null;
          /**
           * Социальные сети
           */
          socialLinks?:
            | {
                /**
                 * Платформа
                 */
                platform: 'twitter' | 'facebook' | 'linkedin' | 'github' | 'instagram' | 'website';
                /**
                 * URL профиля
                 */
                url: string;
                id?: string | null;
              }[]
            | null;
        };
        /**
         * Стиль отображения
         */
        layout?: ('card' | 'inline') | null;
        id?: string | null;
        blockType: 'authorBio';
      }
    | {
        blockName?: string | null;
        /**
         * Текст цитаты
         */
        quote: string;
        /**
         * Автор цитаты (опционально)
         */
        author?: string | null;
        /**
         * Источник цитаты или должность автора (опционально)
         */
        source?: string | null;
        /**
         * Изображение автора (опционально)
         */
        avatar?: (string | null) | Media;
        /**
         * Стиль оформления цитаты
         */
        style?: ('default' | 'highlight' | 'minimal') | null;
        /**
         * Выравнивание текста
         */
        align?: ('left' | 'center' | 'right') | null;
        id?: string | null;
        blockType: 'blockquote';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок секции комментариев
         */
        title?: string | null;
        /**
         * Система комментариев
         */
        provider?: ('native' | 'disqus' | 'facebook') | null;
        /**
         * Shortname для Disqus (если выбран Disqus)
         */
        disqusShortname?: string | null;
        /**
         * Facebook App ID (если выбран Facebook)
         */
        facebookAppId?: string | null;
        /**
         * Показывать количество комментариев
         */
        showCount?: boolean | null;
        /**
         * Количество комментариев на странице (для встроенных комментариев)
         */
        commentsPerPage?: number | null;
        /**
         * Разрешить ответы на комментарии
         */
        allowReplies?: boolean | null;
        /**
         * Требовать авторизацию для комментирования
         */
        requireAuth?: boolean | null;
        /**
         * Включить модерацию комментариев
         */
        moderationEnabled?: boolean | null;
        id?: string | null;
        blockType: 'comments';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок секции похожих статей
         */
        title?: string | null;
        /**
         * Метод выбора похожих статей
         */
        selectionMethod?: ('automatic' | 'manual') | null;
        /**
         * Выбрать статьи вручную
         */
        posts?: (string | Post)[] | null;
        /**
         * Максимальное количество статей для отображения
         */
        maxPosts?: number | null;
        /**
         * Критерии для автоматического подбора похожих статей
         */
        criteria?: ('category' | 'tags' | 'author' | 'popularity')[] | null;
        /**
         * Стиль отображения похожих статей
         */
        layout?: ('grid' | 'list' | 'carousel') | null;
        /**
         * Показывать обложку статьи
         */
        showFeaturedImage?: boolean | null;
        /**
         * Показывать краткое описание
         */
        showExcerpt?: boolean | null;
        /**
         * Показывать дату публикации
         */
        showDate?: boolean | null;
        /**
         * Показывать автора
         */
        showAuthor?: boolean | null;
        id?: string | null;
        blockType: 'relatedPosts';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        title?: string | null;
        /**
         * Выберите платформы для шеринга
         */
        platforms?:
          | (
              | 'x'
              | 'facebook'
              | 'linkedin'
              | 'pinterest'
              | 'vk'
              | 'instagram'
              | 'threads'
              | 'tenchat'
              | 'whatsapp'
              | 'telegram'
              | 'email'
              | 'copy'
            )[]
          | null;
        /**
         * Выберите расположение кнопок
         */
        layout?: ('horizontal' | 'vertical') | null;
        /**
         * Показывать количество шерингов (если поддерживается)
         */
        showShareCount?: boolean | null;
        id?: string | null;
        blockType: 'socialShare';
      }
    | InteractiveDemoBlock
    | CalendarBlock
    | EventTrackerBlock
    | ReportEmbedBlock
    | ChatBlock
  )[];
  seo?: {
    /**
     * Оптимальная длина 50-60 символов.
     */
    metaTitle?: string | null;
    /**
     * Оптимальная длина 150-160 символов.
     */
    metaDescription?: string | null;
  };
  /**
   * Продукт, который нужно купить для доступа к курсу
   */
  product?: (string | null) | Product;
  /**
   * Как пользователи получают доступ к курсу
   */
  accessType?: ('paid' | 'free' | 'subscription') | null;
  /**
   * Как долго пользователи имеют доступ к курсу после покупки
   */
  accessDuration?: {
    type?: ('unlimited' | 'limited') | null;
    /**
     * Количество единиц времени
     */
    duration?: number | null;
    unit?: ('days' | 'weeks' | 'months' | 'years') | null;
  };
  /**
   * Максимальное количество студентов. Оставьте 0 или пустым для неограниченного.
   */
  enrollmentCapacity?: number | null;
  /**
   * Необязательная итоговая оценка для завершения курса.
   */
  finalAssessment?: (string | null) | Assessment;
  /**
   * Выберите категорию форума для этого курса.
   */
  discussionForum?: (string | null) | ForumCategory;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CoursePricingComparisonBlock".
 */
export interface CoursePricingComparisonBlock {
  heading?: string | null;
  subheading?: string | null;
  /**
   * Для автоматического заполнения названия курса или фильтрации тарифов
   */
  relatedCourse?: (string | null) | Course;
  plans?:
    | {
        /**
         * Например: Стандарт, Премиум, VIP
         */
        name: string;
        description?: string | null;
        /**
         * Например: 10000 руб, $99, Бесплатно
         */
        price: string;
        /**
         * Например: /мес, единоразово
         */
        priceSuffix?: string | null;
        features?:
          | {
              feature: string;
              included?: boolean | null;
              /**
               * Например: "До 10 проектов", "Базовый уровень"
               */
              details?: string | null;
              id?: string | null;
            }[]
          | null;
        ctaButton: {
          label: string;
          url: string;
        };
        /**
         * Пометить как рекомендуемый или самый популярный
         */
        isFeatured?: boolean | null;
        /**
         * Например: "Популярный", "Лучший выбор"
         */
        badgeText?: string | null;
        id?: string | null;
      }[]
    | null;
  displaySettings?: {
    showDescriptions?: boolean | null;
    showFeatures?: boolean | null;
    highlightFeatured?: boolean | null;
    comparisonMode?: boolean | null;
    featuresAlignment?: ('left' | 'center') | null;
    backgroundColor?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'coursePricingComparison';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StatsBlock".
 */
export interface StatsBlock {
  /**
   * Заголовок блока статистики
   */
  heading?: string | null;
  /**
   * Подзаголовок блока статистики
   */
  subheading?: string | null;
  /**
   * Описание блока статистики
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Добавьте блоки статистики
   */
  stats?:
    | {
        /**
         * Числовое значение статистики
         */
        value: number;
        /**
         * Текст под числом
         */
        label: string;
        /**
         * Дополнительное описание (опционально)
         */
        description?: string | null;
        /**
         * Символ перед числом (например, $, ₽)
         */
        prefix?: string | null;
        /**
         * Символ после числа (например, %, +)
         */
        suffix?: string | null;
        /**
         * Направление тренда
         */
        trend?: ('neutral' | 'up' | 'down') | null;
        /**
         * Например, "+15%" или "-3%"
         */
        trendValue?: string | null;
        id?: string | null;
      }[]
    | null;
  layout?: ('grid' | 'cards' | 'inline') | null;
  /**
   * Дополнительные настройки для блока
   */
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'stats';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TabsBlock".
 */
export interface TabsBlock {
  /**
   * Добавьте необходимые вкладки
   */
  tabs: {
    /**
     * Отображаемое название вкладки
     */
    label: string;
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    /**
     * Изображение или видео для вкладки (опционально)
     */
    media?: (string | null) | Media;
    id?: string | null;
  }[];
  layout?: ('horizontal' | 'vertical') | null;
  variant?: ('default' | 'pills' | 'boxed') | null;
  style?: ('default' | 'accent' | 'light' | 'dark') | null;
  size?: ('sm' | 'md' | 'lg') | null;
  /**
   * Индекс вкладки, которая будет активна по умолчанию (начиная с 0)
   */
  defaultTab?: number | null;
  /**
   * Дополнительные настройки для блока
   */
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'tabs';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RoadmapBlock".
 */
export interface RoadmapBlock {
  /**
   * Основной заголовок блока дорожной карты
   */
  heading?: string | null;
  /**
   * Краткое описание дорожной карты
   */
  subheading?: string | null;
  /**
   * Общее описание дорожной карты
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  layout?: ('vertical' | 'horizontal' | 'columns' | 'timeline') | null;
  itemsSource?: ('manual' | 'collection' | 'api') | null;
  /**
   * Список этапов, задач или фич
   */
  items?:
    | {
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        status?: ('planned' | 'inProgress' | 'completed' | 'onHold' | 'cancelled' | 'idea') | null;
        startDate?: string | null;
        endDate?: string | null;
        category?: string | null;
        tags?:
          | {
              tag: string;
              id?: string | null;
            }[]
          | null;
        priority?: ('low' | 'medium' | 'high' | 'critical') | null;
        assignedTo?: string | null;
        progress?: number | null;
        /**
         * Ссылка на задачу, документ или другую информацию
         */
        link?: string | null;
        icon?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  collectionSettings?: {
    /**
     * Введите слаг коллекции, из которой нужно брать элементы дорожной карты.
     */
    targetCollection: string;
    limit?: number | null;
    sortField?: string | null;
    sortDirection?: ('asc' | 'desc') | null;
    fieldMapping?: {
      title?: string | null;
      description?: string | null;
      status?: string | null;
      startDate?: string | null;
      endDate?: string | null;
    };
  };
  apiSettings?: {
    apiUrl: string;
  };
  displaySettings?: {
    showStatus?: boolean | null;
    showDates?: boolean | null;
    showProgress?: boolean | null;
    showTags?: boolean | null;
    showCategory?: boolean | null;
    groupBy?: ('none' | 'status' | 'category' | 'date') | null;
    enableFiltering?: boolean | null;
    enableVoting?: boolean | null;
    colorScheme?: ('status' | 'category' | 'monochrome' | 'custom') | null;
    customColors?:
      | {
          value: string;
          color: string;
          id?: string | null;
        }[]
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'roadmap';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BenefitsOutcomesBlock".
 */
export interface BenefitsOutcomesBlock {
  heading?: string | null;
  subheading?: string | null;
  /**
   * Общее описание преимуществ или результатов
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  items?:
    | {
        /**
         * Название иконки (например, из Font Awesome) или URL
         */
        icon?: string | null;
        title: string;
        description: string;
        link?: {
          label?: string | null;
          url?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  layout?: ('grid' | 'listWithIcons' | 'numberedList' | 'cards') | null;
  columns?: ('1' | '2' | '3' | '4') | null;
  alignment?: ('left' | 'center' | 'right') | null;
  iconPosition?: ('left' | 'top') | null;
  backgroundColor?: string | null;
  itemBackgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'benefitsOutcomes';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TargetAudienceBlock".
 */
export interface TargetAudienceBlock {
  heading?: string | null;
  subheading?: string | null;
  audienceDescription?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  idealFor?:
    | {
        /**
         * Иконка, символизирующая группу (например, fa-user-tie)
         */
        icon?: string | null;
        /**
         * Например: Начинающие разработчики, Маркетологи, Аналитики данных
         */
        groupName: string;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  prerequisites?: {
    heading?: string | null;
    items?:
      | {
          requirement: string;
          id?: string | null;
        }[]
      | null;
  };
  notIdealFor?: {
    heading?: string | null;
    items?:
      | {
          reason: string;
          id?: string | null;
        }[]
      | null;
  };
  layout?: ('list' | 'cards' | 'tags') | null;
  columns?: ('1' | '2' | '3' | '4') | null;
  backgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'targetAudience';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GuaranteeBlock".
 */
export interface GuaranteeBlock {
  heading?: string | null;
  subheading?: string | null;
  icon?: (string | null) | Media;
  /**
   * Опишите условия гарантии возврата средств или удовлетворенности.
   */
  guaranteeText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Например: 30 дней, 14 дней, Бессрочно
   */
  duration?: string | null;
  conditions?:
    | {
        condition: string;
        id?: string | null;
      }[]
    | null;
  ctaButton?: {
    label?: string | null;
    url?: string | null;
  };
  layout?: ('iconLeft' | 'iconTop' | 'iconRight' | 'textOnly') | null;
  backgroundColor?: string | null;
  borderColor?: string | null;
  textColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'guarantee';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SocialProofAdvancedBlock".
 */
export interface SocialProofAdvancedBlock {
  heading?: string | null;
  subheading?: string | null;
  elements?:
    | {
        title?: string | null;
        items?:
          | {
              logo: string | Media;
              name?: string | null;
              url?: string | null;
              id?: string | null;
            }[]
          | null;
        layout?: ('grid' | 'carousel') | null;
        columns?: ('2' | '3' | '4' | '5' | '6') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'logos';
      }[]
    | null;
  backgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'socialProofAdvanced';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InstructorProfileBlock".
 */
export interface InstructorProfileBlock {
  heading?: string | null;
  instructorSource?: ('relation' | 'manual') | null;
  /**
   * Данные будут автоматически подтянуты из выбранного профиля.
   */
  instructorRelation?: (string | null) | User;
  manualData?: {
    name: string;
    title: string;
    photo: string | Media;
    bio: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    socialLinks?:
      | {
          platform?: ('linkedin' | 'twitter' | 'github' | 'website' | 'other') | null;
          id?: string | null;
        }[]
      | null;
    expertise?:
      | {
          area: string;
          id?: string | null;
        }[]
      | null;
    achievements?:
      | {
          achievement: string;
          id?: string | null;
        }[]
      | null;
  };
  displaySettings?: {
    layout?: ('photoLeft' | 'photoRight' | 'photoTop' | 'card') | null;
    showTitle?: boolean | null;
    showBio?: boolean | null;
    bioLength?: ('full' | 'short') | null;
    showSocialLinks?: boolean | null;
    showExpertise?: boolean | null;
    showAchievements?: boolean | null;
    linkToFullProfile?: boolean | null;
    profilePageUrl?: string | null;
    backgroundColor?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'instructorProfile';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeaderBlock".
 */
export interface HeaderBlock {
  /**
   * Логотип для отображения в шапке
   */
  logo?: (string | null) | Media;
  /**
   * Пункты меню для отображения в шапке
   */
  navigation?:
    | {
        label: string;
        href: string;
        /**
         * Отметьте, если эта ссылка должна быть выделена как активная
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Кнопки для отображения в шапке
   */
  actions?:
    | {
        label: string;
        href: string;
        style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
        id?: string | null;
      }[]
    | null;
  style?: ('default' | 'centered' | 'minimal') | null;
  sticky?: ('none' | 'always' | 'scrolled') | null;
  /**
   * Дополнительные настройки для блока
   */
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'header';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FooterBlock".
 */
export interface FooterBlock {
  /**
   * Логотип для отображения в футере
   */
  logo?: (string | null) | Media;
  /**
   * Текст копирайта и правовая информация
   */
  copyright?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Колонки с ссылками для отображения в футере
   */
  columns?:
    | {
        title: string;
        /**
         * Список ссылок в колонке
         */
        links?:
          | {
              label: string;
              href: string;
              /**
               * Отметьте, если ссылка ведет на внешний ресурс
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Ссылки на социальные сети
   */
  social?:
    | {
        platform: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'youtube' | 'github';
        url: string;
        id?: string | null;
      }[]
    | null;
  layout?: ('columns' | 'simple' | 'centered') | null;
  style?: ('default' | 'minimal' | 'dark') | null;
  /**
   * Дополнительные настройки для блока
   */
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'footer';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServicesBlock".
 */
export interface ServicesBlock {
  /**
   * Основной заголовок блока с услугами
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание услуг
   */
  subheading?: string | null;
  /**
   * Общее описание предоставляемых услуг
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Список предоставляемых услуг
   */
  services?:
    | {
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Название иконки из библиотеки Lucide или другой используемой библиотеки
         */
        icon?: string | null;
        /**
         * Иллюстрация услуги (опционально)
         */
        image?: (string | null) | Media;
        /**
         * Список ключевых особенностей или преимуществ услуги
         */
        features?:
          | {
              text: string;
              id?: string | null;
            }[]
          | null;
        cta?: {
          label?: string | null;
          href?: string | null;
          style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
        };
        /**
         * Отметьте, если хотите выделить эту услугу как популярную
         */
        isPopular?: boolean | null;
        id?: string | null;
      }[]
    | null;
  layout?: ('grid' | 'list' | 'cards' | 'tabs') | null;
  /**
   * Количество колонок в сетке или карточках
   */
  columns?: ('2' | '3' | '4') | null;
  /**
   * Дополнительные настройки для блока
   */
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'services';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CaseStudiesBlock".
 */
export interface CaseStudiesBlock {
  /**
   * Основной заголовок блока с кейсами
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание кейсов
   */
  subheading?: string | null;
  /**
   * Общее описание реализованных проектов
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Список реализованных проектов
   */
  cases?:
    | {
        title: string;
        /**
         * Название компании-клиента
         */
        client?: string | null;
        /**
         * Краткое описание для отображения в списке кейсов
         */
        summary?: string | null;
        /**
         * Детальное описание проекта
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Основное изображение для кейса
         */
        coverImage: string | Media;
        /**
         * Дополнительные изображения проекта
         */
        gallery?:
          | {
              image: string | Media;
              caption?: string | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Технологии, инструменты или категории проекта
         */
        tags?:
          | {
              tag: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Ключевые результаты и метрики проекта
         */
        results?:
          | {
              metric: string;
              value: string;
              description?: string | null;
              id?: string | null;
            }[]
          | null;
        testimonial: {
          quote: string;
          author: string;
          position?: string | null;
          avatar?: (string | null) | Media;
        };
        cta?: {
          label?: string | null;
          href?: string | null;
        };
        /**
         * Отметьте, если это один из ключевых проектов
         */
        featured?: boolean | null;
        id?: string | null;
      }[]
    | null;
  layout?: ('grid' | 'list' | 'carousel' | 'masonry') | null;
  /**
   * Количество колонок в сетке или мозаике
   */
  columns?: ('2' | '3' | '4') | null;
  /**
   * Добавить возможность фильтровать кейсы по тегам
   */
  filterByTags?: boolean | null;
  showFeaturedOnly?: boolean | null;
  /**
   * 0 - показать все
   */
  limit?: number | null;
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'caseStudies';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TechStackBlock".
 */
export interface TechStackBlock {
  /**
   * Основной заголовок блока с технологическим стеком
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание
   */
  subheading?: string | null;
  /**
   * Общее описание технологического стека
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Группировка технологий по категориям
   */
  categories?:
    | {
        /**
         * Например: Frontend, Backend, ИИ и машинное обучение и т.д.
         */
        name: string;
        /**
         * Краткое описание этой области технологий
         */
        description?: string | null;
        /**
         * Список технологий в этой категории
         */
        technologies?:
          | {
              name: string;
              /**
               * Краткое описание технологии или ее применения
               */
              description?: string | null;
              /**
               * Логотип или иконка технологии
               */
              logo?: (string | null) | Media;
              /**
               * Ссылка на официальный сайт технологии
               */
              url?: string | null;
              expertise?: ('beginner' | 'intermediate' | 'advanced' | 'expert') | null;
              /**
               * Сколько лет компания работает с этой технологией
               */
              experienceYears?: number | null;
              /**
               * Отметьте для выделения ключевых технологий
               */
              featured?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Партнерские статусы, сертификации и другие подтверждения экспертизы
   */
  partners?:
    | {
        name: string;
        logo: string | Media;
        description?: string | null;
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Отображать только логотипы технологий без детальной информации
   */
  showLogosOnly?: boolean | null;
  /**
   * Отображать индикаторы уровня экспертизы
   */
  showExpertiseLevels?: boolean | null;
  layout?: ('grid' | 'list' | 'cards' | 'tabs') | null;
  /**
   * Количество колонок в сетке логотипов
   */
  columns?: ('3' | '4' | '5' | '6') | null;
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'techStack';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PlansComparisonBlock".
 */
export interface PlansComparisonBlock {
  /**
   * Основной заголовок блока сравнения планов
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание
   */
  subheading?: string | null;
  /**
   * Общее описание предлагаемых планов
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Для переключения между разными типами планов (например, месячные/годовые)
   */
  switchLabels?: {
    firstOption?: string | null;
    secondOption?: string | null;
    showDiscount?: boolean | null;
    discountText?: string | null;
  };
  /**
   * Планы или тарифы для сравнения
   */
  plans?:
    | {
        name: string;
        description?: string | null;
        /**
         * Название иконки из библиотеки (например, "Zap" из Lucide)
         */
        icon?: string | null;
        monthlyPrice: {
          value: number;
          currency?: ('RUB' | 'USD' | 'EUR') | null;
          suffix?: string | null;
          /**
           * Для отображения скидки (оставьте пустым, если нет скидки)
           */
          strikethroughPrice?: number | null;
        };
        yearlyPrice: {
          value: number;
          currency?: ('RUB' | 'USD' | 'EUR') | null;
          suffix?: string | null;
          /**
           * Для отображения скидки (оставьте пустым, если нет скидки)
           */
          strikethroughPrice?: number | null;
          monthlyEquivalent?: boolean | null;
        };
        /**
         * Список возможностей, включенных в план
         */
        features?:
          | {
              feature: string;
              included?: ('yes' | 'no' | 'partial' | 'custom') | null;
              /**
               * Например: "До 10 пользователей", "5 ГБ"
               */
              customValue?: string | null;
              highlight?: boolean | null;
              id?: string | null;
            }[]
          | null;
        cta?: {
          label?: string | null;
          url?: string | null;
          style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
        };
        /**
         * Отметьте, чтобы выделить этот план как популярный выбор
         */
        isPopular?: boolean | null;
        /**
         * Например: "Популярный", "Лучший выбор", "Распродажа"
         */
        badge?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Группировать возможности по категориям (опционально)
   */
  featureCategories?:
    | {
        name: string;
        features?:
          | {
              name: string;
              /**
               * Пояснение к возможности (отображается при наведении)
               */
              description?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Мелкий текст или примечание под таблицей планов
   */
  disclaimer?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  layout?: ('table' | 'cards' | 'grid') | null;
  /**
   * Включить детальное сравнение функций
   */
  showFeatureComparison?: boolean | null;
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'plansComparison';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CourseBlock".
 */
export interface CourseBlock {
  title: string;
  /**
   * Краткое описание курса или слоган
   */
  subtitle?: string | null;
  /**
   * Полное описание курса
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Главное изображение курса
   */
  coverImage?: (string | null) | Media;
  level?: ('beginner' | 'intermediate' | 'advanced' | 'all-levels') | null;
  duration: {
    value: number;
    unit: 'hours' | 'days' | 'weeks' | 'months';
  };
  format?: ('online' | 'offline' | 'blended' | 'self-paced') | null;
  /**
   * Дата начала ближайшего потока (если применимо)
   */
  startDate?: string | null;
  enrollmentStatus?: ('open' | 'coming-soon' | 'closed' | 'on-demand') | null;
  pricing?: {
    price?: number | null;
    currency?: ('RUB' | 'USD' | 'EUR') | null;
    /**
     * Оставьте пустым, если скидки нет
     */
    discountPrice?: number | null;
    installmentAvailable?: boolean | null;
    installmentDetails?: string | null;
  };
  /**
   * Чему научатся студенты
   */
  learningOutcomes?:
    | {
        outcome: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Что должны знать или иметь студенты
   */
  requirements?:
    | {
        requirement: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Для кого предназначен этот курс
   */
  targetAudience?:
    | {
        audience: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Разделы и уроки курса
   */
  curriculum?:
    | {
        title: string;
        description?: string | null;
        lessons?:
          | {
              title: string;
              description?: string | null;
              /**
               * Например: "45 минут", "2 часа"
               */
              duration?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  instructors?:
    | {
        name: string;
        role?: string | null;
        bio?: string | null;
        photo?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  testimonials?:
    | {
        text: string;
        studentName: string;
        studentTitle?: string | null;
        studentImage?: (string | null) | Media;
        rating?: number | null;
        id?: string | null;
      }[]
    | null;
  faq?:
    | {
        question: string;
        answer: string;
        id?: string | null;
      }[]
    | null;
  certificates?: {
    issueCertificate?: boolean | null;
    certificateDescription?: string | null;
    certificateImage?: (string | null) | Media;
  };
  enrollmentCTA?: {
    buttonText?: string | null;
    url?: string | null;
    /**
     * Например: "Осталось всего 5 мест"
     */
    additionalText?: string | null;
  };
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'course';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CurriculumBlock".
 */
export interface CurriculumBlock {
  /**
   * Основной заголовок блока с программой обучения
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание программы
   */
  subheading?: string | null;
  /**
   * Общее описание программы обучения
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Если хотите связать с существующим курсом в базе данных
   */
  courseId?: string | null;
  /**
   * Модули и уроки в программе обучения
   */
  modules?:
    | {
        title: string;
        description?: string | null;
        /**
         * Например: "2 недели" или "10 часов"
         */
        duration?: string | null;
        /**
         * Отдельные темы или уроки в модуле
         */
        topics?:
          | {
              title: string;
              description?: string | null;
              /**
               * Например: "45 минут" или "2 часа"
               */
              duration?: string | null;
              learningFormat?: ('lecture' | 'practical' | 'seminar' | 'self-study' | 'assignment' | 'test') | null;
              materials?:
                | {
                    type?: ('video' | 'presentation' | 'document' | 'link' | 'book') | null;
                    title: string;
                    /**
                     * Ссылка на материал (если применимо)
                     */
                    url?: string | null;
                    /**
                     * Загружаемый файл (если применимо)
                     */
                    file?: (string | null) | Media;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Навыки, которые получит студент после прохождения модуля
         */
        skills?:
          | {
              skill: string;
              id?: string | null;
            }[]
          | null;
        projects?:
          | {
              title: string;
              description?: string | null;
              image?: (string | null) | Media;
              id?: string | null;
            }[]
          | null;
        /**
         * Отметьте, если это продвинутый или сложный модуль
         */
        isAdvanced?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Что должен знать студент перед началом обучения
   */
  prerequisites?:
    | {
        prerequisite: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Чему научится студент по окончании программы
   */
  learningOutcomes?:
    | {
        outcome: string;
        id?: string | null;
      }[]
    | null;
  layout?: ('timeline' | 'tabs' | 'accordion' | 'cards' | 'list') | null;
  /**
   * Отображать индикаторы прогресса (для авторизованных пользователей)
   */
  showProgress?: boolean | null;
  callToAction?: {
    /**
     * Текст призыва к действию, например "Записаться на курс"
     */
    text?: string | null;
    /**
     * Ссылка на страницу записи или детальной информации
     */
    url?: string | null;
  };
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'curriculum';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UserProgressBlock".
 */
export interface UserProgressBlock {
  /**
   * Основной заголовок блока прогресса
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание блока
   */
  subheading?: string | null;
  /**
   * Общее описание блока прогресса
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  displayType?: ('dashboard' | 'progressBar' | 'chart' | 'achievements') | null;
  dataSource?: ('user' | 'static' | 'api') | null;
  /**
   * Задать данные прогресса вручную
   */
  staticData?:
    | {
        label: string;
        value: number;
        maxValue?: number | null;
        /**
         * HEX, RGB или название цвета
         */
        color?: string | null;
        /**
         * Название иконки из библиотеки или URL
         */
        icon?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Поля данных пользователя для отображения
   */
  userDataFields?:
    | {
        /**
         * Поле из коллекции пользователей или связанной коллекции
         */
        field: string;
        label: string;
        fieldType?: ('percent' | 'number' | 'boolean' | 'date' | 'text') | null;
        color?: string | null;
        icon?: string | null;
        id?: string | null;
      }[]
    | null;
  apiSettings?: {
    apiUrl: string;
    method?: ('GET' | 'POST') | null;
    headers?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    responseMapping?:
      | {
          field: string;
          label: string;
          type?: ('percent' | 'number' | 'date' | 'text' | 'boolean') | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Список достижений для отображения
   */
  achievements?:
    | {
        title: string;
        description?: string | null;
        icon?: (string | null) | Media;
        /**
         * Значение, необходимое для получения достижения
         */
        requiredValue?: number | null;
        /**
         * Поле пользователя для отслеживания прогресса
         */
        fieldToTrack?: string | null;
        reward?: string | null;
        /**
         * Не показывать до разблокировки
         */
        isSecret?: boolean | null;
        id?: string | null;
      }[]
    | null;
  chartSettings?: {
    chartType?: ('line' | 'bar' | 'pie' | 'radar') | null;
    showLegend?: boolean | null;
    enableAnimation?: boolean | null;
    period?: ('day' | 'week' | 'month' | 'year' | 'all') | null;
  };
  settings?: {
    showTrends?: boolean | null;
    enableComparison?: boolean | null;
    refreshInterval?: number | null;
    showTips?: boolean | null;
    /**
     * Дополнительные стили для блока
     */
    customCSS?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'userProgress';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CertificatesBlock".
 */
export interface CertificatesBlock {
  /**
   * Основной заголовок блока сертификатов
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание блока
   */
  subheading?: string | null;
  /**
   * Общее описание раздела сертификатов
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  displayType?: ('grid' | 'list' | 'carousel' | 'gallery') | null;
  certificatesSource?: ('manual' | 'collection' | 'api' | 'user') | null;
  /**
   * Список сертификатов для отображения
   */
  certificates?:
    | {
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        image?: (string | null) | Media;
        issueDate?: string | null;
        expiryDate?: string | null;
        issuer: {
          name: string;
          logo?: (string | null) | Media;
          website?: string | null;
        };
        /**
         * Уникальный идентификатор сертификата
         */
        credentialID?: string | null;
        /**
         * Ссылка для проверки подлинности сертификата
         */
        verificationUrl?: string | null;
        skills?:
          | {
              skill: string;
              id?: string | null;
            }[]
          | null;
        status?: ('active' | 'pending' | 'expired' | 'available') | null;
        requirements?:
          | {
              requirement: string;
              completed?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  collectionSettings?: {
    /**
     * Введите слаг коллекции, из которой нужно брать сертификаты.
     */
    targetCollection: string;
    limit?: number | null;
    sortField?: string | null;
    sortDirection?: ('asc' | 'desc') | null;
    filters?:
      | {
          field: string;
          operator?: ('equals' | 'not_equals' | 'contains' | 'greater_than' | 'less_than') | null;
          value: string;
          id?: string | null;
        }[]
      | null;
  };
  apiSettings?: {
    /**
     * URL для получения данных сертификатов
     */
    apiUrl: string;
    /**
     * Ключ для доступа к API (если требуется)
     */
    apiKey?: string | null;
    method?: ('GET' | 'POST') | null;
    headers?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    responseMapping?: {
      /**
       * Путь к массиву сертификатов в ответе API (например, data.certificates)
       */
      items?: string | null;
      title?: string | null;
      description?: string | null;
      image?: string | null;
    };
  };
  userSettings?: {
    /**
     * Поле или отношение пользователя, содержащее сертификаты
     */
    userField: string;
    showCompletedOnly?: boolean | null;
    showAvailable?: boolean | null;
  };
  settings?: {
    enableFiltering?: boolean | null;
    enableSearch?: boolean | null;
    cardsPerRow?: ('2' | '3' | '4') | null;
    showIssuer?: boolean | null;
    showDate?: boolean | null;
    enableSocialSharing?: boolean | null;
    enablePrinting?: boolean | null;
    enableDownload?: boolean | null;
    progressDisplay?: ('progressBar' | 'percent' | 'fraction' | 'hidden') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'certificates';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ResourceLibraryBlock".
 */
export interface ResourceLibraryBlock {
  /**
   * Основной заголовок блока библиотеки ресурсов
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание блока
   */
  subheading?: string | null;
  /**
   * Общее описание библиотеки ресурсов
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  displayType?: ('grid' | 'list' | 'cards' | 'tree') | null;
  resourcesSource?: ('manual' | 'collection' | 'api') | null;
  /**
   * Структура категорий для организации ресурсов
   */
  categories?:
    | {
        name: string;
        description?: string | null;
        icon?: (string | null) | Media;
        /**
         * Уникальный идентификатор для URL
         */
        slug?: string | null;
        /**
         * Slug родительской категории (если это подкатегория)
         */
        parentCategory?: string | null;
        /**
         * Порядок отображения категории
         */
        order?: number | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Список ресурсов для отображения
   */
  resources?:
    | {
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        type?:
          | (
              | 'article'
              | 'video'
              | 'course'
              | 'tool'
              | 'book'
              | 'podcast'
              | 'tutorial'
              | 'presentation'
              | 'template'
              | 'api'
              | 'code'
              | 'dataset'
              | 'other'
            )
          | null;
        thumbnail?: (string | null) | Media;
        categoryIds?:
          | {
              /**
               * Slug категории
               */
              category: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Внешняя ссылка или внутренний путь к ресурсу
         */
        url?: string | null;
        /**
         * Загружаемый файл ресурса (если применимо)
         */
        file?: (string | null) | Media;
        author?: {
          name?: string | null;
          avatar?: (string | null) | Media;
          bio?: string | null;
        };
        createdAt?: string | null;
        updatedAt?: string | null;
        tags?:
          | {
              tag: string;
              id?: string | null;
            }[]
          | null;
        level?: ('beginner' | 'intermediate' | 'advanced' | 'expert') | null;
        duration?: {
          value?: number | null;
          unit?: ('minutes' | 'hours' | 'days' | 'weeks') | null;
        };
        isFeatured?: boolean | null;
        isExternal?: boolean | null;
        accessLevel?: ('free' | 'premium' | 'members') | null;
        viewCount?: number | null;
        downloadCount?: number | null;
        rating?: {
          average?: number | null;
          count?: number | null;
        };
        relatedResources?:
          | {
              resourceId: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  collectionSettings?: {
    /**
     * Введите слаг коллекции, из которой нужно брать ресурсы.
     */
    targetCollection: string;
    limit?: number | null;
    sortField?: string | null;
    sortDirection?: ('asc' | 'desc') | null;
    filters?:
      | {
          field: string;
          operator?: ('equals' | 'not_equals' | 'contains' | 'greater_than' | 'less_than' | 'exists') | null;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  apiSettings?: {
    apiUrl: string;
    apiKey?: string | null;
    method?: ('GET' | 'POST') | null;
    headers?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    params?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    responseMapping?: {
      items?: string | null;
      title?: string | null;
      description?: string | null;
      thumbnail?: string | null;
      url?: string | null;
    };
  };
  settings?: {
    enableFiltering?: boolean | null;
    enableSearch?: boolean | null;
    enableSorting?: boolean | null;
    enableFavorites?: boolean | null;
    enableRating?: boolean | null;
    enableSharing?: boolean | null;
    showCategoriesNav?: boolean | null;
    itemsPerPage?: number | null;
    itemsPerRow?: ('2' | '3' | '4' | '5') | null;
    showTags?: boolean | null;
    showCategories?: boolean | null;
    showAuthor?: boolean | null;
    showDate?: boolean | null;
    showDescription?: boolean | null;
    truncateDescription?: number | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'resourceLibrary';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AiToolsBlock".
 */
export interface AiToolsBlock {
  /**
   * Основной заголовок блока каталога ИИ-инструментов
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание блока
   */
  subheading?: string | null;
  /**
   * Общее описание каталога ИИ-инструментов
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  displayType?: ('grid' | 'list' | 'cards') | null;
  toolsSource?: ('manual' | 'collection' | 'api') | null;
  /**
   * Структура категорий для организации инструментов
   */
  categories?:
    | {
        name: string;
        description?: string | null;
        icon?: (string | null) | Media;
        /**
         * Уникальный идентификатор для URL
         */
        slug?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Список ИИ-инструментов для отображения
   */
  tools?:
    | {
        name: string;
        logo?: (string | null) | Media;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        websiteUrl: string;
        categoryIds?:
          | {
              /**
               * Slug категории
               */
              category: string;
              id?: string | null;
            }[]
          | null;
        pricingModel?: ('free' | 'freemium' | 'subscription' | 'payg' | 'onetime' | 'other') | null;
        features?:
          | {
              feature: string;
              id?: string | null;
            }[]
          | null;
        useCases?:
          | {
              useCase: string;
              id?: string | null;
            }[]
          | null;
        tags?:
          | {
              tag: string;
              id?: string | null;
            }[]
          | null;
        integration?: ('api' | 'plugin' | 'web' | 'none') | null;
        rating?: number | null;
        isFeatured?: boolean | null;
        reviewLink?: string | null;
        id?: string | null;
      }[]
    | null;
  collectionSettings?: {
    /**
     * Введите слаг коллекции, из которой нужно брать инструменты (например, 'ai-tools-collection').
     */
    targetCollection: string;
    limit?: number | null;
    sortField?: string | null;
    sortDirection?: ('asc' | 'desc') | null;
    filters?:
      | {
          field: string;
          operator?: ('equals' | 'not_equals' | 'contains' | 'in' | 'not_in' | 'exists') | null;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  apiSettings?: {
    apiUrl: string;
    apiKey?: string | null;
    method?: ('GET' | 'POST') | null;
    headers?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    responseMapping?: {
      items?: string | null;
      name?: string | null;
      description?: string | null;
      logo?: string | null;
      websiteUrl?: string | null;
    };
  };
  settings?: {
    enableFiltering?: boolean | null;
    enableSearch?: boolean | null;
    enableSorting?: boolean | null;
    showCategoriesNav?: boolean | null;
    itemsPerPage?: number | null;
    itemsPerRow?: ('2' | '3' | '4' | '5') | null;
    showTags?: boolean | null;
    showPricing?: boolean | null;
    showRating?: boolean | null;
    showFeatures?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'aiTools';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LeaderboardBlock".
 */
export interface LeaderboardBlock {
  /**
   * Основной заголовок блока рейтинга/лидерборда
   */
  heading?: string | null;
  /**
   * Краткое описание таблицы лидеров
   */
  subheading?: string | null;
  /**
   * Общее описание или правила лидерборда
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  leaderboardType?: ('points' | 'coursesCompleted' | 'achievements' | 'activity' | 'custom') | null;
  dataSource?: ('usersCollection' | 'leaderboardCollection' | 'api') | null;
  usersCollectionSettings?: {
    /**
     * Название поля в коллекции пользователей, по которому строится рейтинг
     */
    scoreField: string;
    period?: ('allTime' | 'weekly' | 'monthly' | 'yearly' | 'customPeriod') | null;
    /**
     * Payload Where-условие для фильтрации участников рейтинга
     */
    filter?: string | null;
  };
  leaderboardCollectionSettings?: {
    /**
     * Введите слаг коллекции, содержащей данные для лидерборда.
     */
    targetCollection: string;
    userRelationField: string;
    scoreField: string;
    periodField?: string | null;
    filter?: string | null;
  };
  apiSettings?: {
    apiUrl: string;
    apiKey?: string | null;
    responseMapping?: {
      items?: string | null;
      userName?: string | null;
      userAvatar?: string | null;
      score?: string | null;
      rank?: string | null;
    };
  };
  displaySettings?: {
    limit?: number | null;
    showRank?: boolean | null;
    showAvatar?: boolean | null;
    showScore?: boolean | null;
    scoreLabel?: string | null;
    highlightCurrentUser?: boolean | null;
    currentUserPosition?: ('alwaysBottom' | 'ifNotInTop' | 'never') | null;
    refreshInterval?: number | null;
    pagination?: boolean | null;
    emptyStateMessage?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'leaderboard';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CourseOverviewBlock".
 */
export interface CourseOverviewBlock {
  courseSource?: ('relation' | 'manual') | null;
  /**
   * Данные будут автоматически подтянуты из выбранного курса.
   */
  courseRelation?: (string | null) | Course;
  manualData?: {
    title: string;
    subtitle?: string | null;
    shortDescription: string;
    targetAudience?: string | null;
    /**
     * Например: 10 часов, 5 недель
     */
    duration?: string | null;
    level?: ('beginner' | 'intermediate' | 'advanced' | 'expert') | null;
    keyTopics?:
      | {
          topic: string;
          icon?: string | null;
          id?: string | null;
        }[]
      | null;
    instructor?: {
      name?: string | null;
      photo?: (string | null) | Media;
      title?: string | null;
    };
    mainImage?: (string | null) | Media;
    ctaButton: {
      label: string;
      url: string;
      openInNewTab?: boolean | null;
    };
  };
  displaySettings?: {
    layout?: ('imageRight' | 'imageLeft' | 'imageTop' | 'textOverImage') | null;
    showSubtitle?: boolean | null;
    showAudience?: boolean | null;
    showDuration?: boolean | null;
    showLevel?: boolean | null;
    showInstructor?: boolean | null;
    showKeyTopics?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'courseOverview';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuizAssessmentBlock".
 */
export interface QuizAssessmentBlock {
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Для группировки тестов или связи с прогрессом.
   */
  relatedCourseOrModule?:
    | ({
        relationTo: 'courses';
        value: string | Course;
      } | null)
    | ({
        relationTo: 'modules';
        value: string | Module;
      } | null);
  questions?:
    | {
        questionText: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        questionType: 'singleChoice' | 'multipleChoice' | 'openText' | 'matching' | 'ordering';
        image?: (string | null) | Media;
        options?:
          | {
              optionText: string;
              isCorrect?: boolean | null;
              feedback?: string | null;
              id?: string | null;
            }[]
          | null;
        matchingPairs?:
          | {
              prompt: string;
              correctMatch: string;
              id?: string | null;
            }[]
          | null;
        orderingItems?:
          | {
              itemText: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Пример правильного ответа, для сравнения или ручной проверки
         */
        correctAnswerText?: string | null;
        points?: number | null;
        feedbackForAll?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  settings?: {
    timeLimit?: number | null;
    passingScore?: number | null;
    attemptsAllowed?: number | null;
    randomizeQuestions?: boolean | null;
    randomizeOptions?: boolean | null;
    showCorrectAnswers?: ('afterAttempt' | 'afterLastAttempt' | 'afterPassing' | 'never') | null;
    showFeedback?: boolean | null;
    trackProgress?: boolean | null;
  };
  resultMessages?: {
    passMessage?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    failMessage?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  layout?: ('oneQuestionPerPage' | 'allQuestionsList') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'quizAssessment';
}
/**
 * Коллекция для модулей внутри курсов.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules".
 */
export interface Module {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  status?: ('draft' | 'published') | null;
  course: string | Course;
  /**
   * Порядковый номер модуля в курсе.
   */
  order: number;
  /**
   * Модули, которые должны быть завершены перед началом этого.
   */
  prerequisites?: (string | Module)[] | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AssignmentsBlock".
 */
export interface AssignmentsBlock {
  title: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Укажите, к какому курсу или модулю относится это задание.
   */
  relatedCourseOrModule:
    | {
        relationTo: 'courses';
        value: string | Course;
      }
    | {
        relationTo: 'modules';
        value: string | Module;
      };
  dueDate?: string | null;
  submissionType: 'fileUpload' | 'textInput' | 'urlSubmission';
  allowedFileTypes?: string | null;
  maxFileSizeMB?: number | null;
  maxFileCount?: number | null;
  attachedMaterials?:
    | {
        materialFile: string | Media;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  gradingCriteria?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  pointsPossible?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'assignments';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AchievementsBlockType".
 */
export interface AchievementsBlockType {
  blockTitle?: string | null;
  /**
   * Выберите, какие достижения показывать. Логика получения данных реализуется на фронтенде.
   */
  displayMode?: ('userSpecific' | 'allAvailable' | 'specificAchievements') | null;
  achievementsToShow?: (string | Achievement)[] | null;
  layout?: ('grid' | 'list') | null;
  limit?: number | null;
  showLockedState?: boolean | null;
  viewAllLink: {
    type?: ('reference' | 'custom') | null;
    label: string;
    reference?: (string | null) | Page;
    url?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'achievementsBlock';
}
/**
 * Definitions of achievements users can earn.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements".
 */
export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string | Media;
  type:
    | 'course_started'
    | 'lesson_completed'
    | 'module_completed'
    | 'course_completed'
    | 'progress_milestone'
    | 'certificate_earned'
    | 'account_created'
    | 'profile_completed'
    | 'first_purchase';
  /**
   * Conditions that must be met to earn this achievement.
   */
  criteria?: {
    /**
     * Required for course-specific achievements.
     */
    courseId?: (string | null) | Course;
    /**
     * e.g., Complete 10 lessons (can be across any course).
     */
    lessonCount?: number | null;
    /**
     * e.g., Reach 50% progress in a specific course.
     */
    progressPercent?: number | null;
  };
  /**
   * Experience points awarded for earning this achievement.
   */
  xpAwarded?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProjectShowcaseBlock".
 */
export interface ProjectShowcaseBlock {
  blockTitle?: string | null;
  /**
   * Выберите, какие проекты отображать. Логика фильтрации реализуется на фронтенде.
   */
  sourceType?: ('latest' | 'category' | 'course' | 'manualSelection') | null;
  categoryOrTag?:
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'tags';
        value: string | Tag;
      } | null);
  relatedCourse?: (string | null) | Course;
  selectedProjects?: (string | Project)[] | null;
  limit?: number | null;
  layout?: ('grid' | 'carousel' | 'list') | null;
  displayOptions?: {
    showAuthor?: boolean | null;
    showDate?: boolean | null;
    showTags?: boolean | null;
    showDescriptionExcerpt?: boolean | null;
  };
  viewAllLink: {
    type?: ('reference' | 'custom') | null;
    label: string;
    reference?: (string | null) | Page;
    url?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'projectShowcase';
}
/**
 * Коллекция для хранения студенческих проектов или работ.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  title: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  author: string | User;
  status?: ('draft' | 'review' | 'published' | 'rejected') | null;
  featuredImage: string | Media;
  gallery?:
    | {
        image: string | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  tags?: (string | Tag)[] | null;
  relatedCourse?: (string | null) | Course;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FunnelStepBlock".
 */
export interface FunnelStepBlock {
  /**
   * Внутреннее название для идентификации шага воронки в админ-панели.
   */
  stepName: string;
  /**
   * Уникальный идентификатор воронки (например, main_sales_funnel, onboarding_funnel). Используйте латиницу и нижнее подчеркивание.
   */
  funnelId: string;
  /**
   * Уникальный идентификатор этого шага внутри воронки (например, visit_landing, download_lead_magnet, attend_webinar). Используйте латиницу и нижнее подчеркивание.
   */
  stepId: string;
  /**
   * Внутренние заметки для этого шага воронки.
   */
  notes?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'funnelStep';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RecommendationsBlock".
 */
export interface RecommendationsBlock {
  blockTitle?: string | null;
  /**
   * Выберите тип. Автоматические типы требуют логики на фронтенде/бэкенде для подбора.
   */
  recommendationType: 'manual' | 'related' | 'popular' | 'userBased' | 'contentBased';
  sourceCollection: 'courses' | 'posts' | 'products' | 'projects' | 'resources' | 'events';
  /**
   * Выберите элементы из указанной выше коллекции.
   */
  manualRecommendations?:
    | (
        | {
            relationTo: 'courses';
            value: string | Course;
          }
        | {
            relationTo: 'posts';
            value: string | Post;
          }
        | {
            relationTo: 'products';
            value: string | Product;
          }
        | {
            relationTo: 'projects';
            value: string | Project;
          }
        | {
            relationTo: 'resources';
            value: string | Resource;
          }
        | {
            relationTo: 'events';
            value: string | Event;
          }
      )[]
    | null;
  limit?: number | null;
  layout?: ('cards' | 'list' | 'carousel') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'recommendations';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  title: string;
  /**
   * Select a product category
   */
  productCategory: string | ProductCategory;
  pricing: {
    /**
     * Base price in USD
     */
    basePrice: number;
    /**
     * Discount percentage (0-100)
     */
    discountPercentage?: number | null;
    /**
     * Final price after discount (calculated automatically)
     */
    finalPrice?: number | null;
    /**
     * Original price for comparison (optional)
     */
    compareAtPrice?: number | null;
    /**
     * Localized prices (automatically updated)
     */
    locales?: {
      en?: {
        amount?: number | null;
        currency?: string | null;
      };
      ru?: {
        amount?: number | null;
        currency?: string | null;
      };
    };
  };
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Brief description for product cards (max 160 characters)
   */
  shortDescription: string;
  features?:
    | {
        name: string;
        description: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Main product image (required)
   */
  thumbnail?: (string | null) | Media;
  gallery?:
    | {
        image: string | Media;
        alt?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Product type determines available features and delivery method
   */
  productType: 'digital' | 'subscription' | 'service' | 'access';
  /**
   * Is this product a course?
   */
  isCourse?: boolean | null;
  /**
   * Is this product a consulting service?
   */
  isConsulting?: boolean | null;
  /**
   * Related course (if this is a course product)
   */
  course?: (string | null) | Course;
  /**
   * URL to download the digital product (only visible after purchase)
   */
  downloadLink?: string | null;
  /**
   * Subscription details
   */
  subscriptionDetails?: {
    /**
     * Recurring price for subscription (per billing interval)
     */
    recurringPrice: number;
    /**
     * How often to bill the customer
     */
    billingInterval: 'monthly' | 'quarterly' | 'annual';
    /**
     * Number of trial days (0 for no trial)
     */
    trialDays?: number | null;
  };
  /**
   * Define the features or areas this access product unlocks
   */
  accessDetails?: {
    features: ('premium_content' | 'advanced_features' | 'api_access' | 'priority_support')[];
    /**
     * Access validity in days (0 for unlimited)
     */
    validityPeriod: number;
  };
  /**
   * Show this product in featured section
   */
  isFeatured?: boolean | null;
  /**
   * Automatically set based on order volume (15% above average)
   */
  isPopular?: boolean | null;
  /**
   * Select related products to display
   */
  relatedProducts?: (string | Product)[] | null;
  status: 'draft' | 'published' | 'archived';
  publishedAt?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Categories specific to products.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productCategories".
 */
export interface ProductCategory {
  id: string;
  title: string;
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Коллекция для учебных материалов и ресурсов.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resources".
 */
export interface Resource {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  resourceType: 'link' | 'file' | 'videoEmbed' | 'textBlock';
  description?: string | null;
  file?: (string | null) | Media;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  tags?: (string | Tag)[] | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  type: string;
  data:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  timestamp: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PopupTriggerConfigBlock".
 */
export interface PopupTriggerConfigBlock {
  /**
   * Уникальный ID (латиница, цифры, дефисы), который будет использоваться в JS для показа нужного попапа.
   */
  popupId: string;
  triggerType: 'exitIntent' | 'scroll' | 'timer' | 'click';
  /**
   * Показать попап, когда пользователь прокрутит N% страницы.
   */
  scrollPercentage?: number | null;
  /**
   * Показать попап через N секунд после загрузки страницы.
   */
  timerSeconds?: number | null;
  /**
   * Например, #my-button или .show-popup-link
   */
  clickSelector?: string | null;
  displayFrequency?: ('always' | 'session' | 'oncePerDays' | 'onceEver') | null;
  frequencyDays?: number | null;
  notes?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'popupTriggerConfig';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductsFilterBlock".
 */
export interface ProductsFilterBlock {
  enableCategories?: boolean | null;
  enableSort?: boolean | null;
  enableSearch?: boolean | null;
  enablePriceRange?: boolean | null;
  priceRanges?: {
    en?: {
      min?: number | null;
      max?: number | null;
    };
    ru?: {
      min?: number | null;
      max?: number | null;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'productsFilter';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeedbackBlock".
 */
export interface FeedbackBlock {
  /**
   * Основной заголовок блока обратной связи
   */
  heading?: string | null;
  /**
   * Подзаголовок или призыв к действию
   */
  subheading?: string | null;
  /**
   * Описание назначения формы обратной связи
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  formFields?:
    | {
        fieldName: string;
        label: string;
        fieldType: 'text' | 'textarea' | 'email' | 'number' | 'select' | 'radio' | 'checkbox' | 'rating' | 'hidden';
        options?:
          | {
              label: string;
              value: string;
              id?: string | null;
            }[]
          | null;
        placeholder?: string | null;
        defaultValue?: string | null;
        required?: boolean | null;
        maxLength?: number | null;
        min?: number | null;
        max?: number | null;
        step?: number | null;
        id?: string | null;
      }[]
    | null;
  submitButtonLabel?: string | null;
  submissionTarget?: ('collection' | 'email' | 'api' | 'none') | null;
  collectionSettings?: {
    /**
     * Введите слаг коллекции, в которую будут сохраняться отзывы.
     */
    targetCollection: string;
    mapFields?:
      | {
          formField: string;
          collectionField: string;
          id?: string | null;
        }[]
      | null;
    associateWithUser?: boolean | null;
  };
  emailSettings?: {
    recipientEmail: string;
    subject?: string | null;
    sendConfirmation?: boolean | null;
    confirmationSubject?: string | null;
    confirmationMessage?: string | null;
  };
  apiSettings?: {
    apiUrl: string;
    method?: ('POST' | 'PUT') | null;
    headers?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Путь к полю с сообщением в ответе (напр. data.message)
     */
    responseMessage?: string | null;
  };
  successMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  errorMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  settings?: {
    layout?: ('vertical' | 'horizontal' | 'inline') | null;
    showLabels?: boolean | null;
    usePlaceholdersAsLabels?: boolean | null;
    enableRecaptcha?: boolean | null;
    recaptchaSiteKey?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'feedback';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PollBlock".
 */
export interface PollBlock {
  /**
   * Основной заголовок блока опроса/голосования
   */
  heading?: string | null;
  /**
   * Подзаголовок или вопрос
   */
  subheading?: string | null;
  question: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  pollType?: ('singleChoice' | 'multipleChoice' | 'openEnded' | 'ratingScale') | null;
  options?:
    | {
        label: string;
        /**
         * Уникальное значение для идентификации варианта
         */
        value: string;
        image?: (string | null) | Media;
        voteCount?: number | null;
        id?: string | null;
      }[]
    | null;
  ratingScaleSettings?: {
    minLabel?: string | null;
    maxLabel?: string | null;
    steps?: number | null;
  };
  submissionTarget?: ('collection' | 'api' | 'none') | null;
  /**
   * Введите слаг коллекции, в которую будут сохраняться голоса.
   */
  submissionCollection?: string | null;
  /**
   * (Опционально) Введите слаг коллекции для отображения агрегированных результатов.
   */
  targetCollection?: string | null;
  collectionSettings?: {
    associateWithUser?: boolean | null;
    trackIndividualVotes?: boolean | null;
  };
  apiSettings?: {
    submitUrl: string;
    resultsUrl?: string | null;
    method?: ('POST' | 'PUT') | null;
    headers?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
  };
  settings?: {
    showResults?: ('afterVoting' | 'always' | 'never' | 'onEndDate') | null;
    resultsDisplayType?: ('percentage' | 'count' | 'progressBar') | null;
    /**
     * Обычно требует авторизации пользователя
     */
    allowMultipleVotes?: boolean | null;
    requireLogin?: boolean | null;
    /**
     * Опрос будет закрыт после этой даты
     */
    endDate?: string | null;
    closedMessage?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Дополнительные стили для блока опроса
     */
    customCSS?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'poll';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AiAssistantBlock".
 */
export interface AiAssistantBlock {
  /**
   * Основной заголовок блока ИИ-ассистента
   */
  heading?: string | null;
  /**
   * Краткое описание или приветствие
   */
  subheading?: string | null;
  appearance?: ('chatBubble' | 'inlineWidget' | 'fullScreenChat') | null;
  assistantType: 'openai' | 'gemini' | 'huggingface' | 'customApi' | 'predefined';
  apiSettings?: {
    apiUrl: string;
    apiKey?: string | null;
    /**
     * Например, gpt-4, gemini-pro и т.д.
     */
    modelName?: string | null;
    maxTokens?: number | null;
    /**
     * Контролирует случайность ответа (0 - детерминированный, 1 - случайный)
     */
    temperature?: number | null;
    customHeaders?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
  };
  predefinedResponses?:
    | {
        userQuery: string;
        response: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  initialMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  promptSuggestions?:
    | {
        suggestion: string;
        id?: string | null;
      }[]
    | null;
  avatar?: (string | null) | Media;
  placeholderText?: string | null;
  enableHistory?: boolean | null;
  enableVoiceInput?: boolean | null;
  enableVoiceOutput?: boolean | null;
  settings?: {
    contextAwareness?: boolean | null;
    language?: ('ru' | 'en' | 'auto') | null;
    /**
     * Основной цвет для элементов интерфейса чата
     */
    themeColor?: string | null;
    requireLogin?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'aiAssistant';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LeadMagnetOfferBlock".
 */
export interface LeadMagnetOfferBlock {
  /**
   * Например: "Получите бесплатный гайд по ChatGPT"
   */
  heading: string;
  subheading?: string | null;
  /**
   * Что получит пользователь?
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  image?: (string | null) | Media;
  formFields?:
    | {
        fieldName: string;
        label: string;
        fieldType: 'text' | 'email' | 'tel' | 'number' | 'hidden' | 'checkbox';
        placeholder?: string | null;
        required?: boolean | null;
        consentText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  submitButtonLabel: string;
  submissionTarget?: ('collection' | 'email' | 'api') | null;
  submissionSettings: {
    /**
     * Введите слаг коллекции, в которую будут сохраняться данные формы (например, 'leads').
     */
    targetCollection: string;
  };
  emailSettings?: {
    recipientEmail: string;
    subject?: string | null;
  };
  apiSettings?: {
    apiUrl: string;
  };
  successAction?: ('message' | 'redirect' | 'download') | null;
  successMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirectUrl?: string | null;
  downloadFile?: (string | null) | Media;
  layout?: ('imageLeft' | 'imageRight' | 'imageTop' | 'formOnly') | null;
  backgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'leadMagnetOffer';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DiscussionForumBlock".
 */
export interface DiscussionForumBlock {
  blockTitle?: string | null;
  /**
   * Выберите, какие темы показывать. Логика получения данных реализуется на фронтенде.
   */
  forumSourceType?: ('latestTopics' | 'categoryTopics') | null;
  /**
   * Выберите категорию, из которой показывать темы.
   */
  forumCategory?: (string | null) | ForumCategory;
  topicLimit?: number | null;
  displayOptions?: {
    showAuthor?: boolean | null;
    showReplyCount?: boolean | null;
    showLastActivity?: boolean | null;
  };
  viewForumLink: {
    type?: ('reference' | 'custom') | null;
    label: string;
    reference?: (string | null) | Page;
    url?: string | null;
  };
  newTopicLink: {
    type?: ('reference' | 'custom') | null;
    label: string;
    reference?: (string | null) | Page;
    url?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'discussionForum';
}
/**
 * Категории для организации тем на форуме.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forum-categories".
 */
export interface ForumCategory {
  id: string;
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InteractiveDemoBlock".
 */
export interface InteractiveDemoBlock {
  /**
   * Основной заголовок блока интерактивной демонстрации
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание демонстрации
   */
  subheading?: string | null;
  /**
   * Общее описание демонстрации ИИ-решения
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  demoType?:
    | (
        | 'chat'
        | 'generation'
        | 'analysis'
        | 'image-recognition'
        | 'text-classification'
        | 'translation'
        | 'api-integration'
        | 'custom'
      )
    | null;
  /**
   * Предварительно настроенные примеры для тестирования
   */
  demoSamples?:
    | {
        title: string;
        description?: string | null;
        /**
         * Подсказка в поле ввода для пользователя
         */
        inputPlaceholder?: string | null;
        /**
         * Предзаполненный текст для примера
         */
        defaultInput?: string | null;
        /**
         * Иллюстрация для примера (если применимо)
         */
        image?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  interactiveOptions?: {
    allowUserInput?: boolean | null;
    showLoadingState?: boolean | null;
    maxInputLength?: number | null;
    /**
     * Искусственная задержка перед отображением ответа (0 - без задержки)
     */
    responseDelay?: number | null;
    /**
     * Использовать предопределенные ответы вместо реального API
     */
    simulatedResponse?: boolean | null;
  };
  /**
   * Настройки для подключения к реальному API
   */
  apiSettings?: {
    apiType?: ('openai' | 'huggingface' | 'custom') | null;
    /**
     * URL API для обработки запросов
     */
    endpointUrl?: string | null;
    /**
     * Название используемой модели (если применимо)
     */
    modelName?: string | null;
    /**
     * Дополнительные параметры заголовка запроса
     */
    headerParams?:
      | {
          key: string;
          value: string;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Ответы для симуляции работы ИИ
   */
  simulatedResponses?:
    | {
        /**
         * Текст запроса или регулярное выражение для сопоставления
         */
        inputPattern?: string | null;
        response: string;
        id?: string | null;
      }[]
    | null;
  uiOptions?: {
    theme?: ('light' | 'dark' | 'system') | null;
    layout?: ('split' | 'fullscreen' | 'cards' | 'tabs') | null;
    showInputControls?: boolean | null;
    showExampleSelector?: boolean | null;
    avatarImage?: (string | null) | Media;
    assistantName?: string | null;
  };
  cta?: {
    enabled?: boolean | null;
    text?: string | null;
    url?: string | null;
    style?: ('primary' | 'secondary' | 'outline') | null;
  };
  settings?: {
    backgroundColor?: ('transparent' | 'light' | 'dark' | 'accent') | null;
    paddingTop?: ('none' | 'small' | 'medium' | 'large') | null;
    paddingBottom?: ('none' | 'small' | 'medium' | 'large') | null;
    containerWidth?: ('default' | 'narrow' | 'wide' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'interactiveDemo';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CalendarBlock".
 */
export interface CalendarBlock {
  /**
   * Основной заголовок блока календаря событий
   */
  heading?: string | null;
  /**
   * Подзаголовок или краткое описание блока
   */
  subheading?: string | null;
  /**
   * Общее описание раздела с событиями
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  displayType?: ('list' | 'calendar' | 'grid' | 'timeline') | null;
  eventsSource?: ('manual' | 'collection' | 'api') | null;
  collectionSettings?: {
    /**
     * Название коллекции с событиями
     */
    targetCollection?: string | null;
    limit?: number | null;
    sortField?: string | null;
    sortDirection?: ('asc' | 'desc') | null;
  };
  apiSettings?: {
    /**
     * URL для получения событий (напр. Google Calendar API)
     */
    apiUrl: string;
    /**
     * Ключ для доступа к API (если требуется)
     */
    apiKey?: string | null;
    refreshInterval?: number | null;
  };
  /**
   * Список событий для отображения
   */
  events?:
    | {
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        startDate: string;
        endDate?: string | null;
        location?: {
          type?: ('online' | 'offline' | 'hybrid') | null;
          address?: string | null;
          onlineLink?: string | null;
        };
        image?: (string | null) | Media;
        category?: ('webinar' | 'conference' | 'workshop' | 'meetup' | 'hackathon' | 'other') | null;
        registrationLink?: string | null;
        isFeatured?: boolean | null;
        status?: ('upcoming' | 'registration' | 'past' | 'cancelled') | null;
        speakers?:
          | {
              name: string;
              position?: string | null;
              company?: string | null;
              bio?: string | null;
              photo?: (string | null) | Media;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  settings?: {
    showPastEvents?: boolean | null;
    maxEventsToShow?: number | null;
    enableFiltering?: boolean | null;
    enableSearch?: boolean | null;
    enableCalendarExport?: boolean | null;
    showCountdown?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'calendar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventTrackerBlock".
 */
export interface EventTrackerBlock {
  /**
   * Название события, как оно будет отображаться в системе аналитики (например, "click_cta_button", "form_submission_success").
   */
  eventName: string;
  analyticsSystem?: ('ga4' | 'yandexMetrika' | 'mixpanel' | 'amplitude' | 'customDataLayer' | 'other') | null;
  /**
   * Условие, при котором будет отправлено событие.
   */
  trigger?: ('click' | 'view' | 'formSuccess' | 'customJS') | null;
  /**
   * Например: "#buy-button", ".cta-section a". Событие будет привязано к этому элементу.
   */
  targetSelector?: string | null;
  /**
   * Имя события, которое будет инициировано в коде фронтенда.
   */
  customEventNameJS?: string | null;
  /**
   * Дополнительные данные, передаваемые вместе с событием.
   */
  eventParameters?:
    | {
        paramName: string;
        paramValueType?: ('static' | 'dataAttribute' | 'jsVariable') | null;
        paramValue: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Любая дополнительная информация об этом трекере.
   */
  notes?: string | null;
  isEnabled?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'eventTracker';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ReportEmbedBlock".
 */
export interface ReportEmbedBlock {
  /**
   * Например: "Статистика регистраций", "Отчет по продажам"
   */
  title?: string | null;
  description?: string | null;
  /**
   * Выберите способ встраивания отчета.
   */
  embedType?: ('iframe' | 'htmlCode') | null;
  /**
   * Вставьте полный HTML код, предоставленный сервисом аналитики.
   */
  htmlCode?: string | null;
  /**
   * Задайте высоту для iframe или контейнера.
   */
  height?: number | null;
  enableScrolling?: boolean | null;
  notes?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'reportEmbed';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ChatBlock".
 */
export interface ChatBlock {
  /**
   * Основной заголовок блока чата
   */
  heading?: string | null;
  /**
   * Краткое описание или приветствие
   */
  subheading?: string | null;
  /**
   * Подробное описание блока чата
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  webhookSettings?: {
    /**
     * Выберите способ настройки вебхука
     */
    webhookSource?: ('collection' | 'manual') | null;
    /**
     * Выберите настроенный вебхук из коллекции интеграций
     */
    webhook?: (string | null) | Integration;
    /**
     * URL вебхука для отправки сообщений
     */
    webhookUrl?: string | null;
    /**
     * Секретный ключ для аутентификации запросов (опционально)
     */
    webhookSecret?: string | null;
    /**
     * Максимальное время ожидания ответа в миллисекундах
     */
    timeout?: number | null;
  };
  chatSettings?: {
    initialMessage?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    placeholderText?: string | null;
    botName?: string | null;
    botAvatar?: (string | null) | Media;
    userAvatar?: (string | null) | Media;
  };
  promptSuggestions?:
    | {
        text: string;
        /**
         * Дополнительная информация о подсказке (отображается при наведении)
         */
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Ответы, которые будут использованы, если сервер не ответит или произойдет ошибка
   */
  fallbackResponses?:
    | {
        response: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  appearance?: {
    theme?: ('light' | 'dark' | 'system') | null;
    primaryColor?: string | null;
    chatHeight?: number | null;
    maxWidth?: number | null;
    borderRadius?: ('none' | 'small' | 'medium' | 'large') | null;
    showTimestamps?: boolean | null;
  };
  calendlySettings?: {
    /**
     * Показывать виджет Calendly в чате при запросе на бронирование
     */
    enableCalendly?: boolean | null;
    /**
     * Выберите способ настройки Calendly
     */
    calendlySource?: ('collection' | 'manual') | null;
    /**
     * Выберите настройки Calendly из коллекции
     */
    calendlySettingId?: (string | null) | CalendlySetting;
    /**
     * Ваш username в Calendly (часть URL после calendly.com/)
     */
    username?: string | null;
    /**
     * Slug типа события в Calendly (часть URL после username)
     */
    eventType?: string | null;
    /**
     * Скрыть детали типа события в виджете Calendly
     */
    hideEventTypeDetails?: boolean | null;
    /**
     * Скрыть баннер GDPR в виджете Calendly
     */
    hideGdprBanner?: boolean | null;
    /**
     * Слова, при наличии которых в сообщении пользователя будет предложено бронирование
     */
    bookingTriggerWords?:
      | {
          word: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Сообщение, которое будет показано перед виджетом Calendly
     */
    bookingResponseMessage?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Показывать кнопку для отправки запроса на бронирование
     */
    showCalendlyButton?: boolean | null;
    /**
     * Текст, который будет отображаться на кнопке бронирования
     */
    buttonText?: string | null;
  };
  advancedSettings?: {
    enableHistory?: boolean | null;
    maxMessages?: number | null;
    /**
     * Отправлять дополнительные данные о пользователе и странице
     */
    sendMetadata?: boolean | null;
    /**
     * Показывать отладочную информацию в консоли
     */
    debugMode?: boolean | null;
    /**
     * Использовать тестовые ответы без отправки запросов на сервер
     */
    testMode?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'chat';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrations".
 */
export interface Integration {
  id: string;
  name: string;
  description?: string | null;
  type: 'webhook' | 'email' | 'crm' | 'custom';
  status: 'active' | 'inactive';
  webhookUrl?: string | null;
  /**
   * API key for authentication
   */
  apiKey?: string | null;
  triggers: {
    event: 'order.created' | 'order.updated' | 'payment.received' | 'user.registered' | 'form.submitted';
    conditions?:
      | {
          field: string;
          operator: 'eq' | 'ne' | 'gt' | 'lt' | 'contains';
          value: string;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  actions: {
    type: 'http' | 'email';
    config?: {
      url?: string | null;
      method?: ('GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE') | null;
      headers?:
        | {
            [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
      body?:
        | {
            [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
      to?: string | null;
      from?: string | null;
      subject?: string | null;
      emailBody?: string | null;
    };
    id?: string | null;
  }[];
  lastSync?: string | null;
  lastSyncStatus?: ('success' | 'error') | null;
  lastError?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "calendly-settings".
 */
export interface CalendlySetting {
  id: string;
  /**
   * Понятное название для идентификации настроек Calendly
   */
  name: string;
  /**
   * Краткое описание назначения этих настроек
   */
  description?: string | null;
  /**
   * Ваш username в Calendly (часть URL после calendly.com/)
   */
  username: string;
  /**
   * Slug типа события в Calendly (часть URL после username)
   */
  eventType: string;
  /**
   * Скрыть детали типа события в виджете Calendly
   */
  hideEventTypeDetails?: boolean | null;
  /**
   * Скрыть баннер GDPR в виджете Calendly
   */
  hideGdprBanner?: boolean | null;
  isActive?: boolean | null;
  owner?: (string | null) | User;
  lastUsed?: string | null;
  /**
   * URL для получения уведомлений о новых бронированиях
   */
  webhookUrl?: string | null;
  /**
   * Секретный ключ для проверки подлинности запросов от Calendly
   */
  webhookSecret?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Quizzes and assignments linked to lessons.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assessments".
 */
export interface Assessment {
  id: string;
  title: string;
  description?: string | null;
  type: 'quiz' | 'assignment';
  /**
   * The lesson this assessment belongs to.
   */
  lesson?: (string | null) | Lesson;
  /**
   * Minimum score required to pass (0-100).
   */
  passingScore?: number | null;
  submissionInstructions?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Maximum number of attempts allowed (0 for unlimited).
   */
  maxAttempts?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Коллекция для уроков внутри модулей курсов.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  status?: ('draft' | 'published') | null;
  /**
   * Когда этот урок станет доступен студентам.
   */
  dripContent: {
    dripType: 'immediate' | 'daysAfterEnrollment' | 'specificDate';
    dripDelayDays?: number | null;
    releaseDate?: string | null;
  };
  /**
   * Рассчитывается автоматически на основе настроек Drip Content.
   */
  availableOn?: string | null;
  module: string | Module;
  description?: string | null;
  layout: (
    | ContentBlock
    | CallToActionBlock
    | UrgencyCTABlock
    | HeroBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Список фич
         */
        features: {
          title: string;
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Имя иконки из коллекции
           */
          icon?: string | null;
          id?: string | null;
        }[];
        layout?: ('grid' | 'list' | 'carousel') | null;
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'features';
      }
    | {
        blockName?: string | null;
        /**
         * Стиль разделителя
         */
        style?: ('solid' | 'dashed' | 'dotted') | null;
        /**
         * Ширина разделителя
         */
        width?: ('narrow' | 'medium' | 'wide' | 'full') | null;
        /**
         * Внешний отступ
         */
        spacing?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'divider';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Шаги процесса
         */
        steps: {
          /**
           * Заголовок шага
           */
          title: string;
          /**
           * Описание шага
           */
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Имя иконки из коллекции (опционально)
           */
          icon?: string | null;
          /**
           * Изображение или видео (опционально)
           */
          media?: (string | null) | Media;
          id?: string | null;
        }[];
        /**
         * Стиль отображения шагов
         */
        layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
        /**
         * Показывать номера шагов
         */
        showNumbers?: boolean | null;
        /**
         * Показывать соединительные линии
         */
        showLines?: boolean | null;
        id?: string | null;
        blockType: 'steps';
      }
    | {
        blockName?: string | null;
        /**
         * Добавьте элементы аккордеона
         */
        items: {
          /**
           * Заголовок элемента
           */
          label: string;
          /**
           * Содержимое элемента
           */
          content: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          /**
           * Вложенные элементы (опционально)
           */
          items?:
            | {
                label: string;
                content: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        /**
         * Выберите стиль отображения
         */
        style?: ('default' | 'separated' | 'boxed') | null;
        /**
         * Выберите размер
         */
        size?: ('sm' | 'md' | 'lg') | null;
        /**
         * Выберите вариант отображения
         */
        variant?: ('default' | 'separated' | 'boxed') | null;
        /**
         * Разрешить открытие нескольких элементов одновременно
         */
        allowMultiple?: boolean | null;
        /**
         * Индексы элементов, открытых по умолчанию (начиная с 0)
         */
        defaultOpen?:
          | {
              /**
               * Индекс элемента
               */
              index: number;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockType: 'accordion';
      }
    | CardBlock
    | MediaBlock
    | CodeBlock
    | {
        blockName?: string | null;
        /**
         * Выберите тип видео
         */
        videoType: 'youtube' | 'vimeo' | 'rutube' | 'vk' | 'mp4';
        /**
         * ID видео (для YouTube, Vimeo, RuTube, VK)
         */
        videoId?: string | null;
        /**
         * URL видео (опционально)
         */
        videoUrl?: string | null;
        /**
         * Загрузите MP4 файл
         */
        videoFile?: (string | null) | Media;
        /**
         * Превью изображение для видео
         */
        poster?: (string | null) | Media;
        /**
         * Соотношение сторон видео
         */
        aspectRatio?: ('16/9' | '4/3' | '1/1' | '9/16') | null;
        /**
         * Автоматическое воспроизведение
         */
        autoPlay?: boolean | null;
        /**
         * Без звука по умолчанию
         */
        muted?: boolean | null;
        /**
         * Зациклить воспроизведение
         */
        loop?: boolean | null;
        /**
         * Показывать элементы управления
         */
        controls?: boolean | null;
        /**
         * Подпись к видео
         */
        caption?: string | null;
        /**
         * Стиль отображения
         */
        style?: ('default' | 'shadow' | 'bordered') | null;
        /**
         * Размер блока
         */
        size?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'video';
      }
    | AudioBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока (опционально)
         */
        heading?: string | null;
        /**
         * Подзаголовок (опционально)
         */
        subheading?: string | null;
        /**
         * Описание карусели (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Элементы карусели
         */
        items: {
          /**
           * Изображение или видео
           */
          media: string | Media;
          /**
           * Заголовок элемента (опционально)
           */
          heading?: string | null;
          /**
           * Подпись к элементу (опционально)
           */
          caption?: string | null;
          /**
           * Текстовое содержимое (опционально)
           */
          content?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Кнопки или ссылки (опционально)
           */
          actions?:
            | {
                label: string;
                url: string;
                style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
                /**
                 * Открыть в новой вкладке
                 */
                newTab?: boolean | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        /**
         * Автоматическое прокручивание карусели
         */
        autoplay?: boolean | null;
        /**
         * Интервал прокрутки в миллисекундах
         */
        interval?: number | null;
        /**
         * Показывать кнопки управления
         */
        showControls?: boolean | null;
        /**
         * Показывать индикаторы слайдов
         */
        showIndicators?: boolean | null;
        id?: string | null;
        blockType: 'carousel';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок галереи (опционально)
         */
        heading?: string | null;
        /**
         * Изображения для галереи
         */
        items: {
          /**
           * Выберите изображение
           */
          media: string | Media;
          /**
           * Подпись к изображению (опционально)
           */
          caption?: string | null;
          id?: string | null;
        }[];
        /**
         * Выберите тип отображения
         */
        layout?: ('grid' | 'masonry' | 'carousel') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        /**
         * Расстояние между изображениями
         */
        spacing?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'gallery';
      }
    | VideoLessonsBlock
    | BannerBlock
    | FAQBlock
    | CourseFAQBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Тарифные планы
         */
        plans: {
          /**
           * Название тарифа
           */
          name: string;
          /**
           * Цена (например, "9900" или "Бесплатно")
           */
          price: string;
          /**
           * Интервал оплаты (например, "/месяц", "/год")
           */
          interval?: string | null;
          /**
           * Краткое описание тарифа
           */
          description?: string | null;
          /**
           * Список функций
           */
          features?:
            | {
                text: string;
                /**
                 * Функция включена в тариф
                 */
                included?: boolean | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Отметить как популярный тариф
           */
          isPopular?: boolean | null;
          /**
           * Кнопки
           */
          actions?:
            | {
                label: string;
                url: string;
                style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        layout?: ('default' | 'grid' | 'compact') | null;
        id?: string | null;
        blockType: 'pricingTable';
      }
    | CoursePricingComparisonBlock
    | StatsBlock
    | TabsBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * События таймлайна
         */
        items: {
          /**
           * Заголовок события
           */
          title: string;
          /**
           * Дата события (текстовый формат, например "Июнь 2023")
           */
          date?: string | null;
          /**
           * Описание события
           */
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Изображение для события (опционально)
           */
          media?: (string | null) | Media;
          id?: string | null;
        }[];
        /**
         * Стиль отображения таймлайна
         */
        layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
        /**
         * Показывать даты
         */
        showDates?: boolean | null;
        /**
         * Показывать соединительные линии
         */
        showLines?: boolean | null;
        id?: string | null;
        blockType: 'timeline';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока (опционально)
         */
        title?: string | null;
        /**
         * Автоматически генерировать оглавление на основе заголовков страницы
         */
        autoGenerate?: boolean | null;
        /**
         * Элементы оглавления (используется, если автогенерация отключена)
         */
        items?:
          | {
              /**
               * Текст пункта оглавления
               */
              title: string;
              /**
               * Якорь (ID элемента, например "about-section")
               */
              anchor: string;
              /**
               * Уровень вложенности
               */
              level?: (1 | 2 | 3) | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Фиксировать оглавление при прокрутке
         */
        sticky?: boolean | null;
        /**
         * Показывать нумерацию пунктов
         */
        showNumbers?: boolean | null;
        /**
         * Максимальный уровень заголовков для отображения
         */
        maxDepth?: (1 | 2 | 3) | null;
        id?: string | null;
        blockType: 'tableOfContents';
      }
    | RoadmapBlock
    | BenefitsOutcomesBlock
    | TargetAudienceBlock
    | GuaranteeBlock
    | SocialProofAdvancedBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Члены команды
         */
        members: {
          /**
           * Имя участника команды
           */
          name: string;
          /**
           * Должность или роль
           */
          role?: string | null;
          /**
           * Краткая биография (опционально)
           */
          bio?: string | null;
          /**
           * Фото участника команды
           */
          avatar?: (string | null) | Media;
          /**
           * Ссылки на социальные сети (опционально)
           */
          social?: {
            /**
             * Ссылка на Twitter
             */
            twitter?: string | null;
            /**
             * Ссылка на LinkedIn
             */
            linkedin?: string | null;
            /**
             * Ссылка на GitHub
             */
            github?: string | null;
            /**
             * Ссылка на персональный сайт
             */
            website?: string | null;
          };
          id?: string | null;
        }[];
        /**
         * Стиль отображения
         */
        layout?: ('grid' | 'list') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'teamMembers';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Список отзывов
         */
        items: {
          /**
           * Имя автора отзыва
           */
          author: string;
          /**
           * Должность или роль автора (опционально)
           */
          role?: string | null;
          /**
           * Название компании автора (опционально)
           */
          company?: string | null;
          /**
           * Фото автора (опционально)
           */
          avatar?: (string | null) | Media;
          /**
           * Текст отзыва
           */
          content: string;
          /**
           * Рейтинг (опционально)
           */
          rating?: (1 | 2 | 3 | 4 | 5) | null;
          id?: string | null;
        }[];
        /**
         * Стиль отображения отзывов
         */
        layout?: ('grid' | 'carousel' | 'featured') | null;
        /**
         * Стиль отображения
         */
        style?: ('card' | 'minimal' | 'quote') | null;
        id?: string | null;
        blockType: 'testimonials';
      }
    | InstructorProfileBlock
    | HeaderBlock
    | FooterBlock
    | ServicesBlock
    | CaseStudiesBlock
    | TechStackBlock
    | PlansComparisonBlock
    | CourseBlock
    | CurriculumBlock
    | UserProgressBlock
    | CertificatesBlock
    | ResourceLibraryBlock
    | AiToolsBlock
    | LeaderboardBlock
    | CourseOverviewBlock
    | QuizAssessmentBlock
    | AssignmentsBlock
    | AchievementsBlockType
    | ProjectShowcaseBlock
    | FunnelStepBlock
    | RecommendationsBlock
    | PopupTriggerConfigBlock
    | ProductsFilterBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Выберите продукты для отображения
         */
        products?: (string | Product)[] | null;
        /**
         * Использовать динамический источник продуктов
         */
        enableDynamicSource?: boolean | null;
        /**
         * Источник продуктов
         */
        source?: ('new' | 'popular' | 'sale' | 'featured') | null;
        /**
         * Максимальное количество продуктов
         */
        limit?: number | null;
        /**
         * Включить фильтрацию продуктов
         */
        enableFiltering?: boolean | null;
        /**
         * Стиль отображения продуктов
         */
        layout?: ('grid' | 'list' | 'carousel') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'productsList';
      }
    | FormBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока подписки
         */
        heading?: string | null;
        /**
         * Описание блока подписки
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Текст кнопки подписки
         */
        buttonText?: string | null;
        layout?: ('default' | 'compact' | 'withImage') | null;
        /**
         * Изображение для блока (опционально)
         */
        image?: (string | null) | Media;
        /**
         * Placeholder для поля ввода email
         */
        placeholder?: string | null;
        /**
         * Сообщение об успешной подписке
         */
        successMessage?: string | null;
        id?: string | null;
        blockType: 'newsletter';
      }
    | FeedbackBlock
    | PollBlock
    | AiAssistantBlock
    | LeadMagnetOfferBlock
    | DiscussionForumBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок статьи
         */
        title: string;
        /**
         * Подзаголовок (опционально)
         */
        subtitle?: string | null;
        /**
         * Краткое описание статьи (опционально)
         */
        description?: string | null;
        /**
         * Обложка статьи
         */
        coverImage?: (string | null) | Media;
        /**
         * Дата публикации
         */
        publishDate?: string | null;
        /**
         * Информация об авторе
         */
        author: {
          /**
           * Имя автора
           */
          name: string;
          /**
           * Аватар автора (опционально)
           */
          avatar?: (string | null) | Media;
          /**
           * Должность автора (опционально)
           */
          role?: string | null;
        };
        /**
         * Категории статьи (опционально)
         */
        categories?:
          | {
              category: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Стиль отображения заголовка статьи
         */
        layout?: ('standard' | 'large' | 'minimal') | null;
        id?: string | null;
        blockType: 'articleHeader';
      }
    | {
        blockName?: string | null;
        /**
         * Информация об авторе
         */
        author: {
          /**
           * Имя автора
           */
          name: string;
          /**
           * Аватар автора
           */
          avatar?: (string | null) | Media;
          /**
           * Биография автора
           */
          bio?: string | null;
          /**
           * Должность автора
           */
          role?: string | null;
          /**
           * Название компании
           */
          company?: string | null;
          /**
           * Социальные сети
           */
          socialLinks?:
            | {
                /**
                 * Платформа
                 */
                platform: 'twitter' | 'facebook' | 'linkedin' | 'github' | 'instagram' | 'website';
                /**
                 * URL профиля
                 */
                url: string;
                id?: string | null;
              }[]
            | null;
        };
        /**
         * Стиль отображения
         */
        layout?: ('card' | 'inline') | null;
        id?: string | null;
        blockType: 'authorBio';
      }
    | {
        blockName?: string | null;
        /**
         * Текст цитаты
         */
        quote: string;
        /**
         * Автор цитаты (опционально)
         */
        author?: string | null;
        /**
         * Источник цитаты или должность автора (опционально)
         */
        source?: string | null;
        /**
         * Изображение автора (опционально)
         */
        avatar?: (string | null) | Media;
        /**
         * Стиль оформления цитаты
         */
        style?: ('default' | 'highlight' | 'minimal') | null;
        /**
         * Выравнивание текста
         */
        align?: ('left' | 'center' | 'right') | null;
        id?: string | null;
        blockType: 'blockquote';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок секции комментариев
         */
        title?: string | null;
        /**
         * Система комментариев
         */
        provider?: ('native' | 'disqus' | 'facebook') | null;
        /**
         * Shortname для Disqus (если выбран Disqus)
         */
        disqusShortname?: string | null;
        /**
         * Facebook App ID (если выбран Facebook)
         */
        facebookAppId?: string | null;
        /**
         * Показывать количество комментариев
         */
        showCount?: boolean | null;
        /**
         * Количество комментариев на странице (для встроенных комментариев)
         */
        commentsPerPage?: number | null;
        /**
         * Разрешить ответы на комментарии
         */
        allowReplies?: boolean | null;
        /**
         * Требовать авторизацию для комментирования
         */
        requireAuth?: boolean | null;
        /**
         * Включить модерацию комментариев
         */
        moderationEnabled?: boolean | null;
        id?: string | null;
        blockType: 'comments';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок секции похожих статей
         */
        title?: string | null;
        /**
         * Метод выбора похожих статей
         */
        selectionMethod?: ('automatic' | 'manual') | null;
        /**
         * Выбрать статьи вручную
         */
        posts?: (string | Post)[] | null;
        /**
         * Максимальное количество статей для отображения
         */
        maxPosts?: number | null;
        /**
         * Критерии для автоматического подбора похожих статей
         */
        criteria?: ('category' | 'tags' | 'author' | 'popularity')[] | null;
        /**
         * Стиль отображения похожих статей
         */
        layout?: ('grid' | 'list' | 'carousel') | null;
        /**
         * Показывать обложку статьи
         */
        showFeaturedImage?: boolean | null;
        /**
         * Показывать краткое описание
         */
        showExcerpt?: boolean | null;
        /**
         * Показывать дату публикации
         */
        showDate?: boolean | null;
        /**
         * Показывать автора
         */
        showAuthor?: boolean | null;
        id?: string | null;
        blockType: 'relatedPosts';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        title?: string | null;
        /**
         * Выберите платформы для шеринга
         */
        platforms?:
          | (
              | 'x'
              | 'facebook'
              | 'linkedin'
              | 'pinterest'
              | 'vk'
              | 'instagram'
              | 'threads'
              | 'tenchat'
              | 'whatsapp'
              | 'telegram'
              | 'email'
              | 'copy'
            )[]
          | null;
        /**
         * Выберите расположение кнопок
         */
        layout?: ('horizontal' | 'vertical') | null;
        /**
         * Показывать количество шерингов (если поддерживается)
         */
        showShareCount?: boolean | null;
        id?: string | null;
        blockType: 'socialShare';
      }
    | InteractiveDemoBlock
    | CalendarBlock
    | EventTrackerBlock
    | ReportEmbedBlock
    | ChatBlock
  )[];
  type?: ('video' | 'text' | 'quiz' | 'assignment') | null;
  /**
   * Например: "30 минут" или "1 час"
   */
  duration?: string | null;
  /**
   * Порядковый номер урока в модуле
   */
  order?: number | null;
  /**
   * Связанная оценка, если тип урока "Тест" или "Задание".
   */
  assessment?: (string | null) | Assessment;
  /**
   * Уроки, которые должны быть завершены перед началом этого.
   */
  prerequisites?: (string | Lesson)[] | null;
  /**
   * Как определяется, что урок завершен.
   */
  completionCriteria: 'viewed' | 'pass_assessment';
  /**
   * Файлы, прикрепленные к уроку
   */
  attachments?:
    | {
        title: string;
        file: string | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "features".
 */
export interface Features {
  blockName?: string | null;
  /**
   * Заголовок блока
   */
  heading?: string | null;
  /**
   * Описание блока (опционально)
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Список фич
   */
  features: {
    title: string;
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Имя иконки из коллекции
     */
    icon?: string | null;
    id?: string | null;
  }[];
  layout?: ('grid' | 'list' | 'carousel') | null;
  columns?: (2 | 3 | 4) | null;
  id?: string | null;
  blockType: 'features';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "divider".
 */
export interface Divider {
  blockName?: string | null;
  /**
   * Стиль разделителя
   */
  style?: ('solid' | 'dashed' | 'dotted') | null;
  /**
   * Ширина разделителя
   */
  width?: ('narrow' | 'medium' | 'wide' | 'full') | null;
  /**
   * Внешний отступ
   */
  spacing?: ('sm' | 'md' | 'lg') | null;
  id?: string | null;
  blockType: 'divider';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "steps".
 */
export interface Steps {
  blockName?: string | null;
  /**
   * Заголовок блока
   */
  heading?: string | null;
  /**
   * Описание блока (опционально)
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Шаги процесса
   */
  steps: {
    /**
     * Заголовок шага
     */
    title: string;
    /**
     * Описание шага
     */
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Имя иконки из коллекции (опционально)
     */
    icon?: string | null;
    /**
     * Изображение или видео (опционально)
     */
    media?: (string | null) | Media;
    id?: string | null;
  }[];
  /**
   * Стиль отображения шагов
   */
  layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
  /**
   * Показывать номера шагов
   */
  showNumbers?: boolean | null;
  /**
   * Показывать соединительные линии
   */
  showLines?: boolean | null;
  id?: string | null;
  blockType: 'steps';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accordion".
 */
export interface Accordion {
  blockName?: string | null;
  /**
   * Добавьте элементы аккордеона
   */
  items: {
    /**
     * Заголовок элемента
     */
    label: string;
    /**
     * Содержимое элемента
     */
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    /**
     * Вложенные элементы (опционально)
     */
    items?:
      | {
          label: string;
          content: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  /**
   * Выберите стиль отображения
   */
  style?: ('default' | 'separated' | 'boxed') | null;
  /**
   * Выберите размер
   */
  size?: ('sm' | 'md' | 'lg') | null;
  /**
   * Выберите вариант отображения
   */
  variant?: ('default' | 'separated' | 'boxed') | null;
  /**
   * Разрешить открытие нескольких элементов одновременно
   */
  allowMultiple?: boolean | null;
  /**
   * Индексы элементов, открытых по умолчанию (начиная с 0)
   */
  defaultOpen?:
    | {
        /**
         * Индекс элемента
         */
        index: number;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockType: 'accordion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "video".
 */
export interface Video {
  blockName?: string | null;
  /**
   * Выберите тип видео
   */
  videoType: 'youtube' | 'vimeo' | 'rutube' | 'vk' | 'mp4';
  /**
   * ID видео (для YouTube, Vimeo, RuTube, VK)
   */
  videoId?: string | null;
  /**
   * URL видео (опционально)
   */
  videoUrl?: string | null;
  /**
   * Загрузите MP4 файл
   */
  videoFile?: (string | null) | Media;
  /**
   * Превью изображение для видео
   */
  poster?: (string | null) | Media;
  /**
   * Соотношение сторон видео
   */
  aspectRatio?: ('16/9' | '4/3' | '1/1' | '9/16') | null;
  /**
   * Автоматическое воспроизведение
   */
  autoPlay?: boolean | null;
  /**
   * Без звука по умолчанию
   */
  muted?: boolean | null;
  /**
   * Зациклить воспроизведение
   */
  loop?: boolean | null;
  /**
   * Показывать элементы управления
   */
  controls?: boolean | null;
  /**
   * Подпись к видео
   */
  caption?: string | null;
  /**
   * Стиль отображения
   */
  style?: ('default' | 'shadow' | 'bordered') | null;
  /**
   * Размер блока
   */
  size?: ('sm' | 'md' | 'lg') | null;
  id?: string | null;
  blockType: 'video';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carousel".
 */
export interface Carousel {
  blockName?: string | null;
  /**
   * Заголовок блока (опционально)
   */
  heading?: string | null;
  /**
   * Подзаголовок (опционально)
   */
  subheading?: string | null;
  /**
   * Описание карусели (опционально)
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Элементы карусели
   */
  items: {
    /**
     * Изображение или видео
     */
    media: string | Media;
    /**
     * Заголовок элемента (опционально)
     */
    heading?: string | null;
    /**
     * Подпись к элементу (опционально)
     */
    caption?: string | null;
    /**
     * Текстовое содержимое (опционально)
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Кнопки или ссылки (опционально)
     */
    actions?:
      | {
          label: string;
          url: string;
          style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
          /**
           * Открыть в новой вкладке
           */
          newTab?: boolean | null;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  /**
   * Автоматическое прокручивание карусели
   */
  autoplay?: boolean | null;
  /**
   * Интервал прокрутки в миллисекундах
   */
  interval?: number | null;
  /**
   * Показывать кнопки управления
   */
  showControls?: boolean | null;
  /**
   * Показывать индикаторы слайдов
   */
  showIndicators?: boolean | null;
  id?: string | null;
  blockType: 'carousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery".
 */
export interface Gallery {
  blockName?: string | null;
  /**
   * Заголовок галереи (опционально)
   */
  heading?: string | null;
  /**
   * Изображения для галереи
   */
  items: {
    /**
     * Выберите изображение
     */
    media: string | Media;
    /**
     * Подпись к изображению (опционально)
     */
    caption?: string | null;
    id?: string | null;
  }[];
  /**
   * Выберите тип отображения
   */
  layout?: ('grid' | 'masonry' | 'carousel') | null;
  /**
   * Количество колонок
   */
  columns?: (2 | 3 | 4) | null;
  /**
   * Расстояние между изображениями
   */
  spacing?: ('sm' | 'md' | 'lg') | null;
  id?: string | null;
  blockType: 'gallery';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingTable".
 */
export interface PricingTable {
  blockName?: string | null;
  /**
   * Заголовок блока
   */
  heading?: string | null;
  /**
   * Описание (опционально)
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Тарифные планы
   */
  plans: {
    /**
     * Название тарифа
     */
    name: string;
    /**
     * Цена (например, "9900" или "Бесплатно")
     */
    price: string;
    /**
     * Интервал оплаты (например, "/месяц", "/год")
     */
    interval?: string | null;
    /**
     * Краткое описание тарифа
     */
    description?: string | null;
    /**
     * Список функций
     */
    features?:
      | {
          text: string;
          /**
           * Функция включена в тариф
           */
          included?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Отметить как популярный тариф
     */
    isPopular?: boolean | null;
    /**
     * Кнопки
     */
    actions?:
      | {
          label: string;
          url: string;
          style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  layout?: ('default' | 'grid' | 'compact') | null;
  id?: string | null;
  blockType: 'pricingTable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "timeline".
 */
export interface Timeline {
  blockName?: string | null;
  /**
   * Заголовок блока
   */
  heading?: string | null;
  /**
   * Описание блока (опционально)
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * События таймлайна
   */
  items: {
    /**
     * Заголовок события
     */
    title: string;
    /**
     * Дата события (текстовый формат, например "Июнь 2023")
     */
    date?: string | null;
    /**
     * Описание события
     */
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Изображение для события (опционально)
     */
    media?: (string | null) | Media;
    id?: string | null;
  }[];
  /**
   * Стиль отображения таймлайна
   */
  layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
  /**
   * Показывать даты
   */
  showDates?: boolean | null;
  /**
   * Показывать соединительные линии
   */
  showLines?: boolean | null;
  id?: string | null;
  blockType: 'timeline';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tableOfContents".
 */
export interface TableOfContents {
  blockName?: string | null;
  /**
   * Заголовок блока (опционально)
   */
  title?: string | null;
  /**
   * Автоматически генерировать оглавление на основе заголовков страницы
   */
  autoGenerate?: boolean | null;
  /**
   * Элементы оглавления (используется, если автогенерация отключена)
   */
  items?:
    | {
        /**
         * Текст пункта оглавления
         */
        title: string;
        /**
         * Якорь (ID элемента, например "about-section")
         */
        anchor: string;
        /**
         * Уровень вложенности
         */
        level?: (1 | 2 | 3) | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Фиксировать оглавление при прокрутке
   */
  sticky?: boolean | null;
  /**
   * Показывать нумерацию пунктов
   */
  showNumbers?: boolean | null;
  /**
   * Максимальный уровень заголовков для отображения
   */
  maxDepth?: (1 | 2 | 3) | null;
  id?: string | null;
  blockType: 'tableOfContents';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teamMembers".
 */
export interface TeamMembers {
  blockName?: string | null;
  /**
   * Заголовок блока
   */
  heading?: string | null;
  /**
   * Описание блока (опционально)
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Члены команды
   */
  members: {
    /**
     * Имя участника команды
     */
    name: string;
    /**
     * Должность или роль
     */
    role?: string | null;
    /**
     * Краткая биография (опционально)
     */
    bio?: string | null;
    /**
     * Фото участника команды
     */
    avatar?: (string | null) | Media;
    /**
     * Ссылки на социальные сети (опционально)
     */
    social?: {
      /**
       * Ссылка на Twitter
       */
      twitter?: string | null;
      /**
       * Ссылка на LinkedIn
       */
      linkedin?: string | null;
      /**
       * Ссылка на GitHub
       */
      github?: string | null;
      /**
       * Ссылка на персональный сайт
       */
      website?: string | null;
    };
    id?: string | null;
  }[];
  /**
   * Стиль отображения
   */
  layout?: ('grid' | 'list') | null;
  /**
   * Количество колонок
   */
  columns?: (2 | 3 | 4) | null;
  id?: string | null;
  blockType: 'teamMembers';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonials {
  blockName?: string | null;
  /**
   * Заголовок блока
   */
  heading?: string | null;
  /**
   * Описание блока (опционально)
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Список отзывов
   */
  items: {
    /**
     * Имя автора отзыва
     */
    author: string;
    /**
     * Должность или роль автора (опционально)
     */
    role?: string | null;
    /**
     * Название компании автора (опционально)
     */
    company?: string | null;
    /**
     * Фото автора (опционально)
     */
    avatar?: (string | null) | Media;
    /**
     * Текст отзыва
     */
    content: string;
    /**
     * Рейтинг (опционально)
     */
    rating?: (1 | 2 | 3 | 4 | 5) | null;
    id?: string | null;
  }[];
  /**
   * Стиль отображения отзывов
   */
  layout?: ('grid' | 'carousel' | 'featured') | null;
  /**
   * Стиль отображения
   */
  style?: ('card' | 'minimal' | 'quote') | null;
  id?: string | null;
  blockType: 'testimonials';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productsList".
 */
export interface ProductsList {
  blockName?: string | null;
  /**
   * Заголовок блока
   */
  heading?: string | null;
  /**
   * Описание блока (опционально)
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Выберите продукты для отображения
   */
  products?: (string | Product)[] | null;
  /**
   * Использовать динамический источник продуктов
   */
  enableDynamicSource?: boolean | null;
  /**
   * Источник продуктов
   */
  source?: ('new' | 'popular' | 'sale' | 'featured') | null;
  /**
   * Максимальное количество продуктов
   */
  limit?: number | null;
  /**
   * Включить фильтрацию продуктов
   */
  enableFiltering?: boolean | null;
  /**
   * Стиль отображения продуктов
   */
  layout?: ('grid' | 'list' | 'carousel') | null;
  /**
   * Количество колонок
   */
  columns?: (2 | 3 | 4) | null;
  id?: string | null;
  blockType: 'productsList';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter".
 */
export interface Newsletter {
  blockName?: string | null;
  /**
   * Заголовок блока подписки
   */
  heading?: string | null;
  /**
   * Описание блока подписки
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Текст кнопки подписки
   */
  buttonText?: string | null;
  layout?: ('default' | 'compact' | 'withImage') | null;
  /**
   * Изображение для блока (опционально)
   */
  image?: (string | null) | Media;
  /**
   * Placeholder для поля ввода email
   */
  placeholder?: string | null;
  /**
   * Сообщение об успешной подписке
   */
  successMessage?: string | null;
  id?: string | null;
  blockType: 'newsletter';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articleHeader".
 */
export interface ArticleHeader {
  blockName?: string | null;
  /**
   * Заголовок статьи
   */
  title: string;
  /**
   * Подзаголовок (опционально)
   */
  subtitle?: string | null;
  /**
   * Краткое описание статьи (опционально)
   */
  description?: string | null;
  /**
   * Обложка статьи
   */
  coverImage?: (string | null) | Media;
  /**
   * Дата публикации
   */
  publishDate?: string | null;
  /**
   * Информация об авторе
   */
  author: {
    /**
     * Имя автора
     */
    name: string;
    /**
     * Аватар автора (опционально)
     */
    avatar?: (string | null) | Media;
    /**
     * Должность автора (опционально)
     */
    role?: string | null;
  };
  /**
   * Категории статьи (опционально)
   */
  categories?:
    | {
        category: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Стиль отображения заголовка статьи
   */
  layout?: ('standard' | 'large' | 'minimal') | null;
  id?: string | null;
  blockType: 'articleHeader';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authorBio".
 */
export interface AuthorBio {
  blockName?: string | null;
  /**
   * Информация об авторе
   */
  author: {
    /**
     * Имя автора
     */
    name: string;
    /**
     * Аватар автора
     */
    avatar?: (string | null) | Media;
    /**
     * Биография автора
     */
    bio?: string | null;
    /**
     * Должность автора
     */
    role?: string | null;
    /**
     * Название компании
     */
    company?: string | null;
    /**
     * Социальные сети
     */
    socialLinks?:
      | {
          /**
           * Платформа
           */
          platform: 'twitter' | 'facebook' | 'linkedin' | 'github' | 'instagram' | 'website';
          /**
           * URL профиля
           */
          url: string;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Стиль отображения
   */
  layout?: ('card' | 'inline') | null;
  id?: string | null;
  blockType: 'authorBio';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blockquote".
 */
export interface Blockquote {
  blockName?: string | null;
  /**
   * Текст цитаты
   */
  quote: string;
  /**
   * Автор цитаты (опционально)
   */
  author?: string | null;
  /**
   * Источник цитаты или должность автора (опционально)
   */
  source?: string | null;
  /**
   * Изображение автора (опционально)
   */
  avatar?: (string | null) | Media;
  /**
   * Стиль оформления цитаты
   */
  style?: ('default' | 'highlight' | 'minimal') | null;
  /**
   * Выравнивание текста
   */
  align?: ('left' | 'center' | 'right') | null;
  id?: string | null;
  blockType: 'blockquote';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comments {
  blockName?: string | null;
  /**
   * Заголовок секции комментариев
   */
  title?: string | null;
  /**
   * Система комментариев
   */
  provider?: ('native' | 'disqus' | 'facebook') | null;
  /**
   * Shortname для Disqus (если выбран Disqus)
   */
  disqusShortname?: string | null;
  /**
   * Facebook App ID (если выбран Facebook)
   */
  facebookAppId?: string | null;
  /**
   * Показывать количество комментариев
   */
  showCount?: boolean | null;
  /**
   * Количество комментариев на странице (для встроенных комментариев)
   */
  commentsPerPage?: number | null;
  /**
   * Разрешить ответы на комментарии
   */
  allowReplies?: boolean | null;
  /**
   * Требовать авторизацию для комментирования
   */
  requireAuth?: boolean | null;
  /**
   * Включить модерацию комментариев
   */
  moderationEnabled?: boolean | null;
  id?: string | null;
  blockType: 'comments';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relatedPosts".
 */
export interface RelatedPosts {
  blockName?: string | null;
  /**
   * Заголовок секции похожих статей
   */
  title?: string | null;
  /**
   * Метод выбора похожих статей
   */
  selectionMethod?: ('automatic' | 'manual') | null;
  /**
   * Выбрать статьи вручную
   */
  posts?: (string | Post)[] | null;
  /**
   * Максимальное количество статей для отображения
   */
  maxPosts?: number | null;
  /**
   * Критерии для автоматического подбора похожих статей
   */
  criteria?: ('category' | 'tags' | 'author' | 'popularity')[] | null;
  /**
   * Стиль отображения похожих статей
   */
  layout?: ('grid' | 'list' | 'carousel') | null;
  /**
   * Показывать обложку статьи
   */
  showFeaturedImage?: boolean | null;
  /**
   * Показывать краткое описание
   */
  showExcerpt?: boolean | null;
  /**
   * Показывать дату публикации
   */
  showDate?: boolean | null;
  /**
   * Показывать автора
   */
  showAuthor?: boolean | null;
  id?: string | null;
  blockType: 'relatedPosts';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "socialShare".
 */
export interface SocialShare {
  blockName?: string | null;
  /**
   * Заголовок блока
   */
  title?: string | null;
  /**
   * Выберите платформы для шеринга
   */
  platforms?:
    | (
        | 'x'
        | 'facebook'
        | 'linkedin'
        | 'pinterest'
        | 'vk'
        | 'instagram'
        | 'threads'
        | 'tenchat'
        | 'whatsapp'
        | 'telegram'
        | 'email'
        | 'copy'
      )[]
    | null;
  /**
   * Выберите расположение кнопок
   */
  layout?: ('horizontal' | 'vertical') | null;
  /**
   * Показывать количество шерингов (если поддерживается)
   */
  showShareCount?: boolean | null;
  id?: string | null;
  blockType: 'socialShare';
}
/**
 * User notifications
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications".
 */
export interface Notification {
  id: string;
  /**
   * Notification title
   */
  title: string;
  /**
   * Notification message
   */
  message: string;
  /**
   * User who received the notification
   */
  user: string | User;
  /**
   * Type of notification
   */
  type:
    | 'course_enrolled'
    | 'lesson_completed'
    | 'module_completed'
    | 'assessment_submitted'
    | 'assessment_graded'
    | 'course_completed'
    | 'certificate_issued'
    | 'achievement_unlocked'
    | 'level_up'
    | 'system_alert'
    | 'general_info';
  /**
   * Whether the notification has been read
   */
  isRead?: boolean | null;
  /**
   * Optional link to navigate to when clicking the notification
   */
  link?: string | null;
  /**
   * Additional metadata for the notification
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-analytics".
 */
export interface CourseAnalytic {
  id: string;
  course?: (string | null) | Course;
  courseTitle: string;
  views: number;
  enrollments: number;
  completions: number;
  /**
   * Процент пользователей, завершивших курс от общего числа записавшихся
   */
  completionRate: number;
  averageRating: number;
  totalRevenue: number;
  moduleCompletionRates?:
    | {
        moduleId: string;
        moduleTitle: string;
        completionRate: number;
        id?: string | null;
      }[]
    | null;
  lessonCompletionRates?:
    | {
        lessonId: string;
        lessonTitle: string;
        moduleTitle: string;
        completionRate: number;
        /**
         * Среднее время, проведенное на уроке (в минутах)
         */
        averageTimeSpent: number;
        id?: string | null;
      }[]
    | null;
  conversionRates: {
    /**
     * Процент посетителей лендинга, записавшихся на курс
     */
    landingToEnrollment: number;
    /**
     * Процент записавшихся, начавших обучение
     */
    enrollmentToStart: number;
    /**
     * Процент начавших обучение, завершивших курс
     */
    startToCompletion: number;
  };
  timeDistribution?:
    | {
        date: string;
        views: number;
        enrollments: number;
        completions: number;
        revenue: number;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "post-metrics".
 */
export interface PostMetric {
  id: string;
  /**
   * Automatically generated from post title
   */
  title: string;
  post: string | Post;
  views?: number | null;
  uniqueVisitors?: number | null;
  /**
   * Record of individual share events
   */
  shares?:
    | {
        platform: string;
        date: string;
        id?: string | null;
      }[]
    | null;
  shareCount?: number | null;
  likes?: number | null;
  /**
   * Reading progress tracking events
   */
  readingProgress?:
    | {
        progress: number;
        date: string;
        id?: string | null;
      }[]
    | null;
  completedReads?: number | null;
  lastUpdated?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors".
 */
export interface Author {
  id: string;
  name: string;
  avatar?: (string | null) | Media;
  bio?: string | null;
  role?: string | null;
  company?: string | null;
  email?: string | null;
  website?: string | null;
  socialLinks?:
    | {
        platform: 'twitter' | 'linkedin' | 'github' | 'instagram' | 'facebook' | 'youtube' | 'other';
        url: string;
        id?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: string;
  title: string;
  /**
   * Тип услуги
   */
  serviceType:
    | 'consultation'
    | 'development'
    | 'support'
    | 'audit'
    | 'integration'
    | 'content_creation'
    | 'automation'
    | 'other';
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Краткое описание для карточек услуг (макс. 160 символов)
   */
  shortDescription: string;
  /**
   * Базовая цена в USD
   */
  price: number;
  /**
   * Продолжительность в минутах (0 для неограниченной)
   */
  duration?: number | null;
  /**
   * Изображение услуги
   */
  thumbnail?: (string | null) | Media;
  features?:
    | {
        name: string;
        description: string;
        /**
         * Включено ли в базовую стоимость
         */
        included?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Галерея изображений услуги
   */
  gallery?:
    | {
        image: string | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Связанные услуги
   */
  relatedServices?: (string | Service)[] | null;
  /**
   * Требуется ли бронирование времени для этой услуги
   */
  requiresBooking?: boolean | null;
  bookingSettings?: {
    provider?: ('calendly' | 'internal' | 'other') | null;
    /**
     * Имя пользователя Calendly
     */
    calendlyUsername?: string | null;
    /**
     * Тип события Calendly
     */
    calendlyEventType?: string | null;
    /**
     * Скрыть детали типа события
     */
    hideEventTypeDetails?: boolean | null;
    /**
     * Скрыть баннер GDPR
     */
    hideGdprBanner?: boolean | null;
    /**
     * Включить форму дополнительной информации
     */
    enableAdditionalInfo?: boolean | null;
    /**
     * Поля для дополнительной информации
     */
    additionalInfoFields?:
      | {
          /**
           * Имя поля (латинскими буквами, без пробелов)
           */
          fieldName: string;
          /**
           * Название поля
           */
          fieldLabel: string;
          fieldType: 'text' | 'textarea' | 'number' | 'date' | 'select' | 'checkbox';
          /**
           * Обязательное поле
           */
          required?: boolean | null;
          /**
           * Варианты выбора
           */
          options?:
            | {
                label: string;
                value: string;
                id?: string | null;
              }[]
            | null;
          /**
           * Подсказка для поля
           */
          description?: string | null;
          /**
           * Плейсхолдер
           */
          placeholder?: string | null;
          /**
           * Отправлять в Calendly как дополнительный вопрос
           */
          sendToCalendly?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Заголовок формы дополнительной информации
     */
    additionalInfoTitle?: string | null;
    /**
     * Описание формы дополнительной информации
     */
    additionalInfoDescription?: string | null;
    /**
     * Обязательно заполнять форму
     */
    additionalInfoRequired?: boolean | null;
  };
  /**
   * Требуется ли оплата перед получением услуги
   */
  requiresPayment?: boolean | null;
  paymentSettings?: {
    paymentType?: ('full_prepayment' | 'partial_prepayment' | 'post_payment') | null;
    /**
     * Процент предоплаты
     */
    prepaymentPercentage?: number | null;
  };
  status: 'draft' | 'published' | 'archived';
  publishedAt?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: string;
  orderNumber: string;
  customer: string | User;
  status: 'pending' | 'processing' | 'delivered' | 'cancelled';
  items: {
    product: string | Product;
    quantity: number;
    price: number;
    id?: string | null;
  }[];
  total: {
    en: {
      amount: number;
      currency: string;
    };
    ru: {
      amount: number;
      currency: string;
    };
  };
  paymentId?: string | null;
  paymentProvider?: string | null;
  paymentData?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  paidAt?: string | null;
  /**
   * Type of order
   */
  orderType?: ('product' | 'service' | 'subscription') | null;
  /**
   * Additional data for service orders
   */
  serviceData?: {
    /**
     * ID of the service
     */
    serviceId?: string | null;
    /**
     * Type of service
     */
    serviceType?: string | null;
    /**
     * Whether this service requires booking
     */
    requiresBooking?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "order-tracking".
 */
export interface OrderTracking {
  id: string;
  orderId: string | Order;
  status:
    | 'placed'
    | 'payment_processing'
    | 'payment_confirmed'
    | 'ready_for_download'
    | 'completed'
    | 'cancelled'
    | 'refunded';
  downloadLinks?:
    | {
        productId: string | Product;
        link: string;
        expiresAt?: string | null;
        downloads?: number | null;
        maxDownloads?: number | null;
        id?: string | null;
      }[]
    | null;
  statusHistory?:
    | {
        status:
          | 'placed'
          | 'payment_processing'
          | 'payment_confirmed'
          | 'ready_for_download'
          | 'completed'
          | 'cancelled'
          | 'refunded';
        timestamp: string;
        note?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * When access to digital products expires
   */
  accessExpiresAt?: string | null;
  lastUpdated?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cart-sessions".
 */
export interface CartSession {
  id: string;
  /**
   * User associated with this cart session
   */
  user?: (string | null) | User;
  /**
   * Unique session identifier for anonymous carts
   */
  sessionId: string;
  /**
   * Products in the cart
   */
  items?:
    | {
        product: string | Product;
        quantity: number;
        /**
         * Price at the time of adding to cart
         */
        price: number;
        id?: string | null;
      }[]
    | null;
  /**
   * Total number of items in cart
   */
  itemCount?: number | null;
  /**
   * Total price of all items in cart
   */
  total?: number | null;
  /**
   * Currency of the cart
   */
  currency?: string | null;
  /**
   * Whether a reminder email has been sent for this cart
   */
  reminderSent?: boolean | null;
  /**
   * When the reminder email was sent
   */
  reminderSentAt?: string | null;
  /**
   * Whether this cart has been converted to an order
   */
  convertedToOrder?: boolean | null;
  /**
   * The order this cart was converted to
   */
  convertedToOrderId?: (string | null) | Order;
  /**
   * When this cart session expires
   */
  expiresAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discounts".
 */
export interface Discount {
  id: string;
  /**
   * Promotional code (e.g. SUMMER2024)
   */
  code: string;
  type: 'percentage' | 'fixed' | 'shipping';
  /**
   * Discount amount (percentage or fixed amount)
   */
  value?: number | null;
  currency?: ('USD' | 'EUR' | 'RUB') | null;
  /**
   * Minimum order amount to apply discount
   */
  minOrderAmount?: number | null;
  /**
   * Maximum discount amount (optional)
   */
  maxDiscount?: number | null;
  startDate: string;
  endDate: string;
  /**
   * Maximum number of times this code can be used
   */
  maxUsage?: number | null;
  /**
   * Maximum times a single user can use this code
   */
  maxUsagePerUser?: number | null;
  usageCount?: number | null;
  status?: ('active' | 'inactive' | 'expired') | null;
  /**
   * Leave empty to apply to all products
   */
  applicableProducts?: (string | Product)[] | null;
  excludedProducts?: (string | Product)[] | null;
  /**
   * Leave empty to apply to all categories
   */
  applicableCategories?: (string | Category)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage promotion codes and discounts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions".
 */
export interface Promotion {
  id: string;
  /**
   * Promotion code (e.g., SUMMER2023)
   */
  code: string;
  type: 'percentage' | 'fixed' | 'buy_x_get_y';
  /**
   * Discount value (percentage or amount)
   */
  value: number;
  /**
   * Minimum purchase amount required
   */
  minPurchase?: number | null;
  /**
   * Maximum discount amount
   */
  maxDiscount?: number | null;
  startDate?: string | null;
  endDate?: string | null;
  /**
   * Maximum number of times this code can be used
   */
  usageLimit?: number | null;
  /**
   * Maximum times a single user can use this code
   */
  userLimit?: number | null;
  status: 'active' | 'inactive' | 'expired';
  usageCount?: number | null;
  /**
   * Specific products this promotion applies to (leave empty for all products)
   */
  products?: (string | Product)[] | null;
  /**
   * Specific categories this promotion applies to
   */
  categories?: (string | Category)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: string;
  clientName: string;
  companyName?: string | null;
  rating: number;
  reviewText: string;
  clientPhoto?: (string | null) | Media;
  project?: (string | null) | Solution;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solutions".
 */
export interface Solution {
  id: string;
  name: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  featuredImage?: (string | null) | Media;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  toolsUsed?:
    | {
        tool?: string | null;
        id?: string | null;
      }[]
    | null;
  pricing: {
    basePrice: number;
    /**
     * Discount percentage (0-100)
     */
    discountPercentage?: number | null;
    finalPrice?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * User achievements tracking
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-achievements".
 */
export interface UserAchievement {
  id: string;
  /**
   * User who earned the achievement
   */
  user: string | User;
  /**
   * The achievement earned by the user
   */
  achievement: string | Achievement;
  /**
   * When the achievement was awarded
   */
  awardedAt: string;
  /**
   * Current status of the achievement
   */
  status: 'active' | 'revoked';
  /**
   * Additional metadata for the achievement
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Tracks user enrollments and access to courses
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-enrollments".
 */
export interface CourseEnrollment {
  id: string;
  /**
   * User who has access to the course
   */
  user: string | User;
  /**
   * Course the user has access to
   */
  course: string | Course;
  /**
   * Current status of the enrollment
   */
  status: 'active' | 'completed' | 'expired' | 'revoked';
  /**
   * Percentage of course completion (0-100)
   */
  progress?: number | null;
  /**
   * How the user got access to this course
   */
  source?: ('purchase' | 'admin' | 'promotion' | 'subscription') | null;
  /**
   * Order that granted access to this course (if applicable)
   */
  orderId?: (string | null) | Order;
  /**
   * Administrative notes about this enrollment
   */
  notes?: string | null;
  /**
   * When the user was enrolled in the course
   */
  enrolledAt: string;
  /**
   * When the enrollment expires (if applicable)
   */
  expiresAt?: string | null;
  /**
   * When the user completed the course (if applicable)
   */
  completedAt?: string | null;
  /**
   * When the user last accessed the course
   */
  lastAccessedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Tracking user progress through lessons
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lesson-progress".
 */
export interface LessonProgress {
  id: string;
  /**
   * User who viewed the lesson
   */
  user: string | User;
  /**
   * The lesson that was viewed
   */
  lesson: string | Lesson;
  /**
   * The course the lesson belongs to
   */
  course: string | Course;
  /**
   * Current status of the lesson progress
   */
  status: 'in_progress' | 'completed';
  /**
   * When the lesson was completed
   */
  completedAt?: string | null;
  /**
   * When the lesson was last accessed
   */
  lastAccessedAt: string;
  /**
   * Time spent on the lesson in seconds
   */
  timeSpent?: number | null;
  /**
   * Additional metadata for the lesson progress
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * User leaderboard rankings
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leaderboard".
 */
export interface Leaderboard {
  id: string;
  /**
   * User in the leaderboard
   */
  user: string | User;
  /**
   * Total XP of the user
   */
  xp: number;
  /**
   * Current level of the user
   */
  level: number;
  /**
   * Current rank of the user in the leaderboard
   */
  rank: number;
  /**
   * Previous rank of the user (0 means new entry)
   */
  previousRank?: number | null;
  /**
   * Change in rank since last update (positive means improvement)
   */
  rankChange?: number | null;
  /**
   * Number of achievements earned by the user
   */
  achievements?: number | null;
  /**
   * Number of courses completed by the user
   */
  coursesCompleted?: number | null;
  /**
   * Current learning streak in days
   */
  streak?: number | null;
  /**
   * When the user was last active
   */
  lastActive?: string | null;
  /**
   * Additional metadata for the leaderboard entry
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Rewards for achievements and level milestones
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rewards".
 */
export interface Reward {
  id: string;
  /**
   * Название награды
   */
  title: string;
  /**
   * Описание награды
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Тип награды
   */
  type: 'level' | 'achievement' | 'course' | 'special';
  /**
   * Иконка награды
   */
  icon?: (string | null) | Media;
  /**
   * Требуемый уровень для получения награды (для наград типа "Уровень")
   */
  requiredLevel?: number | null;
  /**
   * Требуемое достижение для получения награды (для наград типа "Достижение")
   */
  requiredAchievement?: (string | null) | Achievement;
  /**
   * Требуемый курс для получения награды (для наград типа "Курс")
   */
  requiredCourse?: (string | null) | Course;
  /**
   * Тип вознаграждения
   */
  rewardType: 'discount' | 'free_course' | 'badge' | 'certificate' | 'exclusive_content' | 'other';
  /**
   * Размер скидки в процентах (для наград типа "Скидка")
   */
  discountValue?: number | null;
  /**
   * Бесплатный курс (для наград типа "Бесплатный курс")
   */
  freeCourse?: (string | null) | Course;
  /**
   * Эксклюзивный контент (для наград типа "Доступ к эксклюзивному контенту")
   */
  exclusiveContent?: (string | null) | Page;
  /**
   * Срок действия награды в днях (0 = бессрочно)
   */
  expiresAfter?: number | null;
  /**
   * Статус награды
   */
  status: 'active' | 'inactive' | 'draft';
  /**
   * Дополнительные метаданные для награды
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * User rewards tracking
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-rewards".
 */
export interface UserReward {
  id: string;
  /**
   * User who received the reward
   */
  user: string | User;
  /**
   * The reward that was awarded
   */
  reward: string | Reward;
  /**
   * When the reward was awarded
   */
  awardedAt: string;
  /**
   * When the reward expires (if applicable)
   */
  expiresAt?: string | null;
  /**
   * Current status of the reward
   */
  status: 'active' | 'used' | 'expired' | 'revoked';
  /**
   * When the reward was used (if applicable)
   */
  usedAt?: string | null;
  /**
   * Unique code for the reward (if applicable)
   */
  code?: string | null;
  /**
   * Additional metadata for the user reward
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Course completion certificates
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certificates".
 */
export interface Certificate {
  id: string;
  /**
   * Unique identifier for the certificate
   */
  certificateId: string;
  /**
   * User who earned the certificate
   */
  user: string | User;
  /**
   * Name of the user as it appears on the certificate
   */
  userName: string;
  /**
   * Course the certificate is for
   */
  course: string | Course;
  /**
   * Title of the course as it appears on the certificate
   */
  courseTitle: string;
  /**
   * When the user completed the course
   */
  completionDate: string;
  /**
   * When the certificate was issued
   */
  issueDate: string;
  /**
   * Course instructor
   */
  instructor?: (string | null) | User;
  /**
   * Current status of the certificate
   */
  status: 'active' | 'revoked';
  /**
   * Additional metadata for the certificate
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templates".
 */
export interface Template {
  id: string;
  name: string;
  description?: string | null;
  type: 'course' | 'landing' | 'funnel' | 'full';
  content:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  thumbnail?: (string | null) | Media;
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  isPublic?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "automation-jobs".
 */
export interface AutomationJob {
  id: string;
  name: string;
  description?: string | null;
  status: 'active' | 'paused' | 'completed' | 'error';
  jobType: 'create_course' | 'update_course' | 'create_landing' | 'create_funnel' | 'full_package';
  triggerType: 'schedule' | 'event' | 'manual';
  schedule?: {
    frequency: 'daily' | 'weekly' | 'monthly' | 'custom';
    time?: string | null;
    dayOfWeek?: ('1' | '2' | '3' | '4' | '5' | '6' | '0') | null;
    dayOfMonth?: number | null;
    /**
     * Например: 0 0 * * *
     */
    cronExpression?: string | null;
  };
  eventTrigger?: {
    eventType: 'user_created' | 'course_enrollment' | 'course_completion' | 'new_comment' | 'new_order';
    conditions?:
      | {
          field: string;
          operator: 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'greater_than' | 'less_than';
          value: string;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Параметры для генерации курса с помощью AI
   */
  aiGenerationParams: {
    topic: string;
    targetAudience?: string | null;
    difficultyLevel?: ('beginner' | 'intermediate' | 'advanced') | null;
    includeQuizzes?: boolean | null;
    includeLanding?: boolean | null;
    includeFunnel?: boolean | null;
    language?: ('ru' | 'en') | null;
    moduleCount?: number | null;
    lessonCount?: number | null;
    model?: ('gpt-4-turbo' | 'gpt-4o' | 'gpt-3.5-turbo') | null;
    temperature?: number | null;
    style?: ('professional' | 'academic' | 'conversational') | null;
    focus?: ('balanced' | 'theory' | 'practice') | null;
    industrySpecific?: string | null;
    includeResources?: boolean | null;
    includeAssignments?: boolean | null;
  };
  /**
   * Выберите шаблон для создания курса
   */
  templateId?: (string | null) | Template;
  /**
   * Выберите курс для обновления (только для типа "Обновление курса")
   */
  courseId?: (string | null) | Course;
  lastRun?: string | null;
  nextRun?: string | null;
  runCount?: number | null;
  lastResult?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  logs?:
    | {
        timestamp?: string | null;
        message?: string | null;
        level?: ('info' | 'warning' | 'error' | 'success') | null;
        details?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Сообщения, отправленные через контактную форму или другие источники.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messages".
 */
export interface Message {
  id: string;
  name: string;
  email: string;
  subject: string;
  message: string;
  source?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-subscribers".
 */
export interface NewsletterSubscriber {
  id: string;
  /**
   * Email адрес подписчика
   */
  email: string;
  /**
   * Имя подписчика (опционально)
   */
  name?: string | null;
  /**
   * Статус подписки
   */
  status?: ('active' | 'unsubscribed' | 'bounced') | null;
  /**
   * Уникальный токен для отписки
   */
  unsubscribeToken?: string | null;
  /**
   * Источник подписки (блог, главная страница и т.д.)
   */
  source?: string | null;
  /**
   * Предпочитаемый язык
   */
  locale?: ('ru' | 'en') | null;
  /**
   * Дата последней отправки рассылки
   */
  lastSent?: string | null;
  /**
   * Дополнительные данные о подписчике
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-templates".
 */
export interface EmailTemplate {
  id: string;
  name: string;
  /**
   * Краткое описание назначения шаблона
   */
  description?: string | null;
  /**
   * Уникальный идентификатор для использования в коде (например, "welcome-email").
   */
  slug: string;
  templateType?: ('auth' | 'courses' | 'orders' | 'rewards' | 'newsletters' | 'other') | null;
  sender: string | SenderEmail;
  subject: string;
  /**
   * Используйте {{placeholder}} для вставки динамических данных.
   */
  body: string;
  /**
   * Список доступных плейсхолдеров, разделенных запятыми
   */
  placeholders?: string | null;
  /**
   * Этот шаблон был создан или обновлен из кода
   */
  syncedFromCode?: boolean | null;
  lastSyncedAt?: string | null;
  /**
   * Для предпросмотра шаблона сохраните изменения
   */
  previewNote?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sender-emails".
 */
export interface SenderEmail {
  id: string;
  /**
   * Внутреннее название, например, "Поддержка" или "Без ответа".
   */
  name: string;
  /**
   * Имя, которое увидит получатель, например, "Flow Masters Support".
   */
  senderName: string;
  emailAddress: string;
  /**
   * Подпись, которая будет добавлена к письмам, отправленным с этого адреса.
   */
  signature?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-campaigns".
 */
export interface EmailCampaign {
  id: string;
  name: string;
  description?: string | null;
  status?: ('draft' | 'active' | 'processing' | 'completed' | 'paused' | 'error') | null;
  triggerType: 'manual' | 'schedule' | 'event';
  schedule?: {
    frequency?: ('once' | 'daily' | 'weekly' | 'monthly') | null;
    startDate: string;
    endDate?: string | null;
  };
  eventTrigger?: {
    eventType:
      | 'user.registered'
      | 'order.created'
      | 'order.status.updated'
      | 'newsletter.subscribed'
      | 'cart.abandoned';
    delay?: number | null;
    /**
     * JSON с условиями для фильтрации событий
     */
    conditions?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  targetAudience: {
    audienceType: 'all_subscribers' | 'user_segment' | 'user_filter' | 'event_related';
    segment?: (string | null) | UserSegment;
    /**
     * JSON с условиями для фильтрации пользователей
     */
    filter?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    locale?: ('' | 'ru' | 'en') | null;
  };
  emailSequence?:
    | {
        template: string | EmailTemplate;
        /**
         * Задержка перед отправкой этого письма (от начала кампании или предыдущего письма)
         */
        delay?: number | null;
        /**
         * JSON с условиями, при которых это письмо будет отправлено
         */
        condition?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  lastRun?: string | null;
  stats?: {
    totalSent?: number | null;
    opened?: number | null;
    clicked?: number | null;
    bounced?: number | null;
    unsubscribed?: number | null;
  };
  logs?:
    | {
        timestamp?: string | null;
        message?: string | null;
        level?: ('info' | 'warning' | 'error' | 'success') | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Создание и запуск массовых рассылок новостей.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "broadcasts".
 */
export interface Broadcast {
  id: string;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Выберите язык для целевой аудитории или "Все" для отправки всем активным подписчикам.
   */
  locale?: ('' | 'ru' | 'en') | null;
  status?: ('draft' | 'queued' | 'sent' | 'failed') | null;
  /**
   * Ссылка на детальный отчет после завершения задачи.
   */
  report?: (string | null) | BroadcastReport;
  updatedAt: string;
  createdAt: string;
}
/**
 * Отчеты о результатах массовых рассылок новостей.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "broadcast-reports".
 */
export interface BroadcastReport {
  id: string;
  broadcastId: string;
  status: 'completed' | 'failed';
  title: string;
  locale: string;
  totalSubscribers: number;
  successfullySent: number;
  failedToSend: number;
  errorsList: {
    error: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * Коллекция для хранения содержимого всплывающих окон (попапов).
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "popups".
 */
export interface Popup {
  id: string;
  /**
   * Уникальный ID (латиница, цифры, дефисы). Используется для связи с блоком 'Конфигуратор Попапа' на страницах.
   */
  popupId: string;
  /**
   * Внутреннее название для удобства поиска и управления.
   */
  title?: string | null;
  content: (
    | ContentBlock
    | CallToActionBlock
    | UrgencyCTABlock
    | HeroBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Список фич
         */
        features: {
          title: string;
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Имя иконки из коллекции
           */
          icon?: string | null;
          id?: string | null;
        }[];
        layout?: ('grid' | 'list' | 'carousel') | null;
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'features';
      }
    | {
        blockName?: string | null;
        /**
         * Стиль разделителя
         */
        style?: ('solid' | 'dashed' | 'dotted') | null;
        /**
         * Ширина разделителя
         */
        width?: ('narrow' | 'medium' | 'wide' | 'full') | null;
        /**
         * Внешний отступ
         */
        spacing?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'divider';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Шаги процесса
         */
        steps: {
          /**
           * Заголовок шага
           */
          title: string;
          /**
           * Описание шага
           */
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Имя иконки из коллекции (опционально)
           */
          icon?: string | null;
          /**
           * Изображение или видео (опционально)
           */
          media?: (string | null) | Media;
          id?: string | null;
        }[];
        /**
         * Стиль отображения шагов
         */
        layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
        /**
         * Показывать номера шагов
         */
        showNumbers?: boolean | null;
        /**
         * Показывать соединительные линии
         */
        showLines?: boolean | null;
        id?: string | null;
        blockType: 'steps';
      }
    | {
        blockName?: string | null;
        /**
         * Добавьте элементы аккордеона
         */
        items: {
          /**
           * Заголовок элемента
           */
          label: string;
          /**
           * Содержимое элемента
           */
          content: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          /**
           * Вложенные элементы (опционально)
           */
          items?:
            | {
                label: string;
                content: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        /**
         * Выберите стиль отображения
         */
        style?: ('default' | 'separated' | 'boxed') | null;
        /**
         * Выберите размер
         */
        size?: ('sm' | 'md' | 'lg') | null;
        /**
         * Выберите вариант отображения
         */
        variant?: ('default' | 'separated' | 'boxed') | null;
        /**
         * Разрешить открытие нескольких элементов одновременно
         */
        allowMultiple?: boolean | null;
        /**
         * Индексы элементов, открытых по умолчанию (начиная с 0)
         */
        defaultOpen?:
          | {
              /**
               * Индекс элемента
               */
              index: number;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockType: 'accordion';
      }
    | CardBlock
    | MediaBlock
    | CodeBlock
    | {
        blockName?: string | null;
        /**
         * Выберите тип видео
         */
        videoType: 'youtube' | 'vimeo' | 'rutube' | 'vk' | 'mp4';
        /**
         * ID видео (для YouTube, Vimeo, RuTube, VK)
         */
        videoId?: string | null;
        /**
         * URL видео (опционально)
         */
        videoUrl?: string | null;
        /**
         * Загрузите MP4 файл
         */
        videoFile?: (string | null) | Media;
        /**
         * Превью изображение для видео
         */
        poster?: (string | null) | Media;
        /**
         * Соотношение сторон видео
         */
        aspectRatio?: ('16/9' | '4/3' | '1/1' | '9/16') | null;
        /**
         * Автоматическое воспроизведение
         */
        autoPlay?: boolean | null;
        /**
         * Без звука по умолчанию
         */
        muted?: boolean | null;
        /**
         * Зациклить воспроизведение
         */
        loop?: boolean | null;
        /**
         * Показывать элементы управления
         */
        controls?: boolean | null;
        /**
         * Подпись к видео
         */
        caption?: string | null;
        /**
         * Стиль отображения
         */
        style?: ('default' | 'shadow' | 'bordered') | null;
        /**
         * Размер блока
         */
        size?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'video';
      }
    | AudioBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока (опционально)
         */
        heading?: string | null;
        /**
         * Подзаголовок (опционально)
         */
        subheading?: string | null;
        /**
         * Описание карусели (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Элементы карусели
         */
        items: {
          /**
           * Изображение или видео
           */
          media: string | Media;
          /**
           * Заголовок элемента (опционально)
           */
          heading?: string | null;
          /**
           * Подпись к элементу (опционально)
           */
          caption?: string | null;
          /**
           * Текстовое содержимое (опционально)
           */
          content?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Кнопки или ссылки (опционально)
           */
          actions?:
            | {
                label: string;
                url: string;
                style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
                /**
                 * Открыть в новой вкладке
                 */
                newTab?: boolean | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        /**
         * Автоматическое прокручивание карусели
         */
        autoplay?: boolean | null;
        /**
         * Интервал прокрутки в миллисекундах
         */
        interval?: number | null;
        /**
         * Показывать кнопки управления
         */
        showControls?: boolean | null;
        /**
         * Показывать индикаторы слайдов
         */
        showIndicators?: boolean | null;
        id?: string | null;
        blockType: 'carousel';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок галереи (опционально)
         */
        heading?: string | null;
        /**
         * Изображения для галереи
         */
        items: {
          /**
           * Выберите изображение
           */
          media: string | Media;
          /**
           * Подпись к изображению (опционально)
           */
          caption?: string | null;
          id?: string | null;
        }[];
        /**
         * Выберите тип отображения
         */
        layout?: ('grid' | 'masonry' | 'carousel') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        /**
         * Расстояние между изображениями
         */
        spacing?: ('sm' | 'md' | 'lg') | null;
        id?: string | null;
        blockType: 'gallery';
      }
    | VideoLessonsBlock
    | BannerBlock
    | FAQBlock
    | CourseFAQBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Тарифные планы
         */
        plans: {
          /**
           * Название тарифа
           */
          name: string;
          /**
           * Цена (например, "9900" или "Бесплатно")
           */
          price: string;
          /**
           * Интервал оплаты (например, "/месяц", "/год")
           */
          interval?: string | null;
          /**
           * Краткое описание тарифа
           */
          description?: string | null;
          /**
           * Список функций
           */
          features?:
            | {
                text: string;
                /**
                 * Функция включена в тариф
                 */
                included?: boolean | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Отметить как популярный тариф
           */
          isPopular?: boolean | null;
          /**
           * Кнопки
           */
          actions?:
            | {
                label: string;
                url: string;
                style?: ('primary' | 'secondary' | 'outline' | 'link') | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[];
        layout?: ('default' | 'grid' | 'compact') | null;
        id?: string | null;
        blockType: 'pricingTable';
      }
    | CoursePricingComparisonBlock
    | StatsBlock
    | TabsBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * События таймлайна
         */
        items: {
          /**
           * Заголовок события
           */
          title: string;
          /**
           * Дата события (текстовый формат, например "Июнь 2023")
           */
          date?: string | null;
          /**
           * Описание события
           */
          description?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Изображение для события (опционально)
           */
          media?: (string | null) | Media;
          id?: string | null;
        }[];
        /**
         * Стиль отображения таймлайна
         */
        layout?: ('vertical' | 'horizontal' | 'zigzag') | null;
        /**
         * Показывать даты
         */
        showDates?: boolean | null;
        /**
         * Показывать соединительные линии
         */
        showLines?: boolean | null;
        id?: string | null;
        blockType: 'timeline';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока (опционально)
         */
        title?: string | null;
        /**
         * Автоматически генерировать оглавление на основе заголовков страницы
         */
        autoGenerate?: boolean | null;
        /**
         * Элементы оглавления (используется, если автогенерация отключена)
         */
        items?:
          | {
              /**
               * Текст пункта оглавления
               */
              title: string;
              /**
               * Якорь (ID элемента, например "about-section")
               */
              anchor: string;
              /**
               * Уровень вложенности
               */
              level?: (1 | 2 | 3) | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Фиксировать оглавление при прокрутке
         */
        sticky?: boolean | null;
        /**
         * Показывать нумерацию пунктов
         */
        showNumbers?: boolean | null;
        /**
         * Максимальный уровень заголовков для отображения
         */
        maxDepth?: (1 | 2 | 3) | null;
        id?: string | null;
        blockType: 'tableOfContents';
      }
    | RoadmapBlock
    | BenefitsOutcomesBlock
    | TargetAudienceBlock
    | GuaranteeBlock
    | SocialProofAdvancedBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Члены команды
         */
        members: {
          /**
           * Имя участника команды
           */
          name: string;
          /**
           * Должность или роль
           */
          role?: string | null;
          /**
           * Краткая биография (опционально)
           */
          bio?: string | null;
          /**
           * Фото участника команды
           */
          avatar?: (string | null) | Media;
          /**
           * Ссылки на социальные сети (опционально)
           */
          social?: {
            /**
             * Ссылка на Twitter
             */
            twitter?: string | null;
            /**
             * Ссылка на LinkedIn
             */
            linkedin?: string | null;
            /**
             * Ссылка на GitHub
             */
            github?: string | null;
            /**
             * Ссылка на персональный сайт
             */
            website?: string | null;
          };
          id?: string | null;
        }[];
        /**
         * Стиль отображения
         */
        layout?: ('grid' | 'list') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'teamMembers';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Список отзывов
         */
        items: {
          /**
           * Имя автора отзыва
           */
          author: string;
          /**
           * Должность или роль автора (опционально)
           */
          role?: string | null;
          /**
           * Название компании автора (опционально)
           */
          company?: string | null;
          /**
           * Фото автора (опционально)
           */
          avatar?: (string | null) | Media;
          /**
           * Текст отзыва
           */
          content: string;
          /**
           * Рейтинг (опционально)
           */
          rating?: (1 | 2 | 3 | 4 | 5) | null;
          id?: string | null;
        }[];
        /**
         * Стиль отображения отзывов
         */
        layout?: ('grid' | 'carousel' | 'featured') | null;
        /**
         * Стиль отображения
         */
        style?: ('card' | 'minimal' | 'quote') | null;
        id?: string | null;
        blockType: 'testimonials';
      }
    | InstructorProfileBlock
    | HeaderBlock
    | FooterBlock
    | ServicesBlock
    | CaseStudiesBlock
    | TechStackBlock
    | PlansComparisonBlock
    | CourseBlock
    | CurriculumBlock
    | UserProgressBlock
    | CertificatesBlock
    | ResourceLibraryBlock
    | AiToolsBlock
    | LeaderboardBlock
    | CourseOverviewBlock
    | QuizAssessmentBlock
    | AssignmentsBlock
    | AchievementsBlockType
    | ProjectShowcaseBlock
    | FunnelStepBlock
    | RecommendationsBlock
    | PopupTriggerConfigBlock
    | ProductsFilterBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        heading?: string | null;
        /**
         * Описание блока (опционально)
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Выберите продукты для отображения
         */
        products?: (string | Product)[] | null;
        /**
         * Использовать динамический источник продуктов
         */
        enableDynamicSource?: boolean | null;
        /**
         * Источник продуктов
         */
        source?: ('new' | 'popular' | 'sale' | 'featured') | null;
        /**
         * Максимальное количество продуктов
         */
        limit?: number | null;
        /**
         * Включить фильтрацию продуктов
         */
        enableFiltering?: boolean | null;
        /**
         * Стиль отображения продуктов
         */
        layout?: ('grid' | 'list' | 'carousel') | null;
        /**
         * Количество колонок
         */
        columns?: (2 | 3 | 4) | null;
        id?: string | null;
        blockType: 'productsList';
      }
    | FormBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок блока подписки
         */
        heading?: string | null;
        /**
         * Описание блока подписки
         */
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Текст кнопки подписки
         */
        buttonText?: string | null;
        layout?: ('default' | 'compact' | 'withImage') | null;
        /**
         * Изображение для блока (опционально)
         */
        image?: (string | null) | Media;
        /**
         * Placeholder для поля ввода email
         */
        placeholder?: string | null;
        /**
         * Сообщение об успешной подписке
         */
        successMessage?: string | null;
        id?: string | null;
        blockType: 'newsletter';
      }
    | FeedbackBlock
    | PollBlock
    | AiAssistantBlock
    | LeadMagnetOfferBlock
    | DiscussionForumBlock
    | {
        blockName?: string | null;
        /**
         * Заголовок статьи
         */
        title: string;
        /**
         * Подзаголовок (опционально)
         */
        subtitle?: string | null;
        /**
         * Краткое описание статьи (опционально)
         */
        description?: string | null;
        /**
         * Обложка статьи
         */
        coverImage?: (string | null) | Media;
        /**
         * Дата публикации
         */
        publishDate?: string | null;
        /**
         * Информация об авторе
         */
        author: {
          /**
           * Имя автора
           */
          name: string;
          /**
           * Аватар автора (опционально)
           */
          avatar?: (string | null) | Media;
          /**
           * Должность автора (опционально)
           */
          role?: string | null;
        };
        /**
         * Категории статьи (опционально)
         */
        categories?:
          | {
              category: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Стиль отображения заголовка статьи
         */
        layout?: ('standard' | 'large' | 'minimal') | null;
        id?: string | null;
        blockType: 'articleHeader';
      }
    | {
        blockName?: string | null;
        /**
         * Информация об авторе
         */
        author: {
          /**
           * Имя автора
           */
          name: string;
          /**
           * Аватар автора
           */
          avatar?: (string | null) | Media;
          /**
           * Биография автора
           */
          bio?: string | null;
          /**
           * Должность автора
           */
          role?: string | null;
          /**
           * Название компании
           */
          company?: string | null;
          /**
           * Социальные сети
           */
          socialLinks?:
            | {
                /**
                 * Платформа
                 */
                platform: 'twitter' | 'facebook' | 'linkedin' | 'github' | 'instagram' | 'website';
                /**
                 * URL профиля
                 */
                url: string;
                id?: string | null;
              }[]
            | null;
        };
        /**
         * Стиль отображения
         */
        layout?: ('card' | 'inline') | null;
        id?: string | null;
        blockType: 'authorBio';
      }
    | {
        blockName?: string | null;
        /**
         * Текст цитаты
         */
        quote: string;
        /**
         * Автор цитаты (опционально)
         */
        author?: string | null;
        /**
         * Источник цитаты или должность автора (опционально)
         */
        source?: string | null;
        /**
         * Изображение автора (опционально)
         */
        avatar?: (string | null) | Media;
        /**
         * Стиль оформления цитаты
         */
        style?: ('default' | 'highlight' | 'minimal') | null;
        /**
         * Выравнивание текста
         */
        align?: ('left' | 'center' | 'right') | null;
        id?: string | null;
        blockType: 'blockquote';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок секции комментариев
         */
        title?: string | null;
        /**
         * Система комментариев
         */
        provider?: ('native' | 'disqus' | 'facebook') | null;
        /**
         * Shortname для Disqus (если выбран Disqus)
         */
        disqusShortname?: string | null;
        /**
         * Facebook App ID (если выбран Facebook)
         */
        facebookAppId?: string | null;
        /**
         * Показывать количество комментариев
         */
        showCount?: boolean | null;
        /**
         * Количество комментариев на странице (для встроенных комментариев)
         */
        commentsPerPage?: number | null;
        /**
         * Разрешить ответы на комментарии
         */
        allowReplies?: boolean | null;
        /**
         * Требовать авторизацию для комментирования
         */
        requireAuth?: boolean | null;
        /**
         * Включить модерацию комментариев
         */
        moderationEnabled?: boolean | null;
        id?: string | null;
        blockType: 'comments';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок секции похожих статей
         */
        title?: string | null;
        /**
         * Метод выбора похожих статей
         */
        selectionMethod?: ('automatic' | 'manual') | null;
        /**
         * Выбрать статьи вручную
         */
        posts?: (string | Post)[] | null;
        /**
         * Максимальное количество статей для отображения
         */
        maxPosts?: number | null;
        /**
         * Критерии для автоматического подбора похожих статей
         */
        criteria?: ('category' | 'tags' | 'author' | 'popularity')[] | null;
        /**
         * Стиль отображения похожих статей
         */
        layout?: ('grid' | 'list' | 'carousel') | null;
        /**
         * Показывать обложку статьи
         */
        showFeaturedImage?: boolean | null;
        /**
         * Показывать краткое описание
         */
        showExcerpt?: boolean | null;
        /**
         * Показывать дату публикации
         */
        showDate?: boolean | null;
        /**
         * Показывать автора
         */
        showAuthor?: boolean | null;
        id?: string | null;
        blockType: 'relatedPosts';
      }
    | {
        blockName?: string | null;
        /**
         * Заголовок блока
         */
        title?: string | null;
        /**
         * Выберите платформы для шеринга
         */
        platforms?:
          | (
              | 'x'
              | 'facebook'
              | 'linkedin'
              | 'pinterest'
              | 'vk'
              | 'instagram'
              | 'threads'
              | 'tenchat'
              | 'whatsapp'
              | 'telegram'
              | 'email'
              | 'copy'
            )[]
          | null;
        /**
         * Выберите расположение кнопок
         */
        layout?: ('horizontal' | 'vertical') | null;
        /**
         * Показывать количество шерингов (если поддерживается)
         */
        showShareCount?: boolean | null;
        id?: string | null;
        blockType: 'socialShare';
      }
    | InteractiveDemoBlock
    | CalendarBlock
    | EventTrackerBlock
    | ReportEmbedBlock
    | ChatBlock
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * Manages user favorite products.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-favorites".
 */
export interface UserFavorite {
  id: string;
  /**
   * The user these favorites belong to.
   */
  user: string | User;
  /**
   * List of favorite products for this user.
   */
  products?: (string | Product)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscription-plans".
 */
export interface SubscriptionPlan {
  id: string;
  /**
   * Name of the subscription plan
   */
  name: string;
  /**
   * Description of the subscription plan
   */
  description?: string | null;
  /**
   * List of features included in this plan
   */
  features?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Price of the subscription
   */
  price: number;
  currency: 'RUB' | 'USD' | 'EUR';
  /**
   * Billing period
   */
  period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'annual';
  /**
   * Number of days in trial period (0 for no trial)
   */
  trialPeriodDays?: number | null;
  /**
   * Maximum number of months for subscription (0 for unlimited)
   */
  maxSubscriptionMonths?: number | null;
  /**
   * Whether the subscription auto-renews
   */
  autoRenew?: boolean | null;
  /**
   * Whether users can cancel the subscription
   */
  allowCancel?: boolean | null;
  /**
   * Whether this plan is active and available for purchase
   */
  isActive?: boolean | null;
  /**
   * Additional metadata for this plan
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions".
 */
export interface Subscription {
  id: string;
  /**
   * ID пользователя
   */
  userId: string;
  /**
   * План подписки
   */
  planId: string | SubscriptionPlan;
  status: 'active' | 'paused' | 'canceled' | 'expired' | 'failed' | 'pending';
  paymentProvider: 'yoomoney' | 'robokassa' | 'stripe' | 'paypal';
  /**
   * Метод оплаты (например, card, wallet)
   */
  paymentMethod?: string | null;
  /**
   * Токен платежного метода для рекуррентных платежей
   */
  paymentToken?: string | null;
  period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'annual';
  /**
   * Сумма платежа
   */
  amount: number;
  currency: 'RUB' | 'USD' | 'EUR';
  /**
   * Дата начала подписки
   */
  startDate: string;
  /**
   * Дата следующего платежа
   */
  nextPaymentDate: string;
  /**
   * Дата окончания подписки (если есть)
   */
  endDate?: string | null;
  /**
   * Дата отмены подписки (если отменена)
   */
  canceledAt?: string | null;
  /**
   * Дополнительные метаданные
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscription-payments".
 */
export interface SubscriptionPayment {
  id: string;
  /**
   * Подписка
   */
  subscriptionId: string | Subscription;
  /**
   * Сумма платежа
   */
  amount: number;
  currency: 'RUB' | 'USD' | 'EUR';
  status: 'successful' | 'failed' | 'refunded' | 'pending';
  /**
   * Дата платежа
   */
  paymentDate: string;
  /**
   * Метод платежа
   */
  paymentMethod?: string | null;
  /**
   * ID транзакции в платежной системе
   */
  transactionId?: string | null;
  /**
   * Причина ошибки (если статус failed)
   */
  failureReason?: string | null;
  /**
   * Полный ответ от платежной системы
   */
  rawResponse?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings".
 */
export interface Booking {
  id: string;
  title: string;
  type: 'calendly' | 'manual' | 'other';
  status: 'confirmed' | 'canceled' | 'rescheduled' | 'completed' | 'no-show';
  startTime: string;
  endTime?: string | null;
  eventName?: string | null;
  location?: string | null;
  invitee?: {
    name?: string | null;
    email?: string | null;
    phone?: string | null;
    timezone?: string | null;
  };
  questions?:
    | {
        question?: string | null;
        answer?: string | null;
        id?: string | null;
      }[]
    | null;
  notes?: string | null;
  cancellationReason?: string | null;
  canceledBy?: string | null;
  previousStartTime?: string | null;
  previousEndTime?: string | null;
  calendlyURI?: string | null;
  calendlyUUID?: string | null;
  calendlyEventTypeURI?: string | null;
  settingsId?: string | null;
  source?: string | null;
  medium?: string | null;
  campaign?: string | null;
  rawData?: string | null;
  /**
   * Заказ, связанный с этим бронированием
   */
  order?: (string | null) | Order;
  /**
   * Отметьте, если консультация оплачена
   */
  isPaid?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * User reviews and ratings for courses.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-reviews".
 */
export interface CourseReview {
  id: string;
  user: string | User;
  course: string | Course;
  /**
   * Ensures only enrolled users can review.
   */
  enrollment: string | CourseEnrollment;
  rating: number;
  reviewText?: string | null;
  status?: ('pending' | 'approved' | 'rejected') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Submissions for quizzes and assignments.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assessment-submissions".
 */
export interface AssessmentSubmission {
  id: string;
  assessment: string | Assessment;
  user: string | User;
  enrollment: string | CourseEnrollment;
  submittedAt: string;
  status: 'submitted' | 'grading' | 'graded';
  /**
   * Score percentage (0-100).
   */
  score?: number | null;
  /**
   * Stores the user's answers for quizzes.
   */
  answers?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Files submitted for assignment type assessments.
   */
  files?: (string | Media)[] | null;
  /**
   * Feedback provided by the instructor/grader.
   */
  feedback?: string | null;
  attemptNumber?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Определите последовательности курсов для пользователей.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "learning-paths".
 */
export interface LearningPath {
  id: string;
  title: string;
  description?: string | null;
  /**
   * Выберите курсы и упорядочите их в нужной последовательности.
   */
  courses: (string | Course)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * Записи пользователей в списке ожидания для курсов.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "waiting-list-entries".
 */
export interface WaitingListEntry {
  id: string;
  user: string | User;
  course: string | Course;
  /**
   * Отметьте, если пользователь был уведомлен об освободившемся месте.
   */
  notified?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug:
          | 'inline'
          | 'newsletter-broadcast'
          | 'recalculate-user-segments'
          | 'email-campaign'
          | 'check-expiring-rewards'
          | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?:
    | (
        | 'inline'
        | 'newsletter-broadcast'
        | 'recalculate-user-segments'
        | 'email-campaign'
        | 'check-expiring-rewards'
        | 'schedulePublish'
      )
    | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'tags';
        value: string | Tag;
      } | null)
    | ({
        relationTo: 'notifications';
        value: string | Notification;
      } | null)
    | ({
        relationTo: 'course-analytics';
        value: string | CourseAnalytic;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'post-metrics';
        value: string | PostMetric;
      } | null)
    | ({
        relationTo: 'authors';
        value: string | Author;
      } | null)
    | ({
        relationTo: 'comments';
        value: string | Comments;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'productCategories';
        value: string | ProductCategory;
      } | null)
    | ({
        relationTo: 'services';
        value: string | Service;
      } | null)
    | ({
        relationTo: 'orders';
        value: string | Order;
      } | null)
    | ({
        relationTo: 'order-tracking';
        value: string | OrderTracking;
      } | null)
    | ({
        relationTo: 'cart-sessions';
        value: string | CartSession;
      } | null)
    | ({
        relationTo: 'discounts';
        value: string | Discount;
      } | null)
    | ({
        relationTo: 'promotions';
        value: string | Promotion;
      } | null)
    | ({
        relationTo: 'reviews';
        value: string | Review;
      } | null)
    | ({
        relationTo: 'courses';
        value: string | Course;
      } | null)
    | ({
        relationTo: 'modules';
        value: string | Module;
      } | null)
    | ({
        relationTo: 'lessons';
        value: string | Lesson;
      } | null)
    | ({
        relationTo: 'resources';
        value: string | Resource;
      } | null)
    | ({
        relationTo: 'achievements';
        value: string | Achievement;
      } | null)
    | ({
        relationTo: 'user-achievements';
        value: string | UserAchievement;
      } | null)
    | ({
        relationTo: 'course-enrollments';
        value: string | CourseEnrollment;
      } | null)
    | ({
        relationTo: 'lesson-progress';
        value: string | LessonProgress;
      } | null)
    | ({
        relationTo: 'leaderboard';
        value: string | Leaderboard;
      } | null)
    | ({
        relationTo: 'rewards';
        value: string | Reward;
      } | null)
    | ({
        relationTo: 'user-rewards';
        value: string | UserReward;
      } | null)
    | ({
        relationTo: 'certificates';
        value: string | Certificate;
      } | null)
    | ({
        relationTo: 'templates';
        value: string | Template;
      } | null)
    | ({
        relationTo: 'automation-jobs';
        value: string | AutomationJob;
      } | null)
    | ({
        relationTo: 'forum-categories';
        value: string | ForumCategory;
      } | null)
    | ({
        relationTo: 'messages';
        value: string | Message;
      } | null)
    | ({
        relationTo: 'newsletter-subscribers';
        value: string | NewsletterSubscriber;
      } | null)
    | ({
        relationTo: 'email-templates';
        value: string | EmailTemplate;
      } | null)
    | ({
        relationTo: 'sender-emails';
        value: string | SenderEmail;
      } | null)
    | ({
        relationTo: 'email-campaigns';
        value: string | EmailCampaign;
      } | null)
    | ({
        relationTo: 'broadcasts';
        value: string | Broadcast;
      } | null)
    | ({
        relationTo: 'broadcast-reports';
        value: string | BroadcastReport;
      } | null)
    | ({
        relationTo: 'popups';
        value: string | Popup;
      } | null)
    | ({
        relationTo: 'user-segments';
        value: string | UserSegment;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: string | Testimonials;
      } | null)
    | ({
        relationTo: 'user-favorites';
        value: string | UserFavorite;
      } | null)
    | ({
        relationTo: 'subscription-plans';
        value: string | SubscriptionPlan;
      } | null)
    | ({
        relationTo: 'subscriptions';
        value: string | Subscription;
      } | null)
    | ({
        relationTo: 'subscription-payments';
        value: string | SubscriptionPayment;
      } | null)
    | ({
        relationTo: 'integrations';
        value: string | Integration;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'solutions';
        value: string | Solution;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'calendly-settings';
        value: string | CalendlySetting;
      } | null)
    | ({
        relationTo: 'bookings';
        value: string | Booking;
      } | null)
    | ({
        relationTo: 'assessments';
        value: string | Assessment;
      } | null)
    | ({
        relationTo: 'course-reviews';
        value: string | CourseReview;
      } | null)
    | ({
        relationTo: 'assessment-submissions';
        value: string | AssessmentSubmission;
      } | null)
    | ({
        relationTo: 'learning-paths';
        value: string | LearningPath;
      } | null)
    | ({
        relationTo: 'waiting-list-entries';
        value: string | WaitingListEntry;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        content?: T | ContentBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        urgencyCTA?: T | UrgencyCTABlockSelect<T>;
        hero?: T | HeroBlockSelect<T>;
        features?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
            };
        divider?:
          | T
          | {
              blockName?: T;
              style?: T;
              width?: T;
              spacing?: T;
              id?: T;
            };
        steps?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              steps?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    media?: T;
                    id?: T;
                  };
              layout?: T;
              showNumbers?: T;
              showLines?: T;
              id?: T;
            };
        accordion?:
          | T
          | {
              blockName?: T;
              items?:
                | T
                | {
                    label?: T;
                    content?: T;
                    items?:
                      | T
                      | {
                          label?: T;
                          content?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              style?: T;
              size?: T;
              variant?: T;
              allowMultiple?: T;
              defaultOpen?:
                | T
                | {
                    index?: T;
                    id?: T;
                  };
              id?: T;
            };
        card?: T | CardBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        code?: T | CodeBlockSelect<T>;
        video?:
          | T
          | {
              blockName?: T;
              videoType?: T;
              videoId?: T;
              videoUrl?: T;
              videoFile?: T;
              poster?: T;
              aspectRatio?: T;
              autoPlay?: T;
              muted?: T;
              loop?: T;
              controls?: T;
              caption?: T;
              style?: T;
              size?: T;
              id?: T;
            };
        audio?: T | AudioBlockSelect<T>;
        carousel?:
          | T
          | {
              blockName?: T;
              heading?: T;
              subheading?: T;
              description?: T;
              items?:
                | T
                | {
                    media?: T;
                    heading?: T;
                    caption?: T;
                    content?: T;
                    actions?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          style?: T;
                          newTab?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              autoplay?: T;
              interval?: T;
              showControls?: T;
              showIndicators?: T;
              id?: T;
            };
        gallery?:
          | T
          | {
              blockName?: T;
              heading?: T;
              items?:
                | T
                | {
                    media?: T;
                    caption?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              spacing?: T;
              id?: T;
            };
        videoLessons?: T | VideoLessonsBlockSelect<T>;
        banner?: T | BannerBlockSelect<T>;
        faq?: T | FAQBlockSelect<T>;
        courseFAQ?: T | CourseFAQBlockSelect<T>;
        pricingTable?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              plans?:
                | T
                | {
                    name?: T;
                    price?: T;
                    interval?: T;
                    description?: T;
                    features?:
                      | T
                      | {
                          text?: T;
                          included?: T;
                          id?: T;
                        };
                    isPopular?: T;
                    actions?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          style?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              layout?: T;
              id?: T;
            };
        coursePricingComparison?: T | CoursePricingComparisonBlockSelect<T>;
        stats?: T | StatsBlockSelect<T>;
        tabs?: T | TabsBlockSelect<T>;
        timeline?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    title?: T;
                    date?: T;
                    description?: T;
                    media?: T;
                    id?: T;
                  };
              layout?: T;
              showDates?: T;
              showLines?: T;
              id?: T;
            };
        tableOfContents?:
          | T
          | {
              blockName?: T;
              title?: T;
              autoGenerate?: T;
              items?:
                | T
                | {
                    title?: T;
                    anchor?: T;
                    level?: T;
                    id?: T;
                  };
              sticky?: T;
              showNumbers?: T;
              maxDepth?: T;
              id?: T;
            };
        roadmap?: T | RoadmapBlockSelect<T>;
        benefitsOutcomes?: T | BenefitsOutcomesBlockSelect<T>;
        targetAudience?: T | TargetAudienceBlockSelect<T>;
        guarantee?: T | GuaranteeBlockSelect<T>;
        socialProofAdvanced?: T | SocialProofAdvancedBlockSelect<T>;
        teamMembers?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              members?:
                | T
                | {
                    name?: T;
                    role?: T;
                    bio?: T;
                    avatar?: T;
                    social?:
                      | T
                      | {
                          twitter?: T;
                          linkedin?: T;
                          github?: T;
                          website?: T;
                        };
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
            };
        testimonials?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    author?: T;
                    role?: T;
                    company?: T;
                    avatar?: T;
                    content?: T;
                    rating?: T;
                    id?: T;
                  };
              layout?: T;
              style?: T;
              id?: T;
            };
        instructorProfile?: T | InstructorProfileBlockSelect<T>;
        header?: T | HeaderBlockSelect<T>;
        footer?: T | FooterBlockSelect<T>;
        services?: T | ServicesBlockSelect<T>;
        caseStudies?: T | CaseStudiesBlockSelect<T>;
        techStack?: T | TechStackBlockSelect<T>;
        plansComparison?: T | PlansComparisonBlockSelect<T>;
        course?: T | CourseBlockSelect<T>;
        curriculum?: T | CurriculumBlockSelect<T>;
        userProgress?: T | UserProgressBlockSelect<T>;
        certificates?: T | CertificatesBlockSelect<T>;
        resourceLibrary?: T | ResourceLibraryBlockSelect<T>;
        aiTools?: T | AiToolsBlockSelect<T>;
        leaderboard?: T | LeaderboardBlockSelect<T>;
        courseOverview?: T | CourseOverviewBlockSelect<T>;
        quizAssessment?: T | QuizAssessmentBlockSelect<T>;
        assignments?: T | AssignmentsBlockSelect<T>;
        achievementsBlock?: T | AchievementsBlockTypeSelect<T>;
        projectShowcase?: T | ProjectShowcaseBlockSelect<T>;
        funnelStep?: T | FunnelStepBlockSelect<T>;
        recommendations?: T | RecommendationsBlockSelect<T>;
        popupTriggerConfig?: T | PopupTriggerConfigBlockSelect<T>;
        productsFilter?: T | ProductsFilterBlockSelect<T>;
        productsList?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              products?: T;
              enableDynamicSource?: T;
              source?: T;
              limit?: T;
              enableFiltering?: T;
              layout?: T;
              columns?: T;
              id?: T;
            };
        formBlock?: T | FormBlockSelect<T>;
        newsletter?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              buttonText?: T;
              layout?: T;
              image?: T;
              placeholder?: T;
              successMessage?: T;
              id?: T;
            };
        feedback?: T | FeedbackBlockSelect<T>;
        poll?: T | PollBlockSelect<T>;
        aiAssistant?: T | AiAssistantBlockSelect<T>;
        leadMagnetOffer?: T | LeadMagnetOfferBlockSelect<T>;
        discussionForum?: T | DiscussionForumBlockSelect<T>;
        articleHeader?:
          | T
          | {
              blockName?: T;
              title?: T;
              subtitle?: T;
              description?: T;
              coverImage?: T;
              publishDate?: T;
              author?:
                | T
                | {
                    name?: T;
                    avatar?: T;
                    role?: T;
                  };
              categories?:
                | T
                | {
                    category?: T;
                    id?: T;
                  };
              layout?: T;
              id?: T;
            };
        authorBio?:
          | T
          | {
              blockName?: T;
              author?:
                | T
                | {
                    name?: T;
                    avatar?: T;
                    bio?: T;
                    role?: T;
                    company?: T;
                    socialLinks?:
                      | T
                      | {
                          platform?: T;
                          url?: T;
                          id?: T;
                        };
                  };
              layout?: T;
              id?: T;
            };
        blockquote?:
          | T
          | {
              blockName?: T;
              quote?: T;
              author?: T;
              source?: T;
              avatar?: T;
              style?: T;
              align?: T;
              id?: T;
            };
        comments?:
          | T
          | {
              blockName?: T;
              title?: T;
              provider?: T;
              disqusShortname?: T;
              facebookAppId?: T;
              showCount?: T;
              commentsPerPage?: T;
              allowReplies?: T;
              requireAuth?: T;
              moderationEnabled?: T;
              id?: T;
            };
        relatedPosts?:
          | T
          | {
              blockName?: T;
              title?: T;
              selectionMethod?: T;
              posts?: T;
              maxPosts?: T;
              criteria?: T;
              layout?: T;
              showFeaturedImage?: T;
              showExcerpt?: T;
              showDate?: T;
              showAuthor?: T;
              id?: T;
            };
        socialShare?:
          | T
          | {
              blockName?: T;
              title?: T;
              platforms?: T;
              layout?: T;
              showShareCount?: T;
              id?: T;
            };
        interactiveDemo?: T | InteractiveDemoBlockSelect<T>;
        calendar?: T | CalendarBlockSelect<T>;
        eventTracker?: T | EventTrackerBlockSelect<T>;
        reportEmbed?: T | ReportEmbedBlockSelect<T>;
        chat?: T | ChatBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  columns?:
    | T
    | {
        size?: T;
        verticalAlignment?: T;
        horizontalAlignment?: T;
        richText?: T;
        enableActions?: T;
        actions?:
          | T
          | {
              actionType?: T;
              label?: T;
              type?: T;
              reference?: T;
              url?: T;
              appearance?: T;
              newTab?: T;
              icon?: T;
              id?: T;
            };
        id?: T;
      };
  settings?:
    | T
    | {
        backgroundColor?: T;
        textAlignment?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  actions?:
    | T
    | {
        actionType?: T;
        label?: T;
        type?: T;
        reference?: T;
        url?: T;
        appearance?: T;
        newTab?: T;
        icon?: T;
        id?: T;
      };
  style?: T;
  background?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UrgencyCTABlock_select".
 */
export interface UrgencyCTABlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  urgencyElement?: T;
  countdownEndDate?: T;
  limitedSpotsText?: T;
  initialSpotsCount?: T;
  endDateText?: T;
  offerEndDate?: T;
  ctaButton?:
    | T
    | {
        label?: T;
        url?: T;
        openInNewTab?: T;
      };
  secondaryButton?:
    | T
    | {
        label?: T;
        url?: T;
      };
  layout?: T;
  backgroundColor?: T;
  backgroundImage?: T;
  textColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock_select".
 */
export interface HeroBlockSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  media?: T;
  actions?:
    | T
    | {
        actionType?: T;
        label?: T;
        type?: T;
        reference?: T;
        url?: T;
        appearance?: T;
        newTab?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardBlock_select".
 */
export interface CardBlockSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  media?: T;
  action?:
    | T
    | {
        label?: T;
        href?: T;
        style?: T;
      };
  isLink?: T;
  style?: T;
  size?: T;
  hover?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock_select".
 */
export interface CodeBlockSelect<T extends boolean = true> {
  language?: T;
  code?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AudioBlock_select".
 */
export interface AudioBlockSelect<T extends boolean = true> {
  audioFile?: T;
  title?: T;
  artist?: T;
  description?: T;
  showWaveform?: T;
  autoPlay?: T;
  loop?: T;
  downloadable?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoLessonsBlock_select".
 */
export interface VideoLessonsBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  lessonsSource?: T;
  lessons?:
    | T
    | {
        title?: T;
        description?: T;
        videoSourceType?: T;
        videoFile?: T;
        videoUrl?: T;
        thumbnail?: T;
        duration?: T;
        chapters?:
          | T
          | {
              timestamp?: T;
              title?: T;
              description?: T;
              id?: T;
            };
        interactiveElements?:
          | T
          | {
              timestamp?: T;
              elementType?: T;
              quizQuestion?: T;
              quizOptions?:
                | T
                | {
                    text?: T;
                    isCorrect?: T;
                    id?: T;
                  };
              pollQuestion?: T;
              pollOptions?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              linkUrl?: T;
              linkLabel?: T;
              noteText?: T;
              ctaText?: T;
              ctaUrl?: T;
              pauseVideo?: T;
              duration?: T;
              id?: T;
            };
        transcript?: T;
        attachments?:
          | T
          | {
              title?: T;
              file?: T;
              id?: T;
            };
        level?: T;
        tags?:
          | T
          | {
              tag?: T;
              id?: T;
            };
        id?: T;
      };
  collectionSettings?:
    | T
    | {
        targetCollection?: T;
        limit?: T;
        sortField?: T;
        sortDirection?: T;
        filters?:
          | T
          | {
              field?: T;
              operator?: T;
              value?: T;
              id?: T;
            };
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
      };
  playerSettings?:
    | T
    | {
        layout?: T;
        autoplay?: T;
        showControls?: T;
        showChapters?: T;
        showTranscript?: T;
        enablePictureInPicture?: T;
        playbackRates?:
          | T
          | {
              rate?: T;
              id?: T;
            };
        rememberPlaybackPosition?: T;
        markAsCompleted?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock_select".
 */
export interface BannerBlockSelect<T extends boolean = true> {
  style?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlock_select".
 */
export interface FAQBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  items?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  layout?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CourseFAQBlock_select".
 */
export interface CourseFAQBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  relatedCourse?: T;
  questions?:
    | T
    | {
        question?: T;
        answer?: T;
        category?: T;
        id?: T;
      };
  layout?: T;
  allowMultipleOpen?: T;
  showCategories?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CoursePricingComparisonBlock_select".
 */
export interface CoursePricingComparisonBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  relatedCourse?: T;
  plans?:
    | T
    | {
        name?: T;
        description?: T;
        price?: T;
        priceSuffix?: T;
        features?:
          | T
          | {
              feature?: T;
              included?: T;
              details?: T;
              id?: T;
            };
        ctaButton?:
          | T
          | {
              label?: T;
              url?: T;
            };
        isFeatured?: T;
        badgeText?: T;
        id?: T;
      };
  displaySettings?:
    | T
    | {
        showDescriptions?: T;
        showFeatures?: T;
        highlightFeatured?: T;
        comparisonMode?: T;
        featuresAlignment?: T;
        backgroundColor?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StatsBlock_select".
 */
export interface StatsBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  stats?:
    | T
    | {
        value?: T;
        label?: T;
        description?: T;
        prefix?: T;
        suffix?: T;
        trend?: T;
        trendValue?: T;
        id?: T;
      };
  layout?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TabsBlock_select".
 */
export interface TabsBlockSelect<T extends boolean = true> {
  tabs?:
    | T
    | {
        label?: T;
        content?: T;
        media?: T;
        id?: T;
      };
  layout?: T;
  variant?: T;
  style?: T;
  size?: T;
  defaultTab?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RoadmapBlock_select".
 */
export interface RoadmapBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  layout?: T;
  itemsSource?: T;
  items?:
    | T
    | {
        title?: T;
        description?: T;
        status?: T;
        startDate?: T;
        endDate?: T;
        category?: T;
        tags?:
          | T
          | {
              tag?: T;
              id?: T;
            };
        priority?: T;
        assignedTo?: T;
        progress?: T;
        link?: T;
        icon?: T;
        id?: T;
      };
  collectionSettings?:
    | T
    | {
        targetCollection?: T;
        limit?: T;
        sortField?: T;
        sortDirection?: T;
        fieldMapping?:
          | T
          | {
              title?: T;
              description?: T;
              status?: T;
              startDate?: T;
              endDate?: T;
            };
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
      };
  displaySettings?:
    | T
    | {
        showStatus?: T;
        showDates?: T;
        showProgress?: T;
        showTags?: T;
        showCategory?: T;
        groupBy?: T;
        enableFiltering?: T;
        enableVoting?: T;
        colorScheme?: T;
        customColors?:
          | T
          | {
              value?: T;
              color?: T;
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BenefitsOutcomesBlock_select".
 */
export interface BenefitsOutcomesBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  items?:
    | T
    | {
        icon?: T;
        title?: T;
        description?: T;
        link?:
          | T
          | {
              label?: T;
              url?: T;
            };
        id?: T;
      };
  layout?: T;
  columns?: T;
  alignment?: T;
  iconPosition?: T;
  backgroundColor?: T;
  itemBackgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TargetAudienceBlock_select".
 */
export interface TargetAudienceBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  audienceDescription?: T;
  idealFor?:
    | T
    | {
        icon?: T;
        groupName?: T;
        description?: T;
        id?: T;
      };
  prerequisites?:
    | T
    | {
        heading?: T;
        items?:
          | T
          | {
              requirement?: T;
              id?: T;
            };
      };
  notIdealFor?:
    | T
    | {
        heading?: T;
        items?:
          | T
          | {
              reason?: T;
              id?: T;
            };
      };
  layout?: T;
  columns?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GuaranteeBlock_select".
 */
export interface GuaranteeBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  icon?: T;
  guaranteeText?: T;
  duration?: T;
  conditions?:
    | T
    | {
        condition?: T;
        id?: T;
      };
  ctaButton?:
    | T
    | {
        label?: T;
        url?: T;
      };
  layout?: T;
  backgroundColor?: T;
  borderColor?: T;
  textColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SocialProofAdvancedBlock_select".
 */
export interface SocialProofAdvancedBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  elements?:
    | T
    | {
        logos?:
          | T
          | {
              title?: T;
              items?:
                | T
                | {
                    logo?: T;
                    name?: T;
                    url?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
              blockName?: T;
            };
      };
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InstructorProfileBlock_select".
 */
export interface InstructorProfileBlockSelect<T extends boolean = true> {
  heading?: T;
  instructorSource?: T;
  instructorRelation?: T;
  manualData?:
    | T
    | {
        name?: T;
        title?: T;
        photo?: T;
        bio?: T;
        socialLinks?:
          | T
          | {
              platform?: T;
              url?: T;
              id?: T;
            };
        expertise?:
          | T
          | {
              area?: T;
              id?: T;
            };
        achievements?:
          | T
          | {
              achievement?: T;
              id?: T;
            };
      };
  displaySettings?:
    | T
    | {
        layout?: T;
        showTitle?: T;
        showBio?: T;
        bioLength?: T;
        showSocialLinks?: T;
        showExpertise?: T;
        showAchievements?: T;
        linkToFullProfile?: T;
        profilePageUrl?: T;
        backgroundColor?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeaderBlock_select".
 */
export interface HeaderBlockSelect<T extends boolean = true> {
  logo?: T;
  navigation?:
    | T
    | {
        label?: T;
        href?: T;
        isActive?: T;
        id?: T;
      };
  actions?:
    | T
    | {
        label?: T;
        href?: T;
        style?: T;
        id?: T;
      };
  style?: T;
  sticky?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FooterBlock_select".
 */
export interface FooterBlockSelect<T extends boolean = true> {
  logo?: T;
  copyright?: T;
  columns?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              label?: T;
              href?: T;
              isExternal?: T;
              id?: T;
            };
        id?: T;
      };
  social?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  layout?: T;
  style?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServicesBlock_select".
 */
export interface ServicesBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  services?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        image?: T;
        features?:
          | T
          | {
              text?: T;
              id?: T;
            };
        cta?:
          | T
          | {
              label?: T;
              href?: T;
              style?: T;
            };
        isPopular?: T;
        id?: T;
      };
  layout?: T;
  columns?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CaseStudiesBlock_select".
 */
export interface CaseStudiesBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  cases?:
    | T
    | {
        title?: T;
        client?: T;
        summary?: T;
        description?: T;
        coverImage?: T;
        gallery?:
          | T
          | {
              image?: T;
              caption?: T;
              id?: T;
            };
        tags?:
          | T
          | {
              tag?: T;
              id?: T;
            };
        results?:
          | T
          | {
              metric?: T;
              value?: T;
              description?: T;
              id?: T;
            };
        testimonial?:
          | T
          | {
              quote?: T;
              author?: T;
              position?: T;
              avatar?: T;
            };
        cta?:
          | T
          | {
              label?: T;
              href?: T;
            };
        featured?: T;
        id?: T;
      };
  layout?: T;
  columns?: T;
  filterByTags?: T;
  showFeaturedOnly?: T;
  limit?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TechStackBlock_select".
 */
export interface TechStackBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  categories?:
    | T
    | {
        name?: T;
        description?: T;
        technologies?:
          | T
          | {
              name?: T;
              description?: T;
              logo?: T;
              url?: T;
              expertise?: T;
              experienceYears?: T;
              featured?: T;
              id?: T;
            };
        id?: T;
      };
  partners?:
    | T
    | {
        name?: T;
        logo?: T;
        description?: T;
        url?: T;
        id?: T;
      };
  showLogosOnly?: T;
  showExpertiseLevels?: T;
  layout?: T;
  columns?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PlansComparisonBlock_select".
 */
export interface PlansComparisonBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  switchLabels?:
    | T
    | {
        firstOption?: T;
        secondOption?: T;
        showDiscount?: T;
        discountText?: T;
      };
  plans?:
    | T
    | {
        name?: T;
        description?: T;
        icon?: T;
        monthlyPrice?:
          | T
          | {
              value?: T;
              currency?: T;
              suffix?: T;
              strikethroughPrice?: T;
            };
        yearlyPrice?:
          | T
          | {
              value?: T;
              currency?: T;
              suffix?: T;
              strikethroughPrice?: T;
              monthlyEquivalent?: T;
            };
        features?:
          | T
          | {
              feature?: T;
              included?: T;
              customValue?: T;
              highlight?: T;
              id?: T;
            };
        cta?:
          | T
          | {
              label?: T;
              url?: T;
              style?: T;
            };
        isPopular?: T;
        badge?: T;
        id?: T;
      };
  featureCategories?:
    | T
    | {
        name?: T;
        features?:
          | T
          | {
              name?: T;
              description?: T;
              id?: T;
            };
        id?: T;
      };
  disclaimer?: T;
  layout?: T;
  showFeatureComparison?: T;
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CourseBlock_select".
 */
export interface CourseBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  description?: T;
  coverImage?: T;
  level?: T;
  duration?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  format?: T;
  startDate?: T;
  enrollmentStatus?: T;
  pricing?:
    | T
    | {
        price?: T;
        currency?: T;
        discountPrice?: T;
        installmentAvailable?: T;
        installmentDetails?: T;
      };
  learningOutcomes?:
    | T
    | {
        outcome?: T;
        id?: T;
      };
  requirements?:
    | T
    | {
        requirement?: T;
        id?: T;
      };
  targetAudience?:
    | T
    | {
        audience?: T;
        id?: T;
      };
  curriculum?:
    | T
    | {
        title?: T;
        description?: T;
        lessons?:
          | T
          | {
              title?: T;
              description?: T;
              duration?: T;
              id?: T;
            };
        id?: T;
      };
  instructors?:
    | T
    | {
        name?: T;
        role?: T;
        bio?: T;
        photo?: T;
        id?: T;
      };
  testimonials?:
    | T
    | {
        text?: T;
        studentName?: T;
        studentTitle?: T;
        studentImage?: T;
        rating?: T;
        id?: T;
      };
  faq?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  certificates?:
    | T
    | {
        issueCertificate?: T;
        certificateDescription?: T;
        certificateImage?: T;
      };
  enrollmentCTA?:
    | T
    | {
        buttonText?: T;
        url?: T;
        additionalText?: T;
      };
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CurriculumBlock_select".
 */
export interface CurriculumBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  courseId?: T;
  modules?:
    | T
    | {
        title?: T;
        description?: T;
        duration?: T;
        topics?:
          | T
          | {
              title?: T;
              description?: T;
              duration?: T;
              learningFormat?: T;
              materials?:
                | T
                | {
                    type?: T;
                    title?: T;
                    url?: T;
                    file?: T;
                    id?: T;
                  };
              id?: T;
            };
        skills?:
          | T
          | {
              skill?: T;
              id?: T;
            };
        projects?:
          | T
          | {
              title?: T;
              description?: T;
              image?: T;
              id?: T;
            };
        isAdvanced?: T;
        id?: T;
      };
  prerequisites?:
    | T
    | {
        prerequisite?: T;
        id?: T;
      };
  learningOutcomes?:
    | T
    | {
        outcome?: T;
        id?: T;
      };
  layout?: T;
  showProgress?: T;
  callToAction?:
    | T
    | {
        text?: T;
        url?: T;
      };
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UserProgressBlock_select".
 */
export interface UserProgressBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  displayType?: T;
  dataSource?: T;
  staticData?:
    | T
    | {
        label?: T;
        value?: T;
        maxValue?: T;
        color?: T;
        icon?: T;
        id?: T;
      };
  userDataFields?:
    | T
    | {
        field?: T;
        label?: T;
        fieldType?: T;
        color?: T;
        icon?: T;
        id?: T;
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
        method?: T;
        headers?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
        responseMapping?:
          | T
          | {
              field?: T;
              label?: T;
              type?: T;
              id?: T;
            };
      };
  achievements?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        requiredValue?: T;
        fieldToTrack?: T;
        reward?: T;
        isSecret?: T;
        id?: T;
      };
  chartSettings?:
    | T
    | {
        chartType?: T;
        showLegend?: T;
        enableAnimation?: T;
        period?: T;
      };
  settings?:
    | T
    | {
        showTrends?: T;
        enableComparison?: T;
        refreshInterval?: T;
        showTips?: T;
        customCSS?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CertificatesBlock_select".
 */
export interface CertificatesBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  displayType?: T;
  certificatesSource?: T;
  certificates?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        issueDate?: T;
        expiryDate?: T;
        issuer?:
          | T
          | {
              name?: T;
              logo?: T;
              website?: T;
            };
        credentialID?: T;
        verificationUrl?: T;
        skills?:
          | T
          | {
              skill?: T;
              id?: T;
            };
        status?: T;
        requirements?:
          | T
          | {
              requirement?: T;
              completed?: T;
              id?: T;
            };
        id?: T;
      };
  collectionSettings?:
    | T
    | {
        targetCollection?: T;
        limit?: T;
        sortField?: T;
        sortDirection?: T;
        filters?:
          | T
          | {
              field?: T;
              operator?: T;
              value?: T;
              id?: T;
            };
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
        apiKey?: T;
        method?: T;
        headers?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
        responseMapping?:
          | T
          | {
              items?: T;
              title?: T;
              description?: T;
              image?: T;
            };
      };
  userSettings?:
    | T
    | {
        userField?: T;
        showCompletedOnly?: T;
        showAvailable?: T;
      };
  settings?:
    | T
    | {
        enableFiltering?: T;
        enableSearch?: T;
        cardsPerRow?: T;
        showIssuer?: T;
        showDate?: T;
        enableSocialSharing?: T;
        enablePrinting?: T;
        enableDownload?: T;
        progressDisplay?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ResourceLibraryBlock_select".
 */
export interface ResourceLibraryBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  displayType?: T;
  resourcesSource?: T;
  categories?:
    | T
    | {
        name?: T;
        description?: T;
        icon?: T;
        slug?: T;
        parentCategory?: T;
        order?: T;
        id?: T;
      };
  resources?:
    | T
    | {
        title?: T;
        description?: T;
        type?: T;
        thumbnail?: T;
        categoryIds?:
          | T
          | {
              category?: T;
              id?: T;
            };
        url?: T;
        file?: T;
        author?:
          | T
          | {
              name?: T;
              avatar?: T;
              bio?: T;
            };
        createdAt?: T;
        updatedAt?: T;
        tags?:
          | T
          | {
              tag?: T;
              id?: T;
            };
        level?: T;
        duration?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        isFeatured?: T;
        isExternal?: T;
        accessLevel?: T;
        viewCount?: T;
        downloadCount?: T;
        rating?:
          | T
          | {
              average?: T;
              count?: T;
            };
        relatedResources?:
          | T
          | {
              resourceId?: T;
              id?: T;
            };
        id?: T;
      };
  collectionSettings?:
    | T
    | {
        targetCollection?: T;
        limit?: T;
        sortField?: T;
        sortDirection?: T;
        filters?:
          | T
          | {
              field?: T;
              operator?: T;
              value?: T;
              id?: T;
            };
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
        apiKey?: T;
        method?: T;
        headers?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
        params?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
        responseMapping?:
          | T
          | {
              items?: T;
              title?: T;
              description?: T;
              thumbnail?: T;
              url?: T;
            };
      };
  settings?:
    | T
    | {
        enableFiltering?: T;
        enableSearch?: T;
        enableSorting?: T;
        enableFavorites?: T;
        enableRating?: T;
        enableSharing?: T;
        showCategoriesNav?: T;
        itemsPerPage?: T;
        itemsPerRow?: T;
        showTags?: T;
        showCategories?: T;
        showAuthor?: T;
        showDate?: T;
        showDescription?: T;
        truncateDescription?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AiToolsBlock_select".
 */
export interface AiToolsBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  displayType?: T;
  toolsSource?: T;
  categories?:
    | T
    | {
        name?: T;
        description?: T;
        icon?: T;
        slug?: T;
        id?: T;
      };
  tools?:
    | T
    | {
        name?: T;
        logo?: T;
        description?: T;
        websiteUrl?: T;
        categoryIds?:
          | T
          | {
              category?: T;
              id?: T;
            };
        pricingModel?: T;
        features?:
          | T
          | {
              feature?: T;
              id?: T;
            };
        useCases?:
          | T
          | {
              useCase?: T;
              id?: T;
            };
        tags?:
          | T
          | {
              tag?: T;
              id?: T;
            };
        integration?: T;
        rating?: T;
        isFeatured?: T;
        reviewLink?: T;
        id?: T;
      };
  collectionSettings?:
    | T
    | {
        targetCollection?: T;
        limit?: T;
        sortField?: T;
        sortDirection?: T;
        filters?:
          | T
          | {
              field?: T;
              operator?: T;
              value?: T;
              id?: T;
            };
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
        apiKey?: T;
        method?: T;
        headers?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
        responseMapping?:
          | T
          | {
              items?: T;
              name?: T;
              description?: T;
              logo?: T;
              websiteUrl?: T;
            };
      };
  settings?:
    | T
    | {
        enableFiltering?: T;
        enableSearch?: T;
        enableSorting?: T;
        showCategoriesNav?: T;
        itemsPerPage?: T;
        itemsPerRow?: T;
        showTags?: T;
        showPricing?: T;
        showRating?: T;
        showFeatures?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LeaderboardBlock_select".
 */
export interface LeaderboardBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  leaderboardType?: T;
  dataSource?: T;
  usersCollectionSettings?:
    | T
    | {
        scoreField?: T;
        period?: T;
        filter?: T;
      };
  leaderboardCollectionSettings?:
    | T
    | {
        targetCollection?: T;
        userRelationField?: T;
        scoreField?: T;
        periodField?: T;
        filter?: T;
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
        apiKey?: T;
        responseMapping?:
          | T
          | {
              items?: T;
              userName?: T;
              userAvatar?: T;
              score?: T;
              rank?: T;
            };
      };
  displaySettings?:
    | T
    | {
        limit?: T;
        showRank?: T;
        showAvatar?: T;
        showScore?: T;
        scoreLabel?: T;
        highlightCurrentUser?: T;
        currentUserPosition?: T;
        refreshInterval?: T;
        pagination?: T;
        emptyStateMessage?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CourseOverviewBlock_select".
 */
export interface CourseOverviewBlockSelect<T extends boolean = true> {
  courseSource?: T;
  courseRelation?: T;
  manualData?:
    | T
    | {
        title?: T;
        subtitle?: T;
        shortDescription?: T;
        targetAudience?: T;
        duration?: T;
        level?: T;
        keyTopics?:
          | T
          | {
              topic?: T;
              icon?: T;
              id?: T;
            };
        instructor?:
          | T
          | {
              name?: T;
              photo?: T;
              title?: T;
            };
        mainImage?: T;
        ctaButton?:
          | T
          | {
              label?: T;
              url?: T;
              openInNewTab?: T;
            };
      };
  displaySettings?:
    | T
    | {
        layout?: T;
        showSubtitle?: T;
        showAudience?: T;
        showDuration?: T;
        showLevel?: T;
        showInstructor?: T;
        showKeyTopics?: T;
        backgroundColor?: T;
        textColor?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuizAssessmentBlock_select".
 */
export interface QuizAssessmentBlockSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  relatedCourseOrModule?: T;
  questions?:
    | T
    | {
        questionText?: T;
        questionType?: T;
        image?: T;
        options?:
          | T
          | {
              optionText?: T;
              isCorrect?: T;
              feedback?: T;
              id?: T;
            };
        matchingPairs?:
          | T
          | {
              prompt?: T;
              correctMatch?: T;
              id?: T;
            };
        orderingItems?:
          | T
          | {
              itemText?: T;
              id?: T;
            };
        correctAnswerText?: T;
        points?: T;
        feedbackForAll?: T;
        id?: T;
      };
  settings?:
    | T
    | {
        timeLimit?: T;
        passingScore?: T;
        attemptsAllowed?: T;
        randomizeQuestions?: T;
        randomizeOptions?: T;
        showCorrectAnswers?: T;
        showFeedback?: T;
        trackProgress?: T;
      };
  resultMessages?:
    | T
    | {
        passMessage?: T;
        failMessage?: T;
      };
  layout?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AssignmentsBlock_select".
 */
export interface AssignmentsBlockSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  relatedCourseOrModule?: T;
  dueDate?: T;
  submissionType?: T;
  allowedFileTypes?: T;
  maxFileSizeMB?: T;
  maxFileCount?: T;
  attachedMaterials?:
    | T
    | {
        materialFile?: T;
        description?: T;
        id?: T;
      };
  gradingCriteria?: T;
  pointsPossible?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AchievementsBlockType_select".
 */
export interface AchievementsBlockTypeSelect<T extends boolean = true> {
  blockTitle?: T;
  displayMode?: T;
  achievementsToShow?: T;
  layout?: T;
  limit?: T;
  showLockedState?: T;
  viewAllLink?:
    | T
    | {
        type?: T;
        label?: T;
        reference?: T;
        url?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProjectShowcaseBlock_select".
 */
export interface ProjectShowcaseBlockSelect<T extends boolean = true> {
  blockTitle?: T;
  sourceType?: T;
  categoryOrTag?: T;
  relatedCourse?: T;
  selectedProjects?: T;
  limit?: T;
  layout?: T;
  displayOptions?:
    | T
    | {
        showAuthor?: T;
        showDate?: T;
        showTags?: T;
        showDescriptionExcerpt?: T;
      };
  viewAllLink?:
    | T
    | {
        type?: T;
        label?: T;
        reference?: T;
        url?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FunnelStepBlock_select".
 */
export interface FunnelStepBlockSelect<T extends boolean = true> {
  stepName?: T;
  funnelId?: T;
  stepId?: T;
  notes?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RecommendationsBlock_select".
 */
export interface RecommendationsBlockSelect<T extends boolean = true> {
  blockTitle?: T;
  recommendationType?: T;
  sourceCollection?: T;
  manualRecommendations?: T;
  limit?: T;
  layout?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PopupTriggerConfigBlock_select".
 */
export interface PopupTriggerConfigBlockSelect<T extends boolean = true> {
  popupId?: T;
  triggerType?: T;
  scrollPercentage?: T;
  timerSeconds?: T;
  clickSelector?: T;
  displayFrequency?: T;
  frequencyDays?: T;
  notes?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductsFilterBlock_select".
 */
export interface ProductsFilterBlockSelect<T extends boolean = true> {
  enableCategories?: T;
  enableSort?: T;
  enableSearch?: T;
  enablePriceRange?: T;
  priceRanges?:
    | T
    | {
        en?:
          | T
          | {
              min?: T;
              max?: T;
            };
        ru?:
          | T
          | {
              min?: T;
              max?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeedbackBlock_select".
 */
export interface FeedbackBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  formFields?:
    | T
    | {
        fieldName?: T;
        label?: T;
        fieldType?: T;
        options?:
          | T
          | {
              label?: T;
              value?: T;
              id?: T;
            };
        placeholder?: T;
        defaultValue?: T;
        required?: T;
        maxLength?: T;
        min?: T;
        max?: T;
        step?: T;
        id?: T;
      };
  submitButtonLabel?: T;
  submissionTarget?: T;
  collectionSettings?:
    | T
    | {
        targetCollection?: T;
        mapFields?:
          | T
          | {
              formField?: T;
              collectionField?: T;
              id?: T;
            };
        associateWithUser?: T;
      };
  emailSettings?:
    | T
    | {
        recipientEmail?: T;
        subject?: T;
        sendConfirmation?: T;
        confirmationSubject?: T;
        confirmationMessage?: T;
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
        method?: T;
        headers?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
        responseMessage?: T;
      };
  successMessage?: T;
  errorMessage?: T;
  settings?:
    | T
    | {
        layout?: T;
        showLabels?: T;
        usePlaceholdersAsLabels?: T;
        enableRecaptcha?: T;
        recaptchaSiteKey?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PollBlock_select".
 */
export interface PollBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  question?: T;
  pollType?: T;
  options?:
    | T
    | {
        label?: T;
        value?: T;
        image?: T;
        voteCount?: T;
        id?: T;
      };
  ratingScaleSettings?:
    | T
    | {
        minLabel?: T;
        maxLabel?: T;
        steps?: T;
      };
  submissionTarget?: T;
  submissionCollection?: T;
  targetCollection?: T;
  collectionSettings?:
    | T
    | {
        associateWithUser?: T;
        trackIndividualVotes?: T;
      };
  apiSettings?:
    | T
    | {
        submitUrl?: T;
        resultsUrl?: T;
        method?: T;
        headers?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
      };
  settings?:
    | T
    | {
        showResults?: T;
        resultsDisplayType?: T;
        allowMultipleVotes?: T;
        requireLogin?: T;
        endDate?: T;
        closedMessage?: T;
        customCSS?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AiAssistantBlock_select".
 */
export interface AiAssistantBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  appearance?: T;
  assistantType?: T;
  apiSettings?:
    | T
    | {
        apiUrl?: T;
        apiKey?: T;
        modelName?: T;
        maxTokens?: T;
        temperature?: T;
        customHeaders?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
      };
  predefinedResponses?:
    | T
    | {
        userQuery?: T;
        response?: T;
        id?: T;
      };
  initialMessage?: T;
  promptSuggestions?:
    | T
    | {
        suggestion?: T;
        id?: T;
      };
  avatar?: T;
  placeholderText?: T;
  enableHistory?: T;
  enableVoiceInput?: T;
  enableVoiceOutput?: T;
  settings?:
    | T
    | {
        contextAwareness?: T;
        language?: T;
        themeColor?: T;
        requireLogin?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LeadMagnetOfferBlock_select".
 */
export interface LeadMagnetOfferBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  image?: T;
  formFields?:
    | T
    | {
        fieldName?: T;
        label?: T;
        fieldType?: T;
        placeholder?: T;
        required?: T;
        consentText?: T;
        id?: T;
      };
  submitButtonLabel?: T;
  submissionTarget?: T;
  submissionSettings?:
    | T
    | {
        targetCollection?: T;
      };
  emailSettings?:
    | T
    | {
        recipientEmail?: T;
        subject?: T;
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
      };
  successAction?: T;
  successMessage?: T;
  redirectUrl?: T;
  downloadFile?: T;
  layout?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DiscussionForumBlock_select".
 */
export interface DiscussionForumBlockSelect<T extends boolean = true> {
  blockTitle?: T;
  forumSourceType?: T;
  forumCategory?: T;
  topicLimit?: T;
  displayOptions?:
    | T
    | {
        showAuthor?: T;
        showReplyCount?: T;
        showLastActivity?: T;
      };
  viewForumLink?:
    | T
    | {
        type?: T;
        label?: T;
        reference?: T;
        url?: T;
      };
  newTopicLink?:
    | T
    | {
        type?: T;
        label?: T;
        reference?: T;
        url?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InteractiveDemoBlock_select".
 */
export interface InteractiveDemoBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  demoType?: T;
  demoSamples?:
    | T
    | {
        title?: T;
        description?: T;
        inputPlaceholder?: T;
        defaultInput?: T;
        image?: T;
        id?: T;
      };
  interactiveOptions?:
    | T
    | {
        allowUserInput?: T;
        showLoadingState?: T;
        maxInputLength?: T;
        responseDelay?: T;
        simulatedResponse?: T;
      };
  apiSettings?:
    | T
    | {
        apiType?: T;
        endpointUrl?: T;
        modelName?: T;
        headerParams?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
      };
  simulatedResponses?:
    | T
    | {
        inputPattern?: T;
        response?: T;
        id?: T;
      };
  uiOptions?:
    | T
    | {
        theme?: T;
        layout?: T;
        showInputControls?: T;
        showExampleSelector?: T;
        avatarImage?: T;
        assistantName?: T;
      };
  cta?:
    | T
    | {
        enabled?: T;
        text?: T;
        url?: T;
        style?: T;
      };
  settings?:
    | T
    | {
        backgroundColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CalendarBlock_select".
 */
export interface CalendarBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  displayType?: T;
  eventsSource?: T;
  collectionSettings?:
    | T
    | {
        targetCollection?: T;
        limit?: T;
        sortField?: T;
        sortDirection?: T;
      };
  apiSettings?:
    | T
    | {
        apiUrl?: T;
        apiKey?: T;
        refreshInterval?: T;
      };
  events?:
    | T
    | {
        title?: T;
        description?: T;
        startDate?: T;
        endDate?: T;
        location?:
          | T
          | {
              type?: T;
              address?: T;
              onlineLink?: T;
            };
        image?: T;
        category?: T;
        registrationLink?: T;
        isFeatured?: T;
        status?: T;
        speakers?:
          | T
          | {
              name?: T;
              position?: T;
              company?: T;
              bio?: T;
              photo?: T;
              id?: T;
            };
        id?: T;
      };
  settings?:
    | T
    | {
        showPastEvents?: T;
        maxEventsToShow?: T;
        enableFiltering?: T;
        enableSearch?: T;
        enableCalendarExport?: T;
        showCountdown?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventTrackerBlock_select".
 */
export interface EventTrackerBlockSelect<T extends boolean = true> {
  eventName?: T;
  analyticsSystem?: T;
  trigger?: T;
  targetSelector?: T;
  customEventNameJS?: T;
  eventParameters?:
    | T
    | {
        paramName?: T;
        paramValueType?: T;
        paramValue?: T;
        id?: T;
      };
  notes?: T;
  isEnabled?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ReportEmbedBlock_select".
 */
export interface ReportEmbedBlockSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  embedType?: T;
  iframeUrl?: T;
  htmlCode?: T;
  height?: T;
  enableScrolling?: T;
  notes?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ChatBlock_select".
 */
export interface ChatBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  description?: T;
  webhookSettings?:
    | T
    | {
        webhookSource?: T;
        webhook?: T;
        webhookUrl?: T;
        webhookSecret?: T;
        timeout?: T;
      };
  chatSettings?:
    | T
    | {
        initialMessage?: T;
        placeholderText?: T;
        botName?: T;
        botAvatar?: T;
        userAvatar?: T;
      };
  promptSuggestions?:
    | T
    | {
        text?: T;
        description?: T;
        id?: T;
      };
  fallbackResponses?:
    | T
    | {
        response?: T;
        id?: T;
      };
  appearance?:
    | T
    | {
        theme?: T;
        primaryColor?: T;
        chatHeight?: T;
        maxWidth?: T;
        borderRadius?: T;
        showTimestamps?: T;
      };
  calendlySettings?:
    | T
    | {
        enableCalendly?: T;
        calendlySource?: T;
        calendlySettingId?: T;
        username?: T;
        eventType?: T;
        hideEventTypeDetails?: T;
        hideGdprBanner?: T;
        bookingTriggerWords?:
          | T
          | {
              word?: T;
              id?: T;
            };
        bookingResponseMessage?: T;
        showCalendlyButton?: T;
        buttonText?: T;
      };
  advancedSettings?:
    | T
    | {
        enableHistory?: T;
        maxMessages?: T;
        sendMetadata?: T;
        debugMode?: T;
        testMode?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  locale?: T;
  emailNotifications?: T;
  pushNotifications?: T;
  notificationFrequency?: T;
  segments?: T;
  xp?: T;
  level?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  blogCategoryDetails?:
    | T
    | {
        showInSidebar?: T;
        color?: T;
      };
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications_select".
 */
export interface NotificationsSelect<T extends boolean = true> {
  title?: T;
  message?: T;
  user?: T;
  type?: T;
  isRead?: T;
  link?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-analytics_select".
 */
export interface CourseAnalyticsSelect<T extends boolean = true> {
  course?: T;
  courseTitle?: T;
  views?: T;
  enrollments?: T;
  completions?: T;
  completionRate?: T;
  averageRating?: T;
  totalRevenue?: T;
  moduleCompletionRates?:
    | T
    | {
        moduleId?: T;
        moduleTitle?: T;
        completionRate?: T;
        id?: T;
      };
  lessonCompletionRates?:
    | T
    | {
        lessonId?: T;
        lessonTitle?: T;
        moduleTitle?: T;
        completionRate?: T;
        averageTimeSpent?: T;
        id?: T;
      };
  conversionRates?:
    | T
    | {
        landingToEnrollment?: T;
        enrollmentToStart?: T;
        startToCompletion?: T;
      };
  timeDistribution?:
    | T
    | {
        date?: T;
        views?: T;
        enrollments?: T;
        completions?: T;
        revenue?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  excerpt?: T;
  thumbnail?: T;
  content?: T;
  readingTime?: T;
  relatedPosts?: T;
  categories?: T;
  tags?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "post-metrics_select".
 */
export interface PostMetricsSelect<T extends boolean = true> {
  title?: T;
  post?: T;
  views?: T;
  uniqueVisitors?: T;
  shares?:
    | T
    | {
        platform?: T;
        date?: T;
        id?: T;
      };
  shareCount?: T;
  likes?: T;
  readingProgress?:
    | T
    | {
        progress?: T;
        date?: T;
        id?: T;
      };
  completedReads?: T;
  lastUpdated?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors_select".
 */
export interface AuthorsSelect<T extends boolean = true> {
  name?: T;
  avatar?: T;
  bio?: T;
  role?: T;
  company?: T;
  email?: T;
  website?: T;
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  content?: T;
  author?:
    | T
    | {
        name?: T;
        email?: T;
        website?: T;
      };
  post?: T;
  likes?: T;
  parentComment?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  title?: T;
  productCategory?: T;
  pricing?:
    | T
    | {
        basePrice?: T;
        discountPercentage?: T;
        finalPrice?: T;
        compareAtPrice?: T;
        locales?:
          | T
          | {
              en?:
                | T
                | {
                    amount?: T;
                    currency?: T;
                  };
              ru?:
                | T
                | {
                    amount?: T;
                    currency?: T;
                  };
            };
      };
  description?: T;
  shortDescription?: T;
  features?:
    | T
    | {
        name?: T;
        description?: T;
        id?: T;
      };
  thumbnail?: T;
  gallery?:
    | T
    | {
        image?: T;
        alt?: T;
        id?: T;
      };
  productType?: T;
  isCourse?: T;
  isConsulting?: T;
  course?: T;
  downloadLink?: T;
  subscriptionDetails?:
    | T
    | {
        recurringPrice?: T;
        billingInterval?: T;
        trialDays?: T;
      };
  accessDetails?:
    | T
    | {
        features?: T;
        validityPeriod?: T;
      };
  isFeatured?: T;
  isPopular?: T;
  relatedProducts?: T;
  status?: T;
  publishedAt?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productCategories_select".
 */
export interface ProductCategoriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  title?: T;
  serviceType?: T;
  description?: T;
  shortDescription?: T;
  price?: T;
  duration?: T;
  thumbnail?: T;
  features?:
    | T
    | {
        name?: T;
        description?: T;
        included?: T;
        id?: T;
      };
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  relatedServices?: T;
  requiresBooking?: T;
  bookingSettings?:
    | T
    | {
        provider?: T;
        calendlyUsername?: T;
        calendlyEventType?: T;
        hideEventTypeDetails?: T;
        hideGdprBanner?: T;
        enableAdditionalInfo?: T;
        additionalInfoFields?:
          | T
          | {
              fieldName?: T;
              fieldLabel?: T;
              fieldType?: T;
              required?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              description?: T;
              placeholder?: T;
              sendToCalendly?: T;
              id?: T;
            };
        additionalInfoTitle?: T;
        additionalInfoDescription?: T;
        additionalInfoRequired?: T;
      };
  requiresPayment?: T;
  paymentSettings?:
    | T
    | {
        paymentType?: T;
        prepaymentPercentage?: T;
      };
  status?: T;
  publishedAt?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  orderNumber?: T;
  customer?: T;
  status?: T;
  items?:
    | T
    | {
        product?: T;
        quantity?: T;
        price?: T;
        id?: T;
      };
  total?:
    | T
    | {
        en?:
          | T
          | {
              amount?: T;
              currency?: T;
            };
        ru?:
          | T
          | {
              amount?: T;
              currency?: T;
            };
      };
  paymentId?: T;
  paymentProvider?: T;
  paymentData?: T;
  paidAt?: T;
  orderType?: T;
  serviceData?:
    | T
    | {
        serviceId?: T;
        serviceType?: T;
        requiresBooking?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "order-tracking_select".
 */
export interface OrderTrackingSelect<T extends boolean = true> {
  orderId?: T;
  status?: T;
  downloadLinks?:
    | T
    | {
        productId?: T;
        link?: T;
        expiresAt?: T;
        downloads?: T;
        maxDownloads?: T;
        id?: T;
      };
  statusHistory?:
    | T
    | {
        status?: T;
        timestamp?: T;
        note?: T;
        id?: T;
      };
  accessExpiresAt?: T;
  lastUpdated?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cart-sessions_select".
 */
export interface CartSessionsSelect<T extends boolean = true> {
  user?: T;
  sessionId?: T;
  items?:
    | T
    | {
        product?: T;
        quantity?: T;
        price?: T;
        id?: T;
      };
  itemCount?: T;
  total?: T;
  currency?: T;
  reminderSent?: T;
  reminderSentAt?: T;
  convertedToOrder?: T;
  convertedToOrderId?: T;
  expiresAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discounts_select".
 */
export interface DiscountsSelect<T extends boolean = true> {
  code?: T;
  type?: T;
  value?: T;
  currency?: T;
  minOrderAmount?: T;
  maxDiscount?: T;
  startDate?: T;
  endDate?: T;
  maxUsage?: T;
  maxUsagePerUser?: T;
  usageCount?: T;
  status?: T;
  applicableProducts?: T;
  excludedProducts?: T;
  applicableCategories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions_select".
 */
export interface PromotionsSelect<T extends boolean = true> {
  code?: T;
  type?: T;
  value?: T;
  minPurchase?: T;
  maxDiscount?: T;
  startDate?: T;
  endDate?: T;
  usageLimit?: T;
  userLimit?: T;
  status?: T;
  usageCount?: T;
  products?: T;
  categories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  clientName?: T;
  companyName?: T;
  rating?: T;
  reviewText?: T;
  clientPhoto?: T;
  project?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  status?: T;
  author?: T;
  featuredImage?: T;
  excerpt?: T;
  learningObjectives?: T;
  liveSessions?:
    | T
    | {
        title?: T;
        dateTime?: T;
        durationMinutes?: T;
        meetingLink?: T;
        description?: T;
        id?: T;
      };
  difficulty?: T;
  estimatedDuration?: T;
  tags?: T;
  prerequisites?: T;
  layout?:
    | T
    | {
        content?: T | ContentBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        urgencyCTA?: T | UrgencyCTABlockSelect<T>;
        hero?: T | HeroBlockSelect<T>;
        features?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
            };
        divider?:
          | T
          | {
              blockName?: T;
              style?: T;
              width?: T;
              spacing?: T;
              id?: T;
            };
        steps?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              steps?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    media?: T;
                    id?: T;
                  };
              layout?: T;
              showNumbers?: T;
              showLines?: T;
              id?: T;
            };
        accordion?:
          | T
          | {
              blockName?: T;
              items?:
                | T
                | {
                    label?: T;
                    content?: T;
                    items?:
                      | T
                      | {
                          label?: T;
                          content?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              style?: T;
              size?: T;
              variant?: T;
              allowMultiple?: T;
              defaultOpen?:
                | T
                | {
                    index?: T;
                    id?: T;
                  };
              id?: T;
            };
        card?: T | CardBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        code?: T | CodeBlockSelect<T>;
        video?:
          | T
          | {
              blockName?: T;
              videoType?: T;
              videoId?: T;
              videoUrl?: T;
              videoFile?: T;
              poster?: T;
              aspectRatio?: T;
              autoPlay?: T;
              muted?: T;
              loop?: T;
              controls?: T;
              caption?: T;
              style?: T;
              size?: T;
              id?: T;
            };
        audio?: T | AudioBlockSelect<T>;
        carousel?:
          | T
          | {
              blockName?: T;
              heading?: T;
              subheading?: T;
              description?: T;
              items?:
                | T
                | {
                    media?: T;
                    heading?: T;
                    caption?: T;
                    content?: T;
                    actions?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          style?: T;
                          newTab?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              autoplay?: T;
              interval?: T;
              showControls?: T;
              showIndicators?: T;
              id?: T;
            };
        gallery?:
          | T
          | {
              blockName?: T;
              heading?: T;
              items?:
                | T
                | {
                    media?: T;
                    caption?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              spacing?: T;
              id?: T;
            };
        videoLessons?: T | VideoLessonsBlockSelect<T>;
        banner?: T | BannerBlockSelect<T>;
        faq?: T | FAQBlockSelect<T>;
        courseFAQ?: T | CourseFAQBlockSelect<T>;
        pricingTable?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              plans?:
                | T
                | {
                    name?: T;
                    price?: T;
                    interval?: T;
                    description?: T;
                    features?:
                      | T
                      | {
                          text?: T;
                          included?: T;
                          id?: T;
                        };
                    isPopular?: T;
                    actions?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          style?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              layout?: T;
              id?: T;
            };
        coursePricingComparison?: T | CoursePricingComparisonBlockSelect<T>;
        stats?: T | StatsBlockSelect<T>;
        tabs?: T | TabsBlockSelect<T>;
        timeline?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    title?: T;
                    date?: T;
                    description?: T;
                    media?: T;
                    id?: T;
                  };
              layout?: T;
              showDates?: T;
              showLines?: T;
              id?: T;
            };
        tableOfContents?:
          | T
          | {
              blockName?: T;
              title?: T;
              autoGenerate?: T;
              items?:
                | T
                | {
                    title?: T;
                    anchor?: T;
                    level?: T;
                    id?: T;
                  };
              sticky?: T;
              showNumbers?: T;
              maxDepth?: T;
              id?: T;
            };
        roadmap?: T | RoadmapBlockSelect<T>;
        benefitsOutcomes?: T | BenefitsOutcomesBlockSelect<T>;
        targetAudience?: T | TargetAudienceBlockSelect<T>;
        guarantee?: T | GuaranteeBlockSelect<T>;
        socialProofAdvanced?: T | SocialProofAdvancedBlockSelect<T>;
        teamMembers?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              members?:
                | T
                | {
                    name?: T;
                    role?: T;
                    bio?: T;
                    avatar?: T;
                    social?:
                      | T
                      | {
                          twitter?: T;
                          linkedin?: T;
                          github?: T;
                          website?: T;
                        };
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
            };
        testimonials?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    author?: T;
                    role?: T;
                    company?: T;
                    avatar?: T;
                    content?: T;
                    rating?: T;
                    id?: T;
                  };
              layout?: T;
              style?: T;
              id?: T;
            };
        instructorProfile?: T | InstructorProfileBlockSelect<T>;
        header?: T | HeaderBlockSelect<T>;
        footer?: T | FooterBlockSelect<T>;
        services?: T | ServicesBlockSelect<T>;
        caseStudies?: T | CaseStudiesBlockSelect<T>;
        techStack?: T | TechStackBlockSelect<T>;
        plansComparison?: T | PlansComparisonBlockSelect<T>;
        course?: T | CourseBlockSelect<T>;
        curriculum?: T | CurriculumBlockSelect<T>;
        userProgress?: T | UserProgressBlockSelect<T>;
        certificates?: T | CertificatesBlockSelect<T>;
        resourceLibrary?: T | ResourceLibraryBlockSelect<T>;
        aiTools?: T | AiToolsBlockSelect<T>;
        leaderboard?: T | LeaderboardBlockSelect<T>;
        courseOverview?: T | CourseOverviewBlockSelect<T>;
        quizAssessment?: T | QuizAssessmentBlockSelect<T>;
        assignments?: T | AssignmentsBlockSelect<T>;
        achievementsBlock?: T | AchievementsBlockTypeSelect<T>;
        projectShowcase?: T | ProjectShowcaseBlockSelect<T>;
        funnelStep?: T | FunnelStepBlockSelect<T>;
        recommendations?: T | RecommendationsBlockSelect<T>;
        popupTriggerConfig?: T | PopupTriggerConfigBlockSelect<T>;
        productsFilter?: T | ProductsFilterBlockSelect<T>;
        productsList?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              products?: T;
              enableDynamicSource?: T;
              source?: T;
              limit?: T;
              enableFiltering?: T;
              layout?: T;
              columns?: T;
              id?: T;
            };
        formBlock?: T | FormBlockSelect<T>;
        newsletter?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              buttonText?: T;
              layout?: T;
              image?: T;
              placeholder?: T;
              successMessage?: T;
              id?: T;
            };
        feedback?: T | FeedbackBlockSelect<T>;
        poll?: T | PollBlockSelect<T>;
        aiAssistant?: T | AiAssistantBlockSelect<T>;
        leadMagnetOffer?: T | LeadMagnetOfferBlockSelect<T>;
        discussionForum?: T | DiscussionForumBlockSelect<T>;
        articleHeader?:
          | T
          | {
              blockName?: T;
              title?: T;
              subtitle?: T;
              description?: T;
              coverImage?: T;
              publishDate?: T;
              author?:
                | T
                | {
                    name?: T;
                    avatar?: T;
                    role?: T;
                  };
              categories?:
                | T
                | {
                    category?: T;
                    id?: T;
                  };
              layout?: T;
              id?: T;
            };
        authorBio?:
          | T
          | {
              blockName?: T;
              author?:
                | T
                | {
                    name?: T;
                    avatar?: T;
                    bio?: T;
                    role?: T;
                    company?: T;
                    socialLinks?:
                      | T
                      | {
                          platform?: T;
                          url?: T;
                          id?: T;
                        };
                  };
              layout?: T;
              id?: T;
            };
        blockquote?:
          | T
          | {
              blockName?: T;
              quote?: T;
              author?: T;
              source?: T;
              avatar?: T;
              style?: T;
              align?: T;
              id?: T;
            };
        comments?:
          | T
          | {
              blockName?: T;
              title?: T;
              provider?: T;
              disqusShortname?: T;
              facebookAppId?: T;
              showCount?: T;
              commentsPerPage?: T;
              allowReplies?: T;
              requireAuth?: T;
              moderationEnabled?: T;
              id?: T;
            };
        relatedPosts?:
          | T
          | {
              blockName?: T;
              title?: T;
              selectionMethod?: T;
              posts?: T;
              maxPosts?: T;
              criteria?: T;
              layout?: T;
              showFeaturedImage?: T;
              showExcerpt?: T;
              showDate?: T;
              showAuthor?: T;
              id?: T;
            };
        socialShare?:
          | T
          | {
              blockName?: T;
              title?: T;
              platforms?: T;
              layout?: T;
              showShareCount?: T;
              id?: T;
            };
        interactiveDemo?: T | InteractiveDemoBlockSelect<T>;
        calendar?: T | CalendarBlockSelect<T>;
        eventTracker?: T | EventTrackerBlockSelect<T>;
        reportEmbed?: T | ReportEmbedBlockSelect<T>;
        chat?: T | ChatBlockSelect<T>;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
      };
  product?: T;
  accessType?: T;
  accessDuration?:
    | T
    | {
        type?: T;
        duration?: T;
        unit?: T;
      };
  enrollmentCapacity?: T;
  finalAssessment?: T;
  discussionForum?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules_select".
 */
export interface ModulesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  status?: T;
  course?: T;
  order?: T;
  prerequisites?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  status?: T;
  dripContent?:
    | T
    | {
        dripType?: T;
        dripDelayDays?: T;
        releaseDate?: T;
      };
  availableOn?: T;
  module?: T;
  description?: T;
  layout?:
    | T
    | {
        content?: T | ContentBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        urgencyCTA?: T | UrgencyCTABlockSelect<T>;
        hero?: T | HeroBlockSelect<T>;
        features?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
            };
        divider?:
          | T
          | {
              blockName?: T;
              style?: T;
              width?: T;
              spacing?: T;
              id?: T;
            };
        steps?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              steps?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    media?: T;
                    id?: T;
                  };
              layout?: T;
              showNumbers?: T;
              showLines?: T;
              id?: T;
            };
        accordion?:
          | T
          | {
              blockName?: T;
              items?:
                | T
                | {
                    label?: T;
                    content?: T;
                    items?:
                      | T
                      | {
                          label?: T;
                          content?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              style?: T;
              size?: T;
              variant?: T;
              allowMultiple?: T;
              defaultOpen?:
                | T
                | {
                    index?: T;
                    id?: T;
                  };
              id?: T;
            };
        card?: T | CardBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        code?: T | CodeBlockSelect<T>;
        video?:
          | T
          | {
              blockName?: T;
              videoType?: T;
              videoId?: T;
              videoUrl?: T;
              videoFile?: T;
              poster?: T;
              aspectRatio?: T;
              autoPlay?: T;
              muted?: T;
              loop?: T;
              controls?: T;
              caption?: T;
              style?: T;
              size?: T;
              id?: T;
            };
        audio?: T | AudioBlockSelect<T>;
        carousel?:
          | T
          | {
              blockName?: T;
              heading?: T;
              subheading?: T;
              description?: T;
              items?:
                | T
                | {
                    media?: T;
                    heading?: T;
                    caption?: T;
                    content?: T;
                    actions?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          style?: T;
                          newTab?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              autoplay?: T;
              interval?: T;
              showControls?: T;
              showIndicators?: T;
              id?: T;
            };
        gallery?:
          | T
          | {
              blockName?: T;
              heading?: T;
              items?:
                | T
                | {
                    media?: T;
                    caption?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              spacing?: T;
              id?: T;
            };
        videoLessons?: T | VideoLessonsBlockSelect<T>;
        banner?: T | BannerBlockSelect<T>;
        faq?: T | FAQBlockSelect<T>;
        courseFAQ?: T | CourseFAQBlockSelect<T>;
        pricingTable?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              plans?:
                | T
                | {
                    name?: T;
                    price?: T;
                    interval?: T;
                    description?: T;
                    features?:
                      | T
                      | {
                          text?: T;
                          included?: T;
                          id?: T;
                        };
                    isPopular?: T;
                    actions?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          style?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              layout?: T;
              id?: T;
            };
        coursePricingComparison?: T | CoursePricingComparisonBlockSelect<T>;
        stats?: T | StatsBlockSelect<T>;
        tabs?: T | TabsBlockSelect<T>;
        timeline?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    title?: T;
                    date?: T;
                    description?: T;
                    media?: T;
                    id?: T;
                  };
              layout?: T;
              showDates?: T;
              showLines?: T;
              id?: T;
            };
        tableOfContents?:
          | T
          | {
              blockName?: T;
              title?: T;
              autoGenerate?: T;
              items?:
                | T
                | {
                    title?: T;
                    anchor?: T;
                    level?: T;
                    id?: T;
                  };
              sticky?: T;
              showNumbers?: T;
              maxDepth?: T;
              id?: T;
            };
        roadmap?: T | RoadmapBlockSelect<T>;
        benefitsOutcomes?: T | BenefitsOutcomesBlockSelect<T>;
        targetAudience?: T | TargetAudienceBlockSelect<T>;
        guarantee?: T | GuaranteeBlockSelect<T>;
        socialProofAdvanced?: T | SocialProofAdvancedBlockSelect<T>;
        teamMembers?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              members?:
                | T
                | {
                    name?: T;
                    role?: T;
                    bio?: T;
                    avatar?: T;
                    social?:
                      | T
                      | {
                          twitter?: T;
                          linkedin?: T;
                          github?: T;
                          website?: T;
                        };
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
            };
        testimonials?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    author?: T;
                    role?: T;
                    company?: T;
                    avatar?: T;
                    content?: T;
                    rating?: T;
                    id?: T;
                  };
              layout?: T;
              style?: T;
              id?: T;
            };
        instructorProfile?: T | InstructorProfileBlockSelect<T>;
        header?: T | HeaderBlockSelect<T>;
        footer?: T | FooterBlockSelect<T>;
        services?: T | ServicesBlockSelect<T>;
        caseStudies?: T | CaseStudiesBlockSelect<T>;
        techStack?: T | TechStackBlockSelect<T>;
        plansComparison?: T | PlansComparisonBlockSelect<T>;
        course?: T | CourseBlockSelect<T>;
        curriculum?: T | CurriculumBlockSelect<T>;
        userProgress?: T | UserProgressBlockSelect<T>;
        certificates?: T | CertificatesBlockSelect<T>;
        resourceLibrary?: T | ResourceLibraryBlockSelect<T>;
        aiTools?: T | AiToolsBlockSelect<T>;
        leaderboard?: T | LeaderboardBlockSelect<T>;
        courseOverview?: T | CourseOverviewBlockSelect<T>;
        quizAssessment?: T | QuizAssessmentBlockSelect<T>;
        assignments?: T | AssignmentsBlockSelect<T>;
        achievementsBlock?: T | AchievementsBlockTypeSelect<T>;
        projectShowcase?: T | ProjectShowcaseBlockSelect<T>;
        funnelStep?: T | FunnelStepBlockSelect<T>;
        recommendations?: T | RecommendationsBlockSelect<T>;
        popupTriggerConfig?: T | PopupTriggerConfigBlockSelect<T>;
        productsFilter?: T | ProductsFilterBlockSelect<T>;
        productsList?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              products?: T;
              enableDynamicSource?: T;
              source?: T;
              limit?: T;
              enableFiltering?: T;
              layout?: T;
              columns?: T;
              id?: T;
            };
        formBlock?: T | FormBlockSelect<T>;
        newsletter?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              buttonText?: T;
              layout?: T;
              image?: T;
              placeholder?: T;
              successMessage?: T;
              id?: T;
            };
        feedback?: T | FeedbackBlockSelect<T>;
        poll?: T | PollBlockSelect<T>;
        aiAssistant?: T | AiAssistantBlockSelect<T>;
        leadMagnetOffer?: T | LeadMagnetOfferBlockSelect<T>;
        discussionForum?: T | DiscussionForumBlockSelect<T>;
        articleHeader?:
          | T
          | {
              blockName?: T;
              title?: T;
              subtitle?: T;
              description?: T;
              coverImage?: T;
              publishDate?: T;
              author?:
                | T
                | {
                    name?: T;
                    avatar?: T;
                    role?: T;
                  };
              categories?:
                | T
                | {
                    category?: T;
                    id?: T;
                  };
              layout?: T;
              id?: T;
            };
        authorBio?:
          | T
          | {
              blockName?: T;
              author?:
                | T
                | {
                    name?: T;
                    avatar?: T;
                    bio?: T;
                    role?: T;
                    company?: T;
                    socialLinks?:
                      | T
                      | {
                          platform?: T;
                          url?: T;
                          id?: T;
                        };
                  };
              layout?: T;
              id?: T;
            };
        blockquote?:
          | T
          | {
              blockName?: T;
              quote?: T;
              author?: T;
              source?: T;
              avatar?: T;
              style?: T;
              align?: T;
              id?: T;
            };
        comments?:
          | T
          | {
              blockName?: T;
              title?: T;
              provider?: T;
              disqusShortname?: T;
              facebookAppId?: T;
              showCount?: T;
              commentsPerPage?: T;
              allowReplies?: T;
              requireAuth?: T;
              moderationEnabled?: T;
              id?: T;
            };
        relatedPosts?:
          | T
          | {
              blockName?: T;
              title?: T;
              selectionMethod?: T;
              posts?: T;
              maxPosts?: T;
              criteria?: T;
              layout?: T;
              showFeaturedImage?: T;
              showExcerpt?: T;
              showDate?: T;
              showAuthor?: T;
              id?: T;
            };
        socialShare?:
          | T
          | {
              blockName?: T;
              title?: T;
              platforms?: T;
              layout?: T;
              showShareCount?: T;
              id?: T;
            };
        interactiveDemo?: T | InteractiveDemoBlockSelect<T>;
        calendar?: T | CalendarBlockSelect<T>;
        eventTracker?: T | EventTrackerBlockSelect<T>;
        reportEmbed?: T | ReportEmbedBlockSelect<T>;
        chat?: T | ChatBlockSelect<T>;
      };
  type?: T;
  duration?: T;
  order?: T;
  assessment?: T;
  prerequisites?: T;
  completionCriteria?: T;
  attachments?:
    | T
    | {
        title?: T;
        file?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resources_select".
 */
export interface ResourcesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  resourceType?: T;
  description?: T;
  url?: T;
  file?: T;
  videoEmbedUrl?: T;
  content?: T;
  tags?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements_select".
 */
export interface AchievementsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  icon?: T;
  type?: T;
  criteria?:
    | T
    | {
        courseId?: T;
        lessonCount?: T;
        progressPercent?: T;
      };
  xpAwarded?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-achievements_select".
 */
export interface UserAchievementsSelect<T extends boolean = true> {
  user?: T;
  achievement?: T;
  awardedAt?: T;
  status?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-enrollments_select".
 */
export interface CourseEnrollmentsSelect<T extends boolean = true> {
  user?: T;
  course?: T;
  status?: T;
  progress?: T;
  source?: T;
  orderId?: T;
  notes?: T;
  enrolledAt?: T;
  expiresAt?: T;
  completedAt?: T;
  lastAccessedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lesson-progress_select".
 */
export interface LessonProgressSelect<T extends boolean = true> {
  user?: T;
  lesson?: T;
  course?: T;
  status?: T;
  completedAt?: T;
  lastAccessedAt?: T;
  timeSpent?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leaderboard_select".
 */
export interface LeaderboardSelect<T extends boolean = true> {
  user?: T;
  xp?: T;
  level?: T;
  rank?: T;
  previousRank?: T;
  rankChange?: T;
  achievements?: T;
  coursesCompleted?: T;
  streak?: T;
  lastActive?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rewards_select".
 */
export interface RewardsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  type?: T;
  icon?: T;
  requiredLevel?: T;
  requiredAchievement?: T;
  requiredCourse?: T;
  rewardType?: T;
  discountValue?: T;
  freeCourse?: T;
  exclusiveContent?: T;
  expiresAfter?: T;
  status?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-rewards_select".
 */
export interface UserRewardsSelect<T extends boolean = true> {
  user?: T;
  reward?: T;
  awardedAt?: T;
  expiresAt?: T;
  status?: T;
  usedAt?: T;
  code?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certificates_select".
 */
export interface CertificatesSelect<T extends boolean = true> {
  certificateId?: T;
  user?: T;
  userName?: T;
  course?: T;
  courseTitle?: T;
  completionDate?: T;
  issueDate?: T;
  instructor?: T;
  status?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templates_select".
 */
export interface TemplatesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  type?: T;
  content?: T;
  thumbnail?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  isPublic?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "automation-jobs_select".
 */
export interface AutomationJobsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  status?: T;
  jobType?: T;
  triggerType?: T;
  schedule?:
    | T
    | {
        frequency?: T;
        time?: T;
        dayOfWeek?: T;
        dayOfMonth?: T;
        cronExpression?: T;
      };
  eventTrigger?:
    | T
    | {
        eventType?: T;
        conditions?:
          | T
          | {
              field?: T;
              operator?: T;
              value?: T;
              id?: T;
            };
      };
  aiGenerationParams?:
    | T
    | {
        topic?: T;
        targetAudience?: T;
        difficultyLevel?: T;
        includeQuizzes?: T;
        includeLanding?: T;
        includeFunnel?: T;
        language?: T;
        moduleCount?: T;
        lessonCount?: T;
        model?: T;
        temperature?: T;
        style?: T;
        focus?: T;
        industrySpecific?: T;
        includeResources?: T;
        includeAssignments?: T;
      };
  templateId?: T;
  courseId?: T;
  lastRun?: T;
  nextRun?: T;
  runCount?: T;
  lastResult?: T;
  logs?:
    | T
    | {
        timestamp?: T;
        message?: T;
        level?: T;
        details?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forum-categories_select".
 */
export interface ForumCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messages_select".
 */
export interface MessagesSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  subject?: T;
  message?: T;
  source?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-subscribers_select".
 */
export interface NewsletterSubscribersSelect<T extends boolean = true> {
  email?: T;
  name?: T;
  status?: T;
  unsubscribeToken?: T;
  source?: T;
  locale?: T;
  lastSent?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-templates_select".
 */
export interface EmailTemplatesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  slug?: T;
  templateType?: T;
  sender?: T;
  subject?: T;
  body?: T;
  placeholders?: T;
  syncedFromCode?: T;
  lastSyncedAt?: T;
  previewNote?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sender-emails_select".
 */
export interface SenderEmailsSelect<T extends boolean = true> {
  name?: T;
  senderName?: T;
  emailAddress?: T;
  signature?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-campaigns_select".
 */
export interface EmailCampaignsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  status?: T;
  triggerType?: T;
  schedule?:
    | T
    | {
        frequency?: T;
        startDate?: T;
        endDate?: T;
      };
  eventTrigger?:
    | T
    | {
        eventType?: T;
        delay?: T;
        conditions?: T;
      };
  targetAudience?:
    | T
    | {
        audienceType?: T;
        segment?: T;
        filter?: T;
        locale?: T;
      };
  emailSequence?:
    | T
    | {
        template?: T;
        delay?: T;
        condition?: T;
        id?: T;
      };
  lastRun?: T;
  stats?:
    | T
    | {
        totalSent?: T;
        opened?: T;
        clicked?: T;
        bounced?: T;
        unsubscribed?: T;
      };
  logs?:
    | T
    | {
        timestamp?: T;
        message?: T;
        level?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "broadcasts_select".
 */
export interface BroadcastsSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  locale?: T;
  status?: T;
  report?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "broadcast-reports_select".
 */
export interface BroadcastReportsSelect<T extends boolean = true> {
  broadcastId?: T;
  status?: T;
  title?: T;
  locale?: T;
  totalSubscribers?: T;
  successfullySent?: T;
  failedToSend?: T;
  errorsList?:
    | T
    | {
        error?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "popups_select".
 */
export interface PopupsSelect<T extends boolean = true> {
  popupId?: T;
  title?: T;
  content?:
    | T
    | {
        content?: T | ContentBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        urgencyCTA?: T | UrgencyCTABlockSelect<T>;
        hero?: T | HeroBlockSelect<T>;
        features?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
            };
        divider?:
          | T
          | {
              blockName?: T;
              style?: T;
              width?: T;
              spacing?: T;
              id?: T;
            };
        steps?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              steps?:
                | T
                | {
                    title?: T;
                    description?: T;
                    icon?: T;
                    media?: T;
                    id?: T;
                  };
              layout?: T;
              showNumbers?: T;
              showLines?: T;
              id?: T;
            };
        accordion?:
          | T
          | {
              blockName?: T;
              items?:
                | T
                | {
                    label?: T;
                    content?: T;
                    items?:
                      | T
                      | {
                          label?: T;
                          content?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              style?: T;
              size?: T;
              variant?: T;
              allowMultiple?: T;
              defaultOpen?:
                | T
                | {
                    index?: T;
                    id?: T;
                  };
              id?: T;
            };
        card?: T | CardBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        code?: T | CodeBlockSelect<T>;
        video?:
          | T
          | {
              blockName?: T;
              videoType?: T;
              videoId?: T;
              videoUrl?: T;
              videoFile?: T;
              poster?: T;
              aspectRatio?: T;
              autoPlay?: T;
              muted?: T;
              loop?: T;
              controls?: T;
              caption?: T;
              style?: T;
              size?: T;
              id?: T;
            };
        audio?: T | AudioBlockSelect<T>;
        carousel?:
          | T
          | {
              blockName?: T;
              heading?: T;
              subheading?: T;
              description?: T;
              items?:
                | T
                | {
                    media?: T;
                    heading?: T;
                    caption?: T;
                    content?: T;
                    actions?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          style?: T;
                          newTab?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              autoplay?: T;
              interval?: T;
              showControls?: T;
              showIndicators?: T;
              id?: T;
            };
        gallery?:
          | T
          | {
              blockName?: T;
              heading?: T;
              items?:
                | T
                | {
                    media?: T;
                    caption?: T;
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              spacing?: T;
              id?: T;
            };
        videoLessons?: T | VideoLessonsBlockSelect<T>;
        banner?: T | BannerBlockSelect<T>;
        faq?: T | FAQBlockSelect<T>;
        courseFAQ?: T | CourseFAQBlockSelect<T>;
        pricingTable?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              plans?:
                | T
                | {
                    name?: T;
                    price?: T;
                    interval?: T;
                    description?: T;
                    features?:
                      | T
                      | {
                          text?: T;
                          included?: T;
                          id?: T;
                        };
                    isPopular?: T;
                    actions?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          style?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              layout?: T;
              id?: T;
            };
        coursePricingComparison?: T | CoursePricingComparisonBlockSelect<T>;
        stats?: T | StatsBlockSelect<T>;
        tabs?: T | TabsBlockSelect<T>;
        timeline?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    title?: T;
                    date?: T;
                    description?: T;
                    media?: T;
                    id?: T;
                  };
              layout?: T;
              showDates?: T;
              showLines?: T;
              id?: T;
            };
        tableOfContents?:
          | T
          | {
              blockName?: T;
              title?: T;
              autoGenerate?: T;
              items?:
                | T
                | {
                    title?: T;
                    anchor?: T;
                    level?: T;
                    id?: T;
                  };
              sticky?: T;
              showNumbers?: T;
              maxDepth?: T;
              id?: T;
            };
        roadmap?: T | RoadmapBlockSelect<T>;
        benefitsOutcomes?: T | BenefitsOutcomesBlockSelect<T>;
        targetAudience?: T | TargetAudienceBlockSelect<T>;
        guarantee?: T | GuaranteeBlockSelect<T>;
        socialProofAdvanced?: T | SocialProofAdvancedBlockSelect<T>;
        teamMembers?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              members?:
                | T
                | {
                    name?: T;
                    role?: T;
                    bio?: T;
                    avatar?: T;
                    social?:
                      | T
                      | {
                          twitter?: T;
                          linkedin?: T;
                          github?: T;
                          website?: T;
                        };
                    id?: T;
                  };
              layout?: T;
              columns?: T;
              id?: T;
            };
        testimonials?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    author?: T;
                    role?: T;
                    company?: T;
                    avatar?: T;
                    content?: T;
                    rating?: T;
                    id?: T;
                  };
              layout?: T;
              style?: T;
              id?: T;
            };
        instructorProfile?: T | InstructorProfileBlockSelect<T>;
        header?: T | HeaderBlockSelect<T>;
        footer?: T | FooterBlockSelect<T>;
        services?: T | ServicesBlockSelect<T>;
        caseStudies?: T | CaseStudiesBlockSelect<T>;
        techStack?: T | TechStackBlockSelect<T>;
        plansComparison?: T | PlansComparisonBlockSelect<T>;
        course?: T | CourseBlockSelect<T>;
        curriculum?: T | CurriculumBlockSelect<T>;
        userProgress?: T | UserProgressBlockSelect<T>;
        certificates?: T | CertificatesBlockSelect<T>;
        resourceLibrary?: T | ResourceLibraryBlockSelect<T>;
        aiTools?: T | AiToolsBlockSelect<T>;
        leaderboard?: T | LeaderboardBlockSelect<T>;
        courseOverview?: T | CourseOverviewBlockSelect<T>;
        quizAssessment?: T | QuizAssessmentBlockSelect<T>;
        assignments?: T | AssignmentsBlockSelect<T>;
        achievementsBlock?: T | AchievementsBlockTypeSelect<T>;
        projectShowcase?: T | ProjectShowcaseBlockSelect<T>;
        funnelStep?: T | FunnelStepBlockSelect<T>;
        recommendations?: T | RecommendationsBlockSelect<T>;
        popupTriggerConfig?: T | PopupTriggerConfigBlockSelect<T>;
        productsFilter?: T | ProductsFilterBlockSelect<T>;
        productsList?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              products?: T;
              enableDynamicSource?: T;
              source?: T;
              limit?: T;
              enableFiltering?: T;
              layout?: T;
              columns?: T;
              id?: T;
            };
        formBlock?: T | FormBlockSelect<T>;
        newsletter?:
          | T
          | {
              blockName?: T;
              heading?: T;
              description?: T;
              buttonText?: T;
              layout?: T;
              image?: T;
              placeholder?: T;
              successMessage?: T;
              id?: T;
            };
        feedback?: T | FeedbackBlockSelect<T>;
        poll?: T | PollBlockSelect<T>;
        aiAssistant?: T | AiAssistantBlockSelect<T>;
        leadMagnetOffer?: T | LeadMagnetOfferBlockSelect<T>;
        discussionForum?: T | DiscussionForumBlockSelect<T>;
        articleHeader?:
          | T
          | {
              blockName?: T;
              title?: T;
              subtitle?: T;
              description?: T;
              coverImage?: T;
              publishDate?: T;
              author?:
                | T
                | {
                    name?: T;
                    avatar?: T;
                    role?: T;
                  };
              categories?:
                | T
                | {
                    category?: T;
                    id?: T;
                  };
              layout?: T;
              id?: T;
            };
        authorBio?:
          | T
          | {
              blockName?: T;
              author?:
                | T
                | {
                    name?: T;
                    avatar?: T;
                    bio?: T;
                    role?: T;
                    company?: T;
                    socialLinks?:
                      | T
                      | {
                          platform?: T;
                          url?: T;
                          id?: T;
                        };
                  };
              layout?: T;
              id?: T;
            };
        blockquote?:
          | T
          | {
              blockName?: T;
              quote?: T;
              author?: T;
              source?: T;
              avatar?: T;
              style?: T;
              align?: T;
              id?: T;
            };
        comments?:
          | T
          | {
              blockName?: T;
              title?: T;
              provider?: T;
              disqusShortname?: T;
              facebookAppId?: T;
              showCount?: T;
              commentsPerPage?: T;
              allowReplies?: T;
              requireAuth?: T;
              moderationEnabled?: T;
              id?: T;
            };
        relatedPosts?:
          | T
          | {
              blockName?: T;
              title?: T;
              selectionMethod?: T;
              posts?: T;
              maxPosts?: T;
              criteria?: T;
              layout?: T;
              showFeaturedImage?: T;
              showExcerpt?: T;
              showDate?: T;
              showAuthor?: T;
              id?: T;
            };
        socialShare?:
          | T
          | {
              blockName?: T;
              title?: T;
              platforms?: T;
              layout?: T;
              showShareCount?: T;
              id?: T;
            };
        interactiveDemo?: T | InteractiveDemoBlockSelect<T>;
        calendar?: T | CalendarBlockSelect<T>;
        eventTracker?: T | EventTrackerBlockSelect<T>;
        reportEmbed?: T | ReportEmbedBlockSelect<T>;
        chat?: T | ChatBlockSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-segments_select".
 */
export interface UserSegmentsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  ruleGroups?:
    | T
    | {
        rules?:
          | T
          | {
              parameter?: T;
              operator?: T;
              value?: T;
              profileFieldName?: T;
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  author?: T;
  authorTitle?: T;
  quote?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-favorites_select".
 */
export interface UserFavoritesSelect<T extends boolean = true> {
  user?: T;
  products?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscription-plans_select".
 */
export interface SubscriptionPlansSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  price?: T;
  currency?: T;
  period?: T;
  trialPeriodDays?: T;
  maxSubscriptionMonths?: T;
  autoRenew?: T;
  allowCancel?: T;
  isActive?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions_select".
 */
export interface SubscriptionsSelect<T extends boolean = true> {
  userId?: T;
  planId?: T;
  status?: T;
  paymentProvider?: T;
  paymentMethod?: T;
  paymentToken?: T;
  period?: T;
  amount?: T;
  currency?: T;
  startDate?: T;
  nextPaymentDate?: T;
  endDate?: T;
  canceledAt?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscription-payments_select".
 */
export interface SubscriptionPaymentsSelect<T extends boolean = true> {
  subscriptionId?: T;
  amount?: T;
  currency?: T;
  status?: T;
  paymentDate?: T;
  paymentMethod?: T;
  transactionId?: T;
  failureReason?: T;
  rawResponse?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrations_select".
 */
export interface IntegrationsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  type?: T;
  status?: T;
  webhookUrl?: T;
  apiKey?: T;
  triggers?:
    | T
    | {
        event?: T;
        conditions?:
          | T
          | {
              field?: T;
              operator?: T;
              value?: T;
              id?: T;
            };
        id?: T;
      };
  actions?:
    | T
    | {
        type?: T;
        config?:
          | T
          | {
              url?: T;
              method?: T;
              headers?: T;
              body?: T;
              to?: T;
              from?: T;
              subject?: T;
              emailBody?: T;
            };
        id?: T;
      };
  lastSync?: T;
  lastSyncStatus?: T;
  lastError?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  author?: T;
  projectUrl?: T;
  status?: T;
  featuredImage?: T;
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  tags?: T;
  relatedCourse?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solutions_select".
 */
export interface SolutionsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  featuredImage?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  toolsUsed?:
    | T
    | {
        tool?: T;
        id?: T;
      };
  pricing?:
    | T
    | {
        basePrice?: T;
        discountPercentage?: T;
        finalPrice?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  type?: T;
  data?: T;
  timestamp?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "calendly-settings_select".
 */
export interface CalendlySettingsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  username?: T;
  eventType?: T;
  hideEventTypeDetails?: T;
  hideGdprBanner?: T;
  isActive?: T;
  owner?: T;
  lastUsed?: T;
  webhookUrl?: T;
  webhookSecret?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings_select".
 */
export interface BookingsSelect<T extends boolean = true> {
  title?: T;
  type?: T;
  status?: T;
  startTime?: T;
  endTime?: T;
  eventName?: T;
  location?: T;
  invitee?:
    | T
    | {
        name?: T;
        email?: T;
        phone?: T;
        timezone?: T;
      };
  questions?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  notes?: T;
  cancellationReason?: T;
  canceledBy?: T;
  previousStartTime?: T;
  previousEndTime?: T;
  calendlyURI?: T;
  calendlyUUID?: T;
  calendlyEventTypeURI?: T;
  settingsId?: T;
  source?: T;
  medium?: T;
  campaign?: T;
  rawData?: T;
  order?: T;
  isPaid?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assessments_select".
 */
export interface AssessmentsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  type?: T;
  lesson?: T;
  passingScore?: T;
  submissionInstructions?: T;
  maxAttempts?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-reviews_select".
 */
export interface CourseReviewsSelect<T extends boolean = true> {
  user?: T;
  course?: T;
  enrollment?: T;
  rating?: T;
  reviewText?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assessment-submissions_select".
 */
export interface AssessmentSubmissionsSelect<T extends boolean = true> {
  assessment?: T;
  user?: T;
  enrollment?: T;
  submittedAt?: T;
  status?: T;
  score?: T;
  answers?: T;
  files?: T;
  feedback?: T;
  attemptNumber?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "learning-paths_select".
 */
export interface LearningPathsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  courses?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "waiting-list-entries_select".
 */
export interface WaitingListEntriesSelect<T extends boolean = true> {
  user?: T;
  course?: T;
  notified?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  mainNavItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  bottomNavItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-settings".
 */
export interface EmailSetting {
  id: string;
  smtpHost: string;
  smtpPort: number;
  smtpUser: string;
  smtpPassword: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-providers".
 */
export interface PaymentProvider {
  id: string;
  general: {
    orderCancellationTimeout: number;
  };
  yoomoney?: {
    yoomoney_enabled?: boolean | null;
    yoomoney_displayName?: {
      ru: string;
      en: string;
    };
    yoomoney_config?: {
      testMode?: boolean | null;
      test?: {
        shop_id: string;
        secret_key: string;
      };
      production?: {
        shop_id: string;
        secret_key: string;
      };
    };
  };
  stripe?: {
    stripe_enabled?: boolean | null;
    stripe_displayName?: {
      ru: string;
      en: string;
    };
    stripe_config?: {
      testMode?: boolean | null;
      test?: {
        publishable_key: string;
        secret_key: string;
      };
      production?: {
        publishable_key: string;
        secret_key: string;
      };
    };
  };
  robokassa?: {
    robokassa_enabled?: boolean | null;
    robokassa_displayName?: {
      ru: string;
      en: string;
    };
    robokassa_config?: {
      testMode?: boolean | null;
      test?: {
        merchant_login: string;
        password1: string;
        password2: string;
      };
      production?: {
        merchant_login: string;
        password1: string;
        password2: string;
      };
    };
  };
  paypal?: {
    paypal_enabled?: boolean | null;
    paypal_displayName?: {
      ru: string;
      en: string;
    };
    paypal_config?: {
      testMode?: boolean | null;
      test?: {
        client_id: string;
        client_secret: string;
      };
      production?: {
        client_id: string;
        client_secret: string;
      };
    };
  };
  crypto?: {
    crypto_enabled?: boolean | null;
    crypto_displayName?: {
      ru: string;
      en: string;
    };
    crypto_config?: {
      testMode?: boolean | null;
      test?: {
        api_key: string;
        webhook_secret: string;
        /**
         * Create a project ID at https://cloud.walletconnect.com/
         */
        wallet_connect_project_id: string;
        supported_currencies: string;
      };
      production?: {
        api_key: string;
        webhook_secret: string;
        /**
         * Create a project ID at https://cloud.walletconnect.com/
         */
        wallet_connect_project_id: string;
        supported_currencies: string;
      };
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notification-settings".
 */
export interface NotificationSetting {
  id: string;
  email: {
    sender: {
      senderName: {
        ru: string;
        en: string;
      };
      senderEmail: string;
    };
    /**
     * Email address where admin notifications will be sent
     */
    adminEmail: string;
    templates: {
      orderConfirmation: {
        enabled?: boolean | null;
        subject: {
          ru: string;
          en: string;
        };
        template: {
          ru: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          en: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
        };
      };
      paymentConfirmation: {
        enabled?: boolean | null;
        subject: {
          ru: string;
          en: string;
        };
        template: {
          ru: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          en: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
        };
      };
      orderShipped: {
        enabled?: boolean | null;
        subject: {
          ru: string;
          en: string;
        };
        template: {
          ru: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          en: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
        };
      };
      downloadableProduct: {
        enabled?: boolean | null;
        subject: {
          ru: string;
          en: string;
        };
        template: {
          ru: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          en: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
        };
      };
    };
  };
  sms?: {
    enabled?: boolean | null;
    provider?: ('twilio' | 'nexmo' | 'custom') | null;
    providerConfig?: {
      accountSid?: string | null;
      authToken?: string | null;
      fromNumber: string;
      apiEndpoint?: string | null;
    };
    templates?: {
      orderConfirmation: {
        enabled?: boolean | null;
        message: {
          ru: string;
          en: string;
        };
      };
      paymentConfirmation: {
        enabled?: boolean | null;
        message: {
          ru: string;
          en: string;
        };
      };
    };
  };
  push?: {
    enabled?: boolean | null;
    firebaseConfig?: {
      apiKey: string;
      projectId: string;
      appId: string;
      messagingSenderId: string;
    };
    templates?: {
      orderStatusUpdate: {
        enabled?: boolean | null;
        title: {
          ru: string;
          en: string;
        };
        body: {
          ru: string;
          en: string;
        };
      };
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currency-settings".
 */
export interface CurrencySetting {
  id: string;
  /**
   * Primary currency used for internal calculations
   */
  baseCurrency: 'RUB' | 'USD' | 'EUR' | 'GBP' | 'JPY' | 'CNY' | 'INR' | 'CAD' | 'AUD' | 'CHF';
  /**
   * Currencies available to customers on the frontend
   */
  supportedCurrencies: ('RUB' | 'USD' | 'EUR' | 'GBP' | 'JPY' | 'CNY' | 'INR' | 'CAD' | 'AUD' | 'CHF')[];
  displayFormat: {
    symbolPosition: 'before' | 'after';
    /**
     * Display currency code along with the symbol (e.g., $100 USD)
     */
    showCurrencyCode?: boolean | null;
    thousandsSeparator: ' ' | ',' | '.' | '';
    decimalSeparator: '.' | ',';
    decimalPlaces: '0' | '1' | '2';
  };
  /**
   * Override default currency for specific locales
   */
  localeDefaults?:
    | {
        locale: 'en' | 'ru';
        currency: 'RUB' | 'USD' | 'EUR' | 'GBP' | 'JPY' | 'CNY' | 'INR' | 'CAD' | 'AUD' | 'CHF';
        format?: {
          symbolPosition?: ('before' | 'after') | null;
          thousandsSeparator?: (' ' | ',' | '.' | '') | null;
          decimalSeparator?: ('.' | ',') | null;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Rules for rounding prices in different ranges
   */
  roundingRules?:
    | {
        minPrice: number;
        maxPrice: number;
        /**
         * Round to nearest value (e.g., 5, 10, 99, etc.)
         */
        roundTo: number;
        strategy?: ('nearest' | 'down' | 'up') | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Add additional markup for specific currencies
   */
  markup?:
    | {
        currency: 'RUB' | 'USD' | 'EUR' | 'GBP' | 'JPY' | 'CNY' | 'INR' | 'CAD' | 'AUD' | 'CHF';
        /**
         * Additional percentage to add to exchange rate (can be negative for discounts)
         */
        percentage: number;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exchange-rate-settings".
 */
export interface ExchangeRateSetting {
  id: string;
  auto?: {
    enabled?: boolean | null;
    provider?: ('openexchangerates' | 'exchangerateapi' | 'fixer' | 'currencylayer') | null;
    apiKey?: string | null;
    updateFrequency?: ('hourly' | 'daily' | 'weekly') | null;
    /**
     * Timestamp of the last automatic update
     */
    lastUpdated?: string | null;
  };
  /**
   * Manual exchange rates (these will override automatic rates)
   */
  rates?:
    | {
        fromCurrency: 'RUB' | 'USD' | 'EUR' | 'GBP' | 'JPY' | 'CNY' | 'INR' | 'CAD' | 'AUD' | 'CHF';
        toCurrency: 'RUB' | 'USD' | 'EUR' | 'GBP' | 'JPY' | 'CNY' | 'INR' | 'CAD' | 'AUD' | 'CHF';
        /**
         * Rate to convert from the base currency to the target currency
         */
        rate: number;
        /**
         * Whether this rate should be preserved during automatic updates
         */
        manuallySet?: boolean | null;
        /**
         * Timestamp of the last update for this rate
         */
        lastUpdated?: string | null;
        id?: string | null;
      }[]
    | null;
  display?: {
    /**
     * Show the current exchange rate when user switches currency
     */
    showExchangeRate?: boolean | null;
    allowUserCurrencySwitch?: boolean | null;
    /**
     * Show price in both the user-selected currency and the base currency
     */
    showPriceInMultipleCurrencies?: boolean | null;
  };
  failover: {
    /**
     * Maximum age of rates before they are considered stale
     */
    maxRateAge: number;
    /**
     * Use manually set rates if automatic update fails
     */
    fallbackToManualRates?: boolean | null;
    disableCurrencySwitching?: boolean | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "webhook-settings".
 */
export interface WebhookSetting {
  id: string;
  enabled?: boolean | null;
  securitySettings?: {
    /**
     * Secret used to sign webhooks for verification
     */
    signatureSecret?: string | null;
    enableIPWhitelist?: boolean | null;
    /**
     * List of allowed IP addresses
     */
    ipWhitelist?:
      | {
          ipAddress: string;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  retrySettings?: {
    maxRetries?: number | null;
    retryInterval?: ('fixed' | 'exponential') | null;
  };
  /**
   * Configure webhook endpoints and events
   */
  endpoints?:
    | {
        name: string;
        url: string;
        active?: boolean | null;
        events: (
          | 'order.created'
          | 'order.updated'
          | 'order.completed'
          | 'order.cancelled'
          | 'payment.received'
          | 'payment.failed'
          | 'product.created'
          | 'product.updated'
          | 'product.deleted'
          | 'user.created'
          | 'user.updated'
        )[];
        headers?:
          | {
              key: string;
              value: string;
              id?: string | null;
            }[]
          | null;
        lastSent?: string | null;
        status?: ('healthy' | 'warning' | 'error') | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Recent webhook delivery logs
   */
  logs?:
    | {
        timestamp?: string | null;
        endpoint?: string | null;
        event?: string | null;
        status?: ('success' | 'failed' | 'retrying') | null;
        responseCode?: number | null;
        responseTime?: number | null;
        attemptNumber?: number | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  mainNavItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  bottomNavItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-settings_select".
 */
export interface EmailSettingsSelect<T extends boolean = true> {
  smtpHost?: T;
  smtpPort?: T;
  smtpUser?: T;
  smtpPassword?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-providers_select".
 */
export interface PaymentProvidersSelect<T extends boolean = true> {
  general?:
    | T
    | {
        orderCancellationTimeout?: T;
      };
  yoomoney?:
    | T
    | {
        yoomoney_enabled?: T;
        yoomoney_displayName?:
          | T
          | {
              ru?: T;
              en?: T;
            };
        yoomoney_config?:
          | T
          | {
              testMode?: T;
              test?:
                | T
                | {
                    shop_id?: T;
                    secret_key?: T;
                  };
              production?:
                | T
                | {
                    shop_id?: T;
                    secret_key?: T;
                  };
            };
      };
  stripe?:
    | T
    | {
        stripe_enabled?: T;
        stripe_displayName?:
          | T
          | {
              ru?: T;
              en?: T;
            };
        stripe_config?:
          | T
          | {
              testMode?: T;
              test?:
                | T
                | {
                    publishable_key?: T;
                    secret_key?: T;
                  };
              production?:
                | T
                | {
                    publishable_key?: T;
                    secret_key?: T;
                  };
            };
      };
  robokassa?:
    | T
    | {
        robokassa_enabled?: T;
        robokassa_displayName?:
          | T
          | {
              ru?: T;
              en?: T;
            };
        robokassa_config?:
          | T
          | {
              testMode?: T;
              test?:
                | T
                | {
                    merchant_login?: T;
                    password1?: T;
                    password2?: T;
                  };
              production?:
                | T
                | {
                    merchant_login?: T;
                    password1?: T;
                    password2?: T;
                  };
            };
      };
  paypal?:
    | T
    | {
        paypal_enabled?: T;
        paypal_displayName?:
          | T
          | {
              ru?: T;
              en?: T;
            };
        paypal_config?:
          | T
          | {
              testMode?: T;
              test?:
                | T
                | {
                    client_id?: T;
                    client_secret?: T;
                  };
              production?:
                | T
                | {
                    client_id?: T;
                    client_secret?: T;
                  };
            };
      };
  crypto?:
    | T
    | {
        crypto_enabled?: T;
        crypto_displayName?:
          | T
          | {
              ru?: T;
              en?: T;
            };
        crypto_config?:
          | T
          | {
              testMode?: T;
              test?:
                | T
                | {
                    api_key?: T;
                    webhook_secret?: T;
                    wallet_connect_project_id?: T;
                    supported_currencies?: T;
                  };
              production?:
                | T
                | {
                    api_key?: T;
                    webhook_secret?: T;
                    wallet_connect_project_id?: T;
                    supported_currencies?: T;
                  };
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notification-settings_select".
 */
export interface NotificationSettingsSelect<T extends boolean = true> {
  email?:
    | T
    | {
        sender?:
          | T
          | {
              senderName?:
                | T
                | {
                    ru?: T;
                    en?: T;
                  };
              senderEmail?: T;
            };
        adminEmail?: T;
        templates?:
          | T
          | {
              orderConfirmation?:
                | T
                | {
                    enabled?: T;
                    subject?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                    template?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                  };
              paymentConfirmation?:
                | T
                | {
                    enabled?: T;
                    subject?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                    template?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                  };
              orderShipped?:
                | T
                | {
                    enabled?: T;
                    subject?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                    template?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                  };
              downloadableProduct?:
                | T
                | {
                    enabled?: T;
                    subject?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                    template?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                  };
            };
      };
  sms?:
    | T
    | {
        enabled?: T;
        provider?: T;
        providerConfig?:
          | T
          | {
              accountSid?: T;
              authToken?: T;
              fromNumber?: T;
              apiEndpoint?: T;
            };
        templates?:
          | T
          | {
              orderConfirmation?:
                | T
                | {
                    enabled?: T;
                    message?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                  };
              paymentConfirmation?:
                | T
                | {
                    enabled?: T;
                    message?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                  };
            };
      };
  push?:
    | T
    | {
        enabled?: T;
        firebaseConfig?:
          | T
          | {
              apiKey?: T;
              projectId?: T;
              appId?: T;
              messagingSenderId?: T;
            };
        templates?:
          | T
          | {
              orderStatusUpdate?:
                | T
                | {
                    enabled?: T;
                    title?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                    body?:
                      | T
                      | {
                          ru?: T;
                          en?: T;
                        };
                  };
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currency-settings_select".
 */
export interface CurrencySettingsSelect<T extends boolean = true> {
  baseCurrency?: T;
  supportedCurrencies?: T;
  displayFormat?:
    | T
    | {
        symbolPosition?: T;
        showCurrencyCode?: T;
        thousandsSeparator?: T;
        decimalSeparator?: T;
        decimalPlaces?: T;
      };
  localeDefaults?:
    | T
    | {
        locale?: T;
        currency?: T;
        format?:
          | T
          | {
              symbolPosition?: T;
              thousandsSeparator?: T;
              decimalSeparator?: T;
            };
        id?: T;
      };
  roundingRules?:
    | T
    | {
        minPrice?: T;
        maxPrice?: T;
        roundTo?: T;
        strategy?: T;
        id?: T;
      };
  markup?:
    | T
    | {
        currency?: T;
        percentage?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exchange-rate-settings_select".
 */
export interface ExchangeRateSettingsSelect<T extends boolean = true> {
  auto?:
    | T
    | {
        enabled?: T;
        provider?: T;
        apiKey?: T;
        updateFrequency?: T;
        lastUpdated?: T;
      };
  rates?:
    | T
    | {
        fromCurrency?: T;
        toCurrency?: T;
        rate?: T;
        manuallySet?: T;
        lastUpdated?: T;
        id?: T;
      };
  display?:
    | T
    | {
        showExchangeRate?: T;
        allowUserCurrencySwitch?: T;
        showPriceInMultipleCurrencies?: T;
      };
  failover?:
    | T
    | {
        maxRateAge?: T;
        fallbackToManualRates?: T;
        disableCurrencySwitching?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "webhook-settings_select".
 */
export interface WebhookSettingsSelect<T extends boolean = true> {
  enabled?: T;
  securitySettings?:
    | T
    | {
        signatureSecret?: T;
        enableIPWhitelist?: T;
        ipWhitelist?:
          | T
          | {
              ipAddress?: T;
              description?: T;
              id?: T;
            };
      };
  retrySettings?:
    | T
    | {
        maxRetries?: T;
        retryInterval?: T;
      };
  endpoints?:
    | T
    | {
        name?: T;
        url?: T;
        active?: T;
        events?: T;
        headers?:
          | T
          | {
              key?: T;
              value?: T;
              id?: T;
            };
        lastSent?: T;
        status?: T;
        id?: T;
      };
  logs?:
    | T
    | {
        timestamp?: T;
        endpoint?: T;
        event?: T;
        status?: T;
        responseCode?: T;
        responseTime?: T;
        attemptNumber?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskNewsletter-broadcast".
 */
export interface TaskNewsletterBroadcast {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskRecalculate-user-segments".
 */
export interface TaskRecalculateUserSegments {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskEmail-campaign".
 */
export interface TaskEmailCampaign {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCheck-expiring-rewards".
 */
export interface TaskCheckExpiringRewards {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}