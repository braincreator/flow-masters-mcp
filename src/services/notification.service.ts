import { Payload } from 'payload'
import { BaseService } from './base.service'
import { EmailService } from './email.service'
import { TelegramService } from './telegram.service'
import { Order } from '../payload-types'

export class NotificationService extends BaseService {
  private static instance: NotificationService | null = null
  private emailService: EmailService | null = null
  private telegramService: TelegramService | null = null

  private constructor(payload: Payload) {
    super(payload)
    this.emailService = EmailService.getInstance(payload)
    this.telegramService = TelegramService.getInstance(payload)
  }

  public static getInstance(payload: Payload): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService(payload)
    }
    return NotificationService.instance
  }

  async sendPaymentConfirmation(orderData: {
    orderId: string
    orderNumber: string
    customerEmail: string
    total: number
    currency: string
    items?: Array<{
      product: string
      quantity: number
      price: number
      name?: string
      type?: 'course' | 'product' | 'subscription' | 'other'
    }>
    paymentMethod?: string
    paymentId?: string
    locale?: string
  }): Promise<boolean> {
    try {
      // 1. Get user details
      let userName = ''
      let userEmail = orderData.customerEmail
      let userLocale = orderData.locale || 'ru'
      let userId = null

      try {
        // Try to get user details if we have a user reference
        const order = await this.payload.findByID({
          collection: 'orders',
          id: orderData.orderId,
          depth: 1, // Include user data
        })

        if (order.user) {
          // If user is a reference and populated
          if (typeof order.user === 'object' && order.user !== null) {
            userName = order.user.name || ''
            userEmail = order.user.email || orderData.customerEmail
            userLocale = order.user.locale || orderData.locale || 'ru'
            userId = order.user.id
          } else {
            // If user is just an ID
            userId = order.user
          }
        }
      } catch (userError) {
        console.error('Error getting user details for payment confirmation:', userError)
        // Continue with the data we have
      }

      // 2. Format order items
      const orderItems = (orderData.items || []).map((item) => ({
        name: item.name || 'Product',
        description: '',
        quantity: item.quantity,
        price: item.price,
        total: item.price * item.quantity,
        type: item.type || 'product',
        id: item.product,
      }))

      // Check user notification preferences if we have a user ID
      let preferences = {
        allowInApp: true,
        allowEmail: true,
        allowPush: false,
      }

      if (userId) {
        preferences = await this.checkUserNotificationPreferences(userId, 'account')

        // Create in-app notification for the user
        await this.payload.create({
          collection: 'notifications',
          data: {
            user: userId,
            title: 'Payment Confirmed',
            message: `Your payment for order #${orderData.orderNumber} has been confirmed.`,
            type: 'payment_confirmed',
            isRead: false,
            metadata: {
              orderId: orderData.orderId,
              orderNumber: orderData.orderNumber,
              total: orderData.total,
              currency: orderData.currency,
            },
          },
        })
      }

      // 3. Send email using our template if allowed by user preferences
      if (this.emailService && preferences.allowEmail) {
        await this.emailService.sendPaymentConfirmationEmail({
          userName: userName || userEmail,
          email: userEmail,
          orderNumber: orderData.orderNumber,
          paymentDate: new Date().toISOString(),
          paymentAmount: orderData.total,
          currency: orderData.currency,
          paymentMethod: orderData.paymentMethod,
          transactionId: orderData.paymentId,
          locale: userLocale,
          purchasedItems: orderItems.map((item) => ({
            name: item.name,
            type: item.type as 'course' | 'product' | 'subscription' | 'other',
            id: item.id,
          })),
        })
      }

      // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
      if (this.telegramService) {
        await this.telegramService.sendMessage(
          `üí∞ –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!\n` +
            `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderData.orderNumber}\n` +
            `–°—É–º–º–∞: ${orderData.total} ${orderData.currency}\n` +
            `Email –∫–ª–∏–µ–Ω—Ç–∞: ${userEmail}`,
        )
      }

      return true
    } catch (error) {
      console.error('Failed to send payment confirmation:', error)
      return false
    }
  }

  async sendDigitalOrderStatusUpdate(orderData: {
    orderId: string
    status: string
    customerEmail?: string
    downloadLinks?: string[]
  }): Promise<boolean> {
    try {
      if (!orderData.orderId || !orderData.status) {
        console.error('Invalid order data for status update notification')
        return false
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const order = await this.payload.findByID<Order, any>({
        collection: 'orders',
        id: orderData.orderId,
        depth: 1, // Include user data
      })

      if (!order) {
        console.error(`Order not found: ${orderData.orderId}`)
        return false
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      let userId = null
      let userLocale = 'ru'
      const customerEmail = order.customer?.email || orderData.customerEmail

      if (order.user) {
        // If user is a reference and populated
        if (typeof order.user === 'object' && order.user !== null) {
          userId = order.user.id
          userLocale = order.user.locale || 'ru'
        } else {
          // If user is just an ID
          userId = order.user
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let preferences = {
        allowInApp: true,
        allowEmail: true,
        allowPush: false,
      }

      if (userId) {
        preferences = await this.checkUserNotificationPreferences(userId, 'account')
      }

      // –°–æ–∑–¥–∞–µ–º in-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å userId
      if (userId) {
        let title = 'Order Status Update'
        let message = `Your order #${order.orderNumber} status has been updated to ${orderData.status}`

        switch (orderData.status) {
          case 'payment_confirmed':
            title = 'Payment Confirmed'
            message = `Your payment for order #${order.orderNumber} has been confirmed.`
            break
          case 'ready_for_download':
            title = 'Download Ready'
            message = `Your digital products from order #${order.orderNumber} are ready for download.`
            break
          case 'completed':
            title = 'Order Completed'
            message = `Your order #${order.orderNumber} has been completed.`
            break
        }

        await this.payload.create({
          collection: 'notifications',
          data: {
            user: userId,
            title,
            message,
            type: 'order_status',
            isRead: false,
            metadata: {
              orderId: orderData.orderId,
              orderNumber: order.orderNumber,
              status: orderData.status,
            },
          },
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
      if (preferences.allowEmail && customerEmail) {
        switch (orderData.status) {
          case 'payment_confirmed':
            await this.emailService.sendTemplateEmail(
              'order_paid',
              customerEmail,
              {
                orderNumber: order.orderNumber,
                products: order.items,
              },
              { locale: userLocale },
            )
            break

          case 'ready_for_download':
            await this.emailService.sendTemplateEmail(
              'download_ready',
              customerEmail,
              {
                orderNumber: order.orderNumber,
                downloadLinks: orderData.downloadLinks,
              },
              { locale: userLocale },
            )
            break

          case 'completed':
            await this.emailService.sendTemplateEmail(
              'order_completed',
              customerEmail,
              {
                orderNumber: order.orderNumber,
              },
              { locale: userLocale },
            )
            break

          default:
            await this.emailService.sendTemplateEmail(
              'order_status_update',
              customerEmail,
              {
                orderNumber: order.orderNumber,
                status: orderData.status,
              },
              { locale: userLocale },
            )
        }
      }

      return true
    } catch (error) {
      console.error('Failed to send order status update:', error)
      return false
    }
  }

  async sendAbandonedCartReminder(cartData: {
    user: any
    items: any[]
    total: number
    currency: string
    lastUpdated: Date
  }): Promise<void> {
    try {
      const { user, items, total, currency, lastUpdated } = cartData

      // Check if settings allow sending abandoned cart reminders
      const settings = await this.payload.findGlobal({
        slug: 'settings',
      })

      if (!settings?.notificationSettings?.email?.enableAbandonedCartReminders) {
        return
      }

      // Check user notification preferences
      const preferences = await this.checkUserNotificationPreferences(user.id, 'marketing')

      const templateData = {
        userName: user.name || user.email,
        items: items.map((item) => ({
          title: item.product.title,
          quantity: item.quantity,
          price: item.price,
        })),
        total,
        currency,
        lastUpdated: lastUpdated.toLocaleDateString(),
        cartUrl: `${process.env.NEXT_PUBLIC_SERVER_URL}/cart`,
      }

      // Store notification in database (in-app notification)
      await this.payload.create({
        collection: 'notifications',
        data: {
          user: user.id,
          type: 'abandoned_cart',
          title: 'Items waiting in your cart',
          message: `You have ${items.length} item(s) in your cart. Complete your purchase before they're gone!`,
          data: templateData,
          read: false,
        },
      })

      // Send email notification if allowed by user preferences
      if (preferences.allowEmail && user.email) {
        await this.emailService
          .sendTemplateEmail('abandoned-cart', user.email, templateData, {
            locale: user.locale || 'ru',
          })
          .catch((err) => {
            console.error('Failed to send abandoned cart email:', err)
          })
      }
    } catch (error) {
      console.error('Failed to send abandoned cart reminder:', error)
      throw error
    }
  }

  async markNotificationAsRead(notificationId: string): Promise<void> {
    await this.payload.update({
      collection: 'notifications',
      id: notificationId,
      data: {
        read: true,
        readAt: new Date(),
      },
    })
  }

  async getUserNotifications(userId: string, options = {}): Promise<any> {
    return this.payload.find({
      collection: 'notifications',
      where: {
        user: {
          equals: userId,
        },
      },
      sort: '-createdAt',
      ...options,
    })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param notificationType –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns –û–±—ä–µ–∫—Ç —Å —Ñ–ª–∞–≥–∞–º–∏, —É–∫–∞–∑—ã–≤–∞—é—â–∏–º–∏, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
   */
  async checkUserNotificationPreferences(
    userId: string,
    notificationType: string,
  ): Promise<{
    allowInApp: boolean
    allowEmail: boolean
    allowPush: boolean
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const user = await this.payload.findByID({
        collection: 'users',
        id: userId,
      })

      // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
      const defaults = {
        allowInApp: true,
        allowEmail: true,
        allowPush: false,
      }

      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!user.emailNotifications && !user.pushNotifications) {
        return defaults
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (user.notificationFrequency === 'never') {
        return {
          allowInApp: true, // In-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
          allowEmail: false,
          allowPush: false,
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      let category = 'account' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞

      // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (['course_completed', 'lesson_completed', 'course_enrolled'].includes(notificationType)) {
        category = 'courses'
      } else if (['achievement', 'level_up'].includes(notificationType)) {
        category = 'achievements'
      } else if (['comment_reply', 'comment_mention'].includes(notificationType)) {
        category = 'comments'
      } else if (['newsletter', 'broadcast'].includes(notificationType)) {
        category = 'newsletter'
      } else if (['promo', 'discount', 'marketing'].includes(notificationType)) {
        category = 'marketing'
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const allowEmail = user.emailNotifications?.[category] ?? defaults.allowEmail

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const allowPush = user.pushNotifications?.[category] ?? defaults.allowPush

      return {
        allowInApp: true, // In-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        allowEmail,
        allowPush,
      }
    } catch (error) {
      console.error('Error checking user notification preferences:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return {
        allowInApp: true,
        allowEmail: true,
        allowPush: false,
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param data –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendNotification(data: {
    userId: string
    title: string
    message: string
    type: string
    link?: string
    metadata?: Record<string, any>
  }): Promise<any> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const preferences = await this.checkUserNotificationPreferences(data.userId, data.type)

      // –°–æ–∑–¥–∞–µ–º in-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞)
      const notification = await this.payload.create({
        collection: 'notifications',
        data: {
          user: data.userId,
          title: data.title,
          message: data.message,
          type: data.type,
          isRead: false,
          link: data.link,
          metadata: data.metadata,
        },
      })

      // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email
      if (preferences.allowEmail && this.emailService) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email
          const user = await this.payload.findByID({
            collection: 'users',
            id: data.userId,
          })

          if (user.email) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await this.emailService
              .sendTemplateEmail(
                'notification',
                user.email,
                {
                  title: data.title,
                  message: data.message,
                  type: data.type,
                  link: data.link,
                  ...data.metadata,
                },
                { locale: user.locale || 'ru' },
              )
              .catch((err) => {
                console.error('Failed to send email notification:', err)
              })
          }
        } catch (emailError) {
          console.error('Error sending email notification:', emailError)
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email
        }
      }

      // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º push (–≤ –±—É–¥—É—â–µ–º)
      if (preferences.allowPush) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log('Push notifications are enabled but not implemented yet')
      }

      console.log(`Notification sent to user ${data.userId}: ${data.title}`)
      return notification
    } catch (error) {
      console.error('Error sending notification:', error)
      throw error
    }
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async markAllAsRead(userId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const notifications = await this.payload.find({
        collection: 'notifications',
        where: {
          and: [
            {
              user: {
                equals: userId,
              },
            },
            {
              isRead: {
                equals: false,
              },
            },
          ],
        },
        limit: 1000,
      })

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
      for (const notification of notifications.docs) {
        await this.markNotificationAsRead(notification.id)
      }

      console.log(`Marked all notifications as read for user ${userId}`)
    } catch (error) {
      console.error('Error marking all notifications as read:', error)
      throw error
    }
  }
}
