'use client'

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  CheckCircle, 
  XCircle, 
  AlertTriangle, 
  RefreshCw,
  Zap,
  Copy,
  ExternalLink
} from 'lucide-react'

interface FixStatus {
  environmentVariables: {
    yandexMetrika: boolean
    vkPixel: boolean
    googleAnalytics: boolean
    forceMode: boolean
  }
  analyticsObjects: {
    yandexMetrika: boolean
    vkPixel: boolean
    googleAnalytics: boolean
  }
  proxyEndpoints: {
    metrika: boolean
    vkPixel: boolean
    vkAds: boolean
  }
  overallStatus: 'good' | 'partial' | 'poor'
  recommendations: string[]
}

export function AnalyticsFixStatus() {
  const [status, setStatus] = useState<FixStatus | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [lastUpdate, setLastUpdate] = useState<string | null>(null)

  const checkStatus = async () => {
    setIsLoading(true)
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const envVars = {
        yandexMetrika: !!process.env.NEXT_PUBLIC_YANDEX_METRIKA_ID,
        vkPixel: !!process.env.NEXT_PUBLIC_VK_PIXEL_ID,
        googleAnalytics: !!process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID,
        forceMode: process.env.NEXT_PUBLIC_FORCE_LOAD_PIXELS === 'true'
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã
      const analyticsObjects = {
        yandexMetrika: typeof window !== 'undefined' && typeof (window as any).ym === 'function',
        vkPixel: typeof window !== 'undefined' && typeof (window as any).VK === 'object',
        googleAnalytics: typeof window !== 'undefined' && typeof (window as any).gtag === 'function'
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º proxy endpoints
      const proxyTests = await Promise.allSettled([
        fetch('/metrika/tag_ww.js', { method: 'HEAD' }),
        fetch('/vk-pixel/js/api/openapi.js', { method: 'HEAD' }),
        fetch('/vk-ads/', { method: 'HEAD' })
      ])

      const proxyEndpoints = {
        metrika: proxyTests[0].status === 'fulfilled' && (proxyTests[0].value as Response).ok,
        vkPixel: proxyTests[1].status === 'fulfilled' && (proxyTests[1].value as Response).ok,
        vkAds: proxyTests[2].status === 'fulfilled' && (proxyTests[2].value as Response).ok
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const envScore = Object.values(envVars).filter(Boolean).length
      const analyticsScore = Object.values(analyticsObjects).filter(Boolean).length
      const proxyScore = Object.values(proxyEndpoints).filter(Boolean).length
      
      const totalScore = envScore + analyticsScore + proxyScore
      const maxScore = 10 // 4 + 3 + 3

      let overallStatus: 'good' | 'partial' | 'poor'
      if (totalScore >= 8) overallStatus = 'good'
      else if (totalScore >= 5) overallStatus = 'partial'
      else overallStatus = 'poor'

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations: string[] = []
      
      if (!envVars.yandexMetrika) recommendations.push('–î–æ–±–∞–≤–∏—Ç—å NEXT_PUBLIC_YANDEX_METRIKA_ID –≤ .env.local')
      if (!envVars.vkPixel) recommendations.push('–î–æ–±–∞–≤–∏—Ç—å NEXT_PUBLIC_VK_PIXEL_ID –≤ .env.local')
      if (!envVars.googleAnalytics) recommendations.push('–î–æ–±–∞–≤–∏—Ç—å NEXT_PUBLIC_GOOGLE_ANALYTICS_ID –≤ .env.local')
      if (!envVars.forceMode) recommendations.push('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å NEXT_PUBLIC_FORCE_LOAD_PIXELS=true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏')
      
      if (!analyticsObjects.yandexMetrika) recommendations.push('Yandex Metrika –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã')
      if (!analyticsObjects.vkPixel) recommendations.push('VK Pixel –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã')
      if (!analyticsObjects.googleAnalytics) recommendations.push('Google Analytics –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã')
      
      if (!proxyEndpoints.metrika) recommendations.push('Proxy –¥–ª—è Yandex Metrika –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
      if (!proxyEndpoints.vkPixel) recommendations.push('Proxy –¥–ª—è VK Pixel –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
      if (!proxyEndpoints.vkAds) recommendations.push('Proxy –¥–ª—è VK Ads –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

      if (recommendations.length === 0) {
        recommendations.push('üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
      }

      setStatus({
        environmentVariables: envVars,
        analyticsObjects,
        proxyEndpoints,
        overallStatus,
        recommendations
      })

      setLastUpdate(new Date().toLocaleString())
    } catch (error) {
      console.error('Failed to check status:', error)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    checkStatus()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(checkStatus, 30000)
    return () => clearInterval(interval)
  }, [])

  const getStatusIcon = (isGood: boolean) => {
    return isGood ? (
      <CheckCircle className="h-4 w-4 text-green-500" />
    ) : (
      <XCircle className="h-4 w-4 text-red-500" />
    )
  }

  const getStatusBadge = (isGood: boolean) => {
    return isGood ? (
      <Badge className="bg-green-500">–û–ö</Badge>
    ) : (
      <Badge variant="destructive">–ü—Ä–æ–±–ª–µ–º–∞</Badge>
    )
  }

  const getOverallStatusColor = (status: string) => {
    switch (status) {
      case 'good': return 'text-green-600 bg-green-50 border-green-200'
      case 'partial': return 'text-yellow-600 bg-yellow-50 border-yellow-200'
      case 'poor': return 'text-red-600 bg-red-50 border-red-200'
      default: return 'text-gray-600 bg-gray-50 border-gray-200'
    }
  }

  const copyEnvVars = () => {
    const envContent = `# Analytics Configuration
NEXT_PUBLIC_YANDEX_METRIKA_ID=101007010
NEXT_PUBLIC_VK_PIXEL_ID=VK-RTRG-2138516-bKJJr
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

# Force load all pixels (for testing)
NEXT_PUBLIC_FORCE_LOAD_PIXELS=true`
    
    navigator.clipboard.writeText(envContent)
  }

  if (!status) {
    return (
      <Card>
        <CardContent className="flex items-center justify-center p-8">
          <RefreshCw className="h-6 w-6 animate-spin mr-2" />
          –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="w-full max-w-4xl mx-auto space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="h-5 w-5" />
            –°—Ç–∞—Ç—É—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
          </CardTitle>
          <div className="flex items-center justify-between">
            <p className="text-sm text-muted-foreground">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            </p>
            <Button 
              onClick={checkStatus} 
              disabled={isLoading}
              size="sm"
              className="flex items-center gap-2"
            >
              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Overall Status */}
          <Alert className={getOverallStatusColor(status.overallStatus)}>
            {status.overallStatus === 'good' ? (
              <CheckCircle className="h-4 w-4" />
            ) : status.overallStatus === 'partial' ? (
              <AlertTriangle className="h-4 w-4" />
            ) : (
              <XCircle className="h-4 w-4" />
            )}
            <AlertDescription>
              <strong>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: </strong>
              {status.overallStatus === 'good' && 'üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç'}
              {status.overallStatus === 'partial' && '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ. –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è'}
              {status.overallStatus === 'poor' && '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}
            </AlertDescription>
          </Alert>

          {/* Environment Variables */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Yandex Metrika ID</span>
                  {getStatusBadge(status.environmentVariables.yandexMetrika)}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">VK Pixel ID</span>
                  {getStatusBadge(status.environmentVariables.vkPixel)}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Google Analytics ID</span>
                  {getStatusBadge(status.environmentVariables.googleAnalytics)}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Force Mode</span>
                  {getStatusBadge(status.environmentVariables.forceMode)}
                </div>
              </div>
              
              {(!status.environmentVariables.yandexMetrika || 
                !status.environmentVariables.vkPixel || 
                !status.environmentVariables.forceMode) && (
                <div className="mt-4 p-3 bg-muted rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">–î–æ–±–∞–≤—å—Ç–µ –≤ .env.local:</span>
                    <Button size="sm" variant="outline" onClick={copyEnvVars}>
                      <Copy className="h-3 w-3 mr-1" />
                      –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                  </div>
                  <pre className="text-xs bg-background p-2 rounded border overflow-x-auto">
{`NEXT_PUBLIC_YANDEX_METRIKA_ID=101007010
NEXT_PUBLIC_VK_PIXEL_ID=VK-RTRG-2138516-bKJJr
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
NEXT_PUBLIC_FORCE_LOAD_PIXELS=true`}
                  </pre>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Analytics Objects */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="flex items-center gap-3 p-3 border rounded-lg">
                  {getStatusIcon(status.analyticsObjects.yandexMetrika)}
                  <div>
                    <div className="font-medium">window.ym</div>
                    <div className="text-sm text-muted-foreground">
                      {status.analyticsObjects.yandexMetrika ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-3 p-3 border rounded-lg">
                  {getStatusIcon(status.analyticsObjects.vkPixel)}
                  <div>
                    <div className="font-medium">window.VK</div>
                    <div className="text-sm text-muted-foreground">
                      {status.analyticsObjects.vkPixel ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-3 p-3 border rounded-lg">
                  {getStatusIcon(status.analyticsObjects.googleAnalytics)}
                  <div>
                    <div className="font-medium">window.gtag</div>
                    <div className="text-sm text-muted-foreground">
                      {status.analyticsObjects.googleAnalytics ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Proxy Endpoints */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Proxy Endpoints</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="flex items-center gap-3 p-3 border rounded-lg">
                  {getStatusIcon(status.proxyEndpoints.metrika)}
                  <div>
                    <div className="font-medium">/metrika/*</div>
                    <div className="text-sm text-muted-foreground">
                      {status.proxyEndpoints.metrika ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-3 p-3 border rounded-lg">
                  {getStatusIcon(status.proxyEndpoints.vkPixel)}
                  <div>
                    <div className="font-medium">/vk-pixel/*</div>
                    <div className="text-sm text-muted-foreground">
                      {status.proxyEndpoints.vkPixel ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-3 p-3 border rounded-lg">
                  {getStatusIcon(status.proxyEndpoints.vkAds)}
                  <div>
                    <div className="font-medium">/vk-ads/*</div>
                    <div className="text-sm text-muted-foreground">
                      {status.proxyEndpoints.vkAds ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Recommendations */}
          <Alert>
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              <div className="space-y-1">
                <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
                <ul className="list-disc list-inside space-y-1">
                  {status.recommendations.map((rec, index) => (
                    <li key={index} className="text-sm">{rec}</li>
                  ))}
                </ul>
              </div>
            </AlertDescription>
          </Alert>

          {/* Quick Actions */}
          <div className="flex flex-col sm:flex-row gap-4">
            <Button 
              onClick={() => window.open('/en/test/analytics', '_blank')}
              className="flex items-center gap-2"
            >
              <ExternalLink className="h-4 w-4" />
              –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            </Button>
            
            <Button 
              onClick={copyEnvVars}
              variant="outline"
              className="flex items-center gap-2"
            >
              <Copy className="h-4 w-4" />
              –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å .env –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>
          </div>

          {/* Last Update */}
          {lastUpdate && (
            <div className="text-xs text-muted-foreground text-center pt-4 border-t">
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdate}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
