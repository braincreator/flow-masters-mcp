'use client'

// FlowMasters AI Agents - Agent Selector Component
// Generated with AI assistance for rapid development

import { useState } from 'react'
import { Bot, Search, Zap, ArrowRight, Sparkles } from 'lucide-react'
import type { AgentType } from '@/lib/agents/types'

interface Agent {
  type: AgentType
  name: string
  description: string
  icon: string
  color: string
  capabilities: string[]
  examples: string[]
}

interface AgentSelectorProps {
  onAgentSelect: (agentType: AgentType) => void
  selectedAgent?: AgentType
  className?: string
}

const AVAILABLE_AGENTS: Agent[] = [
  {
    type: 'assistant',
    name: 'FlowMasters Assistant',
    description: '–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ FlowMasters',
    icon: 'ü§ñ',
    color: 'blue',
    capabilities: [
      '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
      '–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ',
      '–†–µ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤',
    ],
    examples: [
      '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ n8n?',
      '–û–±—ä—è—Å–Ω–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –∞–≥–µ–Ω—Ç–æ–≤',
      '–ü–æ–º–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM',
    ],
  },
  {
    type: 'search',
    name: 'Smart Documentation Search',
    description: '–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI',
    icon: 'üìö',
    color: 'green',
    capabilities: [
      '–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
      '–ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
      '–¢–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏',
      '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º',
    ],
    examples: [
      '–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –≤ n8n?',
      '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ Qdrant API',
      '–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Flowise',
    ],
  },
  {
    type: 'automation',
    name: 'Quick Automation Builder',
    description: '–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö workflow',
    icon: 'üîÑ',
    color: 'purple',
    capabilities: [
      '–°–æ–∑–¥–∞–Ω–∏–µ workflow –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
      '–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏',
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π',
      '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
    ],
    examples: [
      '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤',
      '–°–æ–∑–¥–∞—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏',
    ],
  },
  {
    type: 'multimodal',
    name: 'Multimodal AI Assistant',
    description: '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ —Å Gemini Pro Vision',
    icon: 'üëÅÔ∏è',
    color: 'orange',
    capabilities: [
      '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
      '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (OCR)',
      '–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–≥—Ä–∞–º–º –∏ —Å—Ö–µ–º',
      '–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ UI',
    ],
    examples: [
      '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      '–ò–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      '–û–ø–∏—à–∏ —á—Ç–æ –Ω–∞ —ç—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º–µ',
    ],
  },
]

export function AgentSelector({ onAgentSelect, selectedAgent, className = '' }: AgentSelectorProps) {
  const [hoveredAgent, setHoveredAgent] = useState<AgentType | null>(null)

  const getColorClasses = (color: string, isSelected: boolean, isHovered: boolean) => {
    const baseClasses = 'transition-all duration-200'
    
    if (isSelected) {
      switch (color) {
        case 'blue': return `${baseClasses} bg-blue-50 border-blue-200 shadow-blue-100`
        case 'green': return `${baseClasses} bg-green-50 border-green-200 shadow-green-100`
        case 'purple': return `${baseClasses} bg-purple-50 border-purple-200 shadow-purple-100`
        case 'orange': return `${baseClasses} bg-orange-50 border-orange-200 shadow-orange-100`
        default: return `${baseClasses} bg-gray-50 border-gray-200`
      }
    }
    
    if (isHovered) {
      switch (color) {
        case 'blue': return `${baseClasses} bg-blue-25 border-blue-100 shadow-lg`
        case 'green': return `${baseClasses} bg-green-25 border-green-100 shadow-lg`
        case 'purple': return `${baseClasses} bg-purple-25 border-purple-100 shadow-lg`
        case 'orange': return `${baseClasses} bg-orange-25 border-orange-100 shadow-lg`
        default: return `${baseClasses} bg-gray-25 border-gray-100 shadow-lg`
      }
    }
    
    return `${baseClasses} bg-white border-gray-200 hover:shadow-md`
  }

  const getButtonClasses = (color: string) => {
    switch (color) {
      case 'blue': return 'bg-blue-500 hover:bg-blue-600 text-white'
      case 'green': return 'bg-green-500 hover:bg-green-600 text-white'
      case 'purple': return 'bg-purple-500 hover:bg-purple-600 text-white'
      case 'orange': return 'bg-orange-500 hover:bg-orange-600 text-white'
      default: return 'bg-gray-500 hover:bg-gray-600 text-white'
    }
  }

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header */}
      <div className="text-center">
        <div className="flex items-center justify-center mb-4">
          <Sparkles className="w-8 h-8 text-blue-500 mr-2" />
          <h1 className="text-3xl font-bold text-gray-900">AI –ê–≥–µ–Ω—Ç—ã FlowMasters</h1>
        </div>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          –í—ã–±–µ—Ä–∏—Ç–µ AI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á. –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
        </p>
      </div>

      {/* Agent Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {AVAILABLE_AGENTS.map((agent) => {
          const isSelected = selectedAgent === agent.type
          const isHovered = hoveredAgent === agent.type
          
          return (
            <div
              key={agent.type}
              className={`relative border rounded-xl p-6 cursor-pointer ${getColorClasses(
                agent.color,
                isSelected,
                isHovered
              )}`}
              onMouseEnter={() => setHoveredAgent(agent.type)}
              onMouseLeave={() => setHoveredAgent(null)}
              onClick={() => onAgentSelect(agent.type)}
            >
              {/* Agent Icon and Name */}
              <div className="flex items-center mb-4">
                <div className="text-3xl mr-3">{agent.icon}</div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">{agent.name}</h3>
                  <p className="text-sm text-gray-600">{agent.description}</p>
                </div>
              </div>

              {/* Capabilities */}
              <div className="mb-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
                <ul className="space-y-1">
                  {agent.capabilities.slice(0, 3).map((capability, index) => (
                    <li key={index} className="text-xs text-gray-600 flex items-center">
                      <div className="w-1 h-1 bg-gray-400 rounded-full mr-2" />
                      {capability}
                    </li>
                  ))}
                  {agent.capabilities.length > 3 && (
                    <li className="text-xs text-gray-500">
                      +{agent.capabilities.length - 3} –µ—â–µ...
                    </li>
                  )}
                </ul>
              </div>

              {/* Examples */}
              <div className="mb-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</h4>
                <div className="space-y-1">
                  {agent.examples.slice(0, 2).map((example, index) => (
                    <div key={index} className="text-xs text-gray-600 bg-gray-50 rounded px-2 py-1">
                      "{example}"
                    </div>
                  ))}
                </div>
              </div>

              {/* Action Button */}
              <button
                className={`w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors flex items-center justify-center ${getButtonClasses(
                  agent.color
                )}`}
                onClick={(e) => {
                  e.stopPropagation()
                  onAgentSelect(agent.type)
                }}
              >
                {isSelected ? '–í—ã–±—Ä–∞–Ω' : '–í—ã–±—Ä–∞—Ç—å –∞–≥–µ–Ω—Ç–∞'}
                <ArrowRight className="w-4 h-4 ml-2" />
              </button>

              {/* Selected Indicator */}
              {isSelected && (
                <div className="absolute top-2 right-2">
                  <div className="w-3 h-3 bg-green-500 rounded-full flex items-center justify-center">
                    <div className="w-1.5 h-1.5 bg-white rounded-full" />
                  </div>
                </div>
              )}
            </div>
          )
        })}
      </div>

      {/* Quick Stats */}
      <div className="bg-gray-50 rounded-lg p-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
          <div>
            <div className="text-2xl font-bold text-blue-600">3</div>
            <div className="text-sm text-gray-600">–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-green-600">24/7</div>
            <div className="text-sm text-gray-600">–†–∞–±–æ—Ç–∞—é—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-purple-600">&lt;2—Å</div>
            <div className="text-sm text-gray-600">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
          </div>
        </div>
      </div>

      {/* Help Text */}
      <div className="text-center text-sm text-gray-500">
        <p>
          –ù–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤—ã–±—Ä–∞—Ç—å? –ù–∞—á–Ω–∏—Ç–µ —Å{' '}
          <button
            onClick={() => onAgentSelect('assistant')}
            className="text-blue-600 hover:text-blue-800 underline"
          >
            FlowMasters Assistant
          </button>
          {' '}‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á.
        </p>
      </div>
    </div>
  )
}