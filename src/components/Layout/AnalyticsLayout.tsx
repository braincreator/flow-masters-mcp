'use client'

import { useEffect, useState, useMemo, memo } from 'react'
import { usePathname } from 'next/navigation'
import PixelManager from '@/components/PixelManager'
import { PixelDebug } from '@/components/PixelManager/PixelDebug'
import { usePixelPageView } from '@/hooks/usePixelEvents'
import { InteractionTracker } from '@/components/Analytics/ButtonTracker'
import { useCookieConsent } from '@/hooks/useCookieConsent'
import { useIsClient, useClientEnv } from '@/hooks/useIsClient'

import { logDebug, logInfo, logWarn, logError } from '@/utils/logger'

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ pathname
 */
function determinePageType(pathname: string): string {
  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  if (pathname === '/' || pathname === '/home') {
    return 'home'
  }

  // –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É—Å–ª—É–≥
  if (pathname.startsWith('/products') || pathname.includes('product')) {
    return 'products'
  }

  if (pathname.startsWith('/services') || pathname.includes('service')) {
    return 'services'
  }

  // –ë–ª–æ–≥ –∏ —Å—Ç–∞—Ç—å–∏
  if (pathname.startsWith('/blog') || pathname.startsWith('/posts') || pathname.includes('article')) {
    return 'blog'
  }

  // –ö–æ–Ω—Ç–∞–∫—Ç—ã
  if (pathname.startsWith('/contact') || pathname.includes('contact')) {
    return 'contacts'
  }

  // –û –Ω–∞—Å
  if (pathname.startsWith('/about') || pathname.includes('about')) {
    return 'about'
  }

  // –§–æ—Ä–º—ã
  if (pathname.includes('form') || pathname.includes('application')) {
    return 'forms'
  }

  // –û–ø–ª–∞—Ç–∞ –∏ –∑–∞–∫–∞–∑—ã
  if (pathname.includes('checkout') || pathname.includes('payment') || pathname.includes('order')) {
    return 'checkout'
  }

  // –°—Ç—Ä–∞–Ω–∏—Ü—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
  if (pathname.includes('thank') || pathname.includes('success') || pathname.includes('complete')) {
    return 'thank_you'
  }

  // –ö—É—Ä—Å—ã –∏ –æ–±—É—á–µ–Ω–∏–µ
  if (pathname.includes('course') || pathname.includes('training') || pathname.includes('education')) {
    return 'courses'
  }

  // –õ–µ–Ω–¥–∏–Ω–≥–∏
  if (pathname.includes('landing') || pathname.includes('promo')) {
    return 'landing'
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return 'all'
}

interface AnalyticsLayoutProps {
  children: React.ReactNode
}

/**
 * Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ø–∏–∫—Å–µ–ª–µ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∏–∫—Å–µ–ª–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü
 */
const AnalyticsLayout = memo(function AnalyticsLayout({ children }: AnalyticsLayoutProps) {
  const pathname = usePathname()
  const { trackPageView } = usePixelPageView()
  const { hasAnalytics, hasMarketing, hasPreferences } = useCookieConsent()

  // SSR-safe hooks
  const isClient = useIsClient()
  const env = useClientEnv()

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const currentPage = useMemo(() => determinePageType(pathname), [pathname])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    if (hasAnalytics || hasMarketing) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π
      const timer = setTimeout(() => {
        trackPageView(currentPage)
      }, 500)

      return () => clearTimeout(timer)
    }
  }, [pathname, hasAnalytics, hasMarketing, currentPage, trackPageView])

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π (SSR-safe)
  const shouldLoadPixels = useMemo(() => {
    // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if (!isClient) return false

    // üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ–≥–¥–∞
    if (env.NEXT_PUBLIC_FORCE_LOAD_PIXELS === 'true') {
      console.log('üöÄ FORCE MODE: Loading all pixels regardless of consent')
      return true
    }

    // –í development —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (env.NODE_ENV === 'development') return true

    // –í production –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    return hasAnalytics || hasMarketing || hasPreferences
  }, [isClient, env.NEXT_PUBLIC_FORCE_LOAD_PIXELS, env.NODE_ENV, hasAnalytics, hasMarketing, hasPreferences])

  return (
    <>
      {children}

      {/* –ü–∏–∫—Å–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è */}
      {shouldLoadPixels && (
        <PixelManager
          currentPage={currentPage}
          userConsent={true}
          forceLoad={env.NEXT_PUBLIC_FORCE_LOAD_PIXELS === 'true'}
        />
      )}

      {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π */}
      {shouldLoadPixels && <InteractionTracker />}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–∏–∫—Å–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –≤ development) */}
      {isClient && env.NODE_ENV === 'development' && <PixelDebug />}
    </>
  )
})


/**
 * –•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
 */
export function useConversionTracking() {
  const { hasMarketing } = useCookieConsent()

  const trackConversion = async (
    conversionType: 'lead' | 'purchase' | 'registration' | 'contact',
    data: any = {}
  ) => {
    if (!hasMarketing) return

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –ø–∏–∫—Å–µ–ª–∏
      const response = await fetch('/api/pixels/active', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          eventName: conversionType,
          eventData: data,
          page: determinePageType(window.location.pathname),
        }),
      })

      if (response.ok) {
        const result = await response.json()
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–±—ã—Ç–∏–π
        if (result.eventScripts) {
          result.eventScripts.forEach((script: string) => {
            try {
              const func = new Function(script)
              func()
            } catch (error) {
              logWarn('Failed to execute conversion script:', error)
            }
          })
        }

        logInfo(`Conversion "${conversionType}" tracked in ${result.pixelsTriggered} pixels`)
      }
    } catch (error) {
      logError('Error tracking conversion:', error)
    }
  }

  return { trackConversion }
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
export function ConversionTracker({ 
  conversionType, 
  conversionData,
  trigger = 'mount' 
}: {
  conversionType: 'lead' | 'purchase' | 'registration' | 'contact'
  conversionData?: any
  trigger?: 'mount' | 'manual'
}) {
  const { trackConversion } = useConversionTracking()

  useEffect(() => {
    if (trigger === 'mount') {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π
      const timer = setTimeout(() => {
        trackConversion(conversionType, conversionData)
      }, 1000)

      return () => clearTimeout(timer)
    }
  }, [conversionType, conversionData, trigger, trackConversion])

  return null // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–≤–∏–¥–∏–º—ã–π
}

export default AnalyticsLayout
