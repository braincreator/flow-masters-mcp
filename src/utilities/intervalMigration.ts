/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
 * –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ä—ã–µ useInterval –Ω–∞ useOptimizedInterval
 */

import { useOptimizedInterval, useOptimizedTimeout } from '@/hooks/useOptimizedInterval'
import { logDebug, logWarn } from '@/utils/logger'

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ useInterval
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ useOptimizedInterval –Ω–∞–ø—Ä—è–º—É—é
 */
export function useMigratedInterval(
  callback: () => void,
  delay: number | null,
  options: {
    immediate?: boolean
    enabled?: boolean
    legacy?: boolean // –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
  } = {}
) {
  const { immediate = false, enabled = true, legacy = false } = options

  if (legacy) {
    logWarn('Using legacy interval implementation. Consider migrating to useOptimizedInterval')
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π useInterval –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  return useOptimizedInterval(callback, delay, { immediate, enabled })
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ useTimeout
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ useOptimizedTimeout –Ω–∞–ø—Ä—è–º—É—é
 */
export function useMigratedTimeout(
  callback: () => void,
  delay: number | null,
  options: {
    enabled?: boolean
    legacy?: boolean
  } = {}
) {
  const { enabled = true, legacy = false } = options

  if (legacy) {
    logWarn('Using legacy timeout implementation. Consider migrating to useOptimizedTimeout')
  }

  return useOptimizedTimeout(callback, delay, { enabled })
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
 */
export function checkLegacyIntervals() {
  if (typeof window === 'undefined') return

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  const intervalCount = (window as any).__intervalCount || 0
  const timeoutCount = (window as any).__timeoutCount || 0

  if (intervalCount > 10 || timeoutCount > 20) {
    logWarn(`High number of intervals/timeouts detected: ${intervalCount}/${timeoutCount}. Consider migration to optimized versions.`)
  }

  logDebug(`Current intervals/timeouts: ${intervalCount}/${timeoutCount}`)
}

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
 */
export function createManagedInterval(
  callback: () => void,
  delay: number,
  options: {
    immediate?: boolean
    maxExecutions?: number
    onComplete?: () => void
  } = {}
): () => void {
  const { immediate = false, maxExecutions, onComplete } = options
  let executionCount = 0
  let intervalId: NodeJS.Timeout | null = null

  const wrappedCallback = () => {
    callback()
    executionCount++

    if (maxExecutions && executionCount >= maxExecutions) {
      cleanup()
      onComplete?.()
    }
  }

  const cleanup = () => {
    if (intervalId) {
      clearInterval(intervalId)
      intervalId = null
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (immediate) {
    wrappedCallback()
  }

  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
  if (!maxExecutions || executionCount < maxExecutions) {
    intervalId = setInterval(wrappedCallback, delay)
  }

  return cleanup
}

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
 */
export function createManagedTimeout(
  callback: () => void,
  delay: number,
  options: {
    onCancel?: () => void
  } = {}
): () => void {
  const { onCancel } = options
  let timeoutId: NodeJS.Timeout | null = null
  let isCancelled = false

  const wrappedCallback = () => {
    if (!isCancelled) {
      callback()
    }
    timeoutId = null
  }

  const cancel = () => {
    if (timeoutId) {
      clearTimeout(timeoutId)
      timeoutId = null
    }
    if (!isCancelled) {
      isCancelled = true
      onCancel?.()
    }
  }

  timeoutId = setTimeout(wrappedCallback, delay)

  return cancel
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
 */
export const intervalDebugUtils = {
  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—Ç–æ–ª—å–∫–æ –≤ development)
   */
  logActiveIntervals() {
    if (process.env.NODE_ENV !== 'development') return

    const intervals = (window as any).__activeIntervals || []
    const timeouts = (window as any).__activeTimeouts || []

    console.group('üîÑ Active Intervals & Timeouts')
    console.log('Intervals:', intervals.length)
    console.log('Timeouts:', timeouts.length)
    
    if (intervals.length > 0) {
      console.table(intervals.map((id: any, index: number) => ({
        index,
        id,
        type: 'interval'
      })))
    }

    if (timeouts.length > 0) {
      console.table(timeouts.map((id: any, index: number) => ({
        index,
        id,
        type: 'timeout'
      })))
    }
    console.groupEnd()
  },

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–∞–π–º–∞—É—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  clearAllTimers() {
    if (process.env.NODE_ENV !== 'development') {
      logWarn('clearAllTimers should only be used in development')
      return
    }

    const intervals = (window as any).__activeIntervals || []
    const timeouts = (window as any).__activeTimeouts || []

    intervals.forEach((id: NodeJS.Timeout) => clearInterval(id))
    timeouts.forEach((id: NodeJS.Timeout) => clearTimeout(id))

    ;(window as any).__activeIntervals = []
    ;(window as any).__activeTimeouts = []

    logDebug(`Cleared ${intervals.length} intervals and ${timeouts.length} timeouts`)
  },

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
   */
  setLimits(maxIntervals = 10, maxTimeouts = 20) {
    ;(window as any).__maxIntervals = maxIntervals
    ;(window as any).__maxTimeouts = maxTimeouts
  }
}

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export const MIGRATION_CONSTANTS = {
  DEFAULT_INTERVAL_DELAY: 1000,
  DEFAULT_TIMEOUT_DELAY: 5000,
  MAX_SAFE_INTERVALS: 10,
  MAX_SAFE_TIMEOUTS: 20,
  CLEANUP_DELAY: 100
} as const

export default {
  useMigratedInterval,
  useMigratedTimeout,
  checkLegacyIntervals,
  createManagedInterval,
  createManagedTimeout,
  intervalDebugUtils,
  MIGRATION_CONSTANTS
}
