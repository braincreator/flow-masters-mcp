'use client'

import { useCallback, useRef } from 'react'
import { useAnalytics } from '@/providers/AnalyticsProvider'

interface FormAnalyticsOptions {
  formName: string
  formType?: string
  trackFieldFocus?: boolean
  trackFieldBlur?: boolean
  trackFieldErrors?: boolean
}

export function useFormAnalytics(options: FormAnalyticsOptions) {
  const analytics = useAnalytics()
  const formStartedRef = useRef(false)
  const fieldsInteractedRef = useRef<Set<string>>(new Set())

  const { formName, formType, trackFieldFocus = true, trackFieldBlur = false, trackFieldErrors = true } = options

  // –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
  const handleFormStart = useCallback(() => {
    if (!formStartedRef.current) {
      analytics.trackEvent('interaction', 'form_start', formName, undefined, {
        form_type: formType,
      })
      formStartedRef.current = true
    }
  }, [formName, formType, analytics])

  // –¢—Ä–µ–∫–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleFormSubmit = useCallback((success: boolean = true) => {
    const eventName = success ? 'form_submit_success' : 'form_submit_error'
    analytics.trackEvent('interaction', eventName, formName, undefined, {
      form_type: formType,
      success,
    })
  }, [formName, formType, analytics])

  // –¢—Ä–µ–∫–∏–Ω–≥ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ
  const handleFieldFocus = useCallback((fieldName: string) => {
    if (trackFieldFocus) {
      // –¢—Ä–µ–∫–∞–µ–º –Ω–∞—á–∞–ª–æ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ñ–æ–∫—É—Å–µ
      handleFormStart()
      
      // –¢—Ä–µ–∫–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑)
      if (!fieldsInteractedRef.current.has(fieldName)) {
        analytics.trackEvent('interaction', 'form_field_focus', fieldName, undefined, {
          form_name: formName,
          form_type: formType,
        })
        fieldsInteractedRef.current.add(fieldName)
      }
    }
  }, [formName, formType, trackFieldFocus, analytics, handleFormStart])

  // –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const handleFieldError = useCallback((fieldName: string, errorMessage: string) => {
    if (trackFieldErrors && typeof window !== 'undefined' && window.ym) {
      const metrikaId = process.env.NEXT_PUBLIC_YANDEX_METRIKA_ID
      if (metrikaId) {
        window.ym(parseInt(metrikaId), 'reachGoal', 'form_field_error', {
          form_name: formName,
          field_name: fieldName,
          error_message: errorMessage
        })
      }
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('üìä Form field error tracked:', { formName, fieldName, errorMessage })
    }
  }, [formName, trackFieldErrors])

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const createFieldHandlers = useCallback((fieldName: string) => ({
    onFocus: () => handleFieldFocus(fieldName),
    onBlur: trackFieldBlur ? () => {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è blur –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
    } : undefined,
  }), [handleFieldFocus, trackFieldBlur])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è react-hook-form
  const createRHFHandlers = useCallback(() => ({
    onSubmit: (data: any) => {
      handleFormSubmit(true)
      return data
    },
    onError: (errors: any) => {
      handleFormSubmit(false)
      
      // –¢—Ä–µ–∫–∞–µ–º –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      Object.entries(errors).forEach(([fieldName, error]: [string, any]) => {
        if (error?.message) {
          handleFieldError(fieldName, error.message)
        }
      })
    }
  }), [handleFormSubmit, handleFieldError])

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    handleFormStart,
    handleFormSubmit,
    handleFieldFocus,
    handleFieldError,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    createFieldHandlers,
    createRHFHandlers,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isFormStarted: formStartedRef.current,
    interactedFields: Array.from(fieldsInteractedRef.current)
  }
}

// –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Ñ–æ—Ä–º —Å –ø–æ–º–æ—â—å—é ref
export function useAutoFormTracking(formName: string, formType?: string) {
  const analytics = useFormAnalytics({ formName, formType })
  
  const formRef = useCallback((node: HTMLFormElement | null) => {
    if (node) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã
      const inputs = node.querySelectorAll('input, textarea, select')
      
      inputs.forEach((input) => {
        const fieldName = input.getAttribute('name') || input.getAttribute('id') || 'unknown'
        
        input.addEventListener('focus', () => {
          analytics.handleFieldFocus(fieldName)
        })
      })

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
      node.addEventListener('submit', (e) => {
        analytics.handleFormSubmit(true)
      })
    }
  }, [analytics])

  return {
    formRef,
    ...analytics
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
interface FormTrackerProps {
  formName: string
  formType?: string
  children: React.ReactNode
  className?: string
}

export function FormTracker({ formName, formType, children, className }: FormTrackerProps) {
  const { formRef } = useAutoFormTracking(formName, formType)
  
  return (
    <div ref={formRef} className={className}>
      {children}
    </div>
  )
}
