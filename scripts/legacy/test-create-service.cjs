/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ Payload API
 */

const { MongoClient } = require('mongodb')
require('dotenv').config()

const DATABASE_URI = process.env.DATABASE_URI || 'mongodb://127.0.0.1:27017/flow-masters'

async function testCreateService() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ API...')
  
  try {
    // –°–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ API
    const response = await fetch('http://localhost:3000/api/services', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title: {
          ru: "–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞",
          en: "Test Service"
        },
        serviceType: "consultation",
        shortDescription: {
          ru: "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
          en: "Test description"
        },
        price: {
          ru: 1000,
          en: 11
        },
        status: "published",
        _status: "published",
        slug: "test-service"
      })
    })
    
    if (response.ok) {
      const result = await response.json()
      console.log('‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API:', result.id)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ
      const client = new MongoClient(DATABASE_URI)
      await client.connect()
      const db = client.db('flow-masters')
      
      const apiCreated = await db.collection('services').findOne({ _id: result.id })
      const directCreated = await db.collection('services').findOne({ slug: 'express-ai-consultation' })
      
      console.log('\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä:')
      console.log('API created fields:', Object.keys(apiCreated || {}))
      console.log('Direct created fields:', Object.keys(directCreated || {}))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
      const apiFields = new Set(Object.keys(apiCreated || {}))
      const directFields = new Set(Object.keys(directCreated || {}))
      
      const onlyInApi = [...apiFields].filter(f => !directFields.has(f))
      const onlyInDirect = [...directFields].filter(f => !apiFields.has(f))
      
      if (onlyInApi.length > 0) {
        console.log('üîç –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –≤ API –∑–∞–ø–∏—Å–∏:', onlyInApi)
      }
      if (onlyInDirect.length > 0) {
        console.log('üîç –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –≤ –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏:', onlyInDirect)
      }
      
      await client.close()
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, await response.text())
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  }
}

testCreateService()
