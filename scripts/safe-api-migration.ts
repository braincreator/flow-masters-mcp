#!/usr/bin/env tsx

import * as fs from 'fs'
import * as path from 'path'
import { execSync } from 'child_process'

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è API routes: —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ v1
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—ç—Ç–∞–ø–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é API routes –∏–∑ /api/v1/ –≤ /api/
 * —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞—Ç–∞
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  API_DIR: path.resolve(process.cwd(), 'src/app/api'),
  API_V1_DIR: path.resolve(process.cwd(), 'src/app/api/v1'),
  BACKUP_DIR: path.resolve(process.cwd(), '.migration-backup'),
  EXCLUDED_DIRS: [
    'v1',
    'admin',
    '.DS_Store',
    'webhooks', // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ
    'health', // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ
    'revalidate-sitemap', // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ
  ],
  DRY_RUN: process.argv.includes('--dry-run'),
  FORCE: process.argv.includes('--force'),
  ROLLBACK: process.argv.includes('--rollback'),
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = {
  info: (msg: string) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg: string) => console.log(`‚úÖ ${msg}`),
  warning: (msg: string) => console.log(`‚ö†Ô∏è  ${msg}`),
  error: (msg: string) => console.log(`‚ùå ${msg}`),
  step: (msg: string) => console.log(`\nüîÑ ${msg}`),
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function checkDirectories(): boolean {
  if (!fs.existsSync(CONFIG.API_DIR)) {
    log.error('API –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    return false
  }

  if (!fs.existsSync(CONFIG.API_V1_DIR)) {
    log.error('API v1 –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    return false
  }

  return true
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function createBackup(): void {
  log.step('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...')

  if (fs.existsSync(CONFIG.BACKUP_DIR)) {
    if (!CONFIG.FORCE) {
      log.error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏')
      process.exit(1)
    }
    fs.rmSync(CONFIG.BACKUP_DIR, { recursive: true })
  }

  fs.mkdirSync(CONFIG.BACKUP_DIR, { recursive: true })

  // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
  fs.cpSync(CONFIG.API_DIR, path.join(CONFIG.BACKUP_DIR, 'api'), { recursive: true })

  log.success('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞')
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function rollback(): void {
  log.step('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...')

  if (!fs.existsSync(CONFIG.BACKUP_DIR)) {
    log.error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    process.exit(1)
  }

  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é API –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  fs.rmSync(CONFIG.API_DIR, { recursive: true })

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
  fs.cpSync(path.join(CONFIG.BACKUP_DIR, 'api'), CONFIG.API_DIR, { recursive: true })

  log.success('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
function getDirectoriesToMigrate(): string[] {
  const v1Dirs = fs
    .readdirSync(CONFIG.API_V1_DIR, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name)
    .filter((name) => !CONFIG.EXCLUDED_DIRS.includes(name))

  return v1Dirs
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
function checkConflicts(dirs: string[]): { conflicts: string[]; safe: string[] } {
  const conflicts: string[] = []
  const safe: string[] = []

  for (const dir of dirs) {
    const targetPath = path.join(CONFIG.API_DIR, dir)
    if (fs.existsSync(targetPath)) {
      conflicts.push(dir)
    } else {
      safe.push(dir)
    }
  }

  return { conflicts, safe }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function copyDirectory(dirName: string): void {
  const sourcePath = path.join(CONFIG.API_V1_DIR, dirName)
  const targetPath = path.join(CONFIG.API_DIR, dirName)

  if (CONFIG.DRY_RUN) {
    log.info(`[DRY RUN] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ${dirName}: ${sourcePath} -> ${targetPath}`)
    return
  }

  try {
    fs.cpSync(sourcePath, targetPath, { recursive: true })
    log.success(`–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ${dirName}`)
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ ${dirName}: ${error}`)
    throw error
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø—É—Ç–∏
function createRedirect(dirName: string): void {
  const redirectPath = path.join(CONFIG.API_V1_DIR, dirName, 'route.ts')

  if (CONFIG.DRY_RUN) {
    log.info(`[DRY RUN] –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –¥–ª—è ${dirName}`)
    return
  }

  const redirectContent = `import { NextRequest, NextResponse } from 'next/server'

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ API
 * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å /api/v1/${dirName} –Ω–∞ /api/${dirName}
 */

function createRedirect(request: NextRequest) {
  const url = new URL(request.url)
  const newPath = url.pathname.replace('/api/v1/${dirName}', '/api/${dirName}')
  const newUrl = \`\${url.origin}\${newPath}\${url.search}\`
  
  return NextResponse.redirect(newUrl, 301) // Permanent redirect
}

export const GET = createRedirect
export const POST = createRedirect
export const PUT = createRedirect
export const DELETE = createRedirect
export const PATCH = createRedirect
export const OPTIONS = createRedirect
`

  try {
    fs.writeFileSync(redirectPath, redirectContent)
    log.success(`–°–æ–∑–¥–∞–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è ${dirName}`)
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –¥–ª—è ${dirName}: ${error}`)
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
function migrate(): void {
  log.step('–ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ API routes...')

  if (!checkDirectories()) {
    process.exit(1)
  }

  const dirsToMigrate = getDirectoriesToMigrate()
  log.info(`–ù–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${dirsToMigrate.length}`)

  const { conflicts, safe } = checkConflicts(dirsToMigrate)

  if (conflicts.length > 0) {
    log.warning(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ /api/): ${conflicts.join(', ')}`)
    if (!CONFIG.FORCE && !CONFIG.DRY_RUN) {
      log.error('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏')
      process.exit(1)
    }
  }

  if (safe.length > 0) {
    log.info(`–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${safe.join(', ')}`)
  }

  if (!CONFIG.DRY_RUN) {
    createBackup()
  }

  // –ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  for (const dir of safe) {
    copyDirectory(dir)
    createRedirect(dir)
  }

  // –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ --force)
  if (CONFIG.FORCE) {
    for (const dir of conflicts) {
      log.warning(`–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dir}`)
      copyDirectory(dir)
      createRedirect(dir)
    }
  }

  log.success('–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  log.info('–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
  log.info('1. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –ø—É—Ç–µ–π')
  log.info('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ endpoints')
  log.info('3. –û–±–Ω–æ–≤–∏—Ç–µ frontend –∫–æ–¥')
  log.info('4. –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run migrate:api -- --rollback')
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main(): void {
  console.log('üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è API routes\n')

  if (CONFIG.ROLLBACK) {
    rollback()
    return
  }

  if (CONFIG.DRY_RUN) {
    log.info('–†–µ–∂–∏–º DRY RUN - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')
  }

  migrate()
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}

export { migrate, rollback, checkDirectories }
