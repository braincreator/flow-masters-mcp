#!/usr/bin/env tsx

import { getAllApiPaths } from '../src/config/api-routes'

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API endpoints
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –≤—Å–µ—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Å—Ç–∞—Ä—ã–µ (/api/v1/), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–µ (/api/) –ø—É—Ç–∏
 */

interface TestResult {
  path: string
  status: number
  success: boolean
  error?: string
  responseTime: number
  contentType?: string
}

interface TestSummary {
  total: number
  passed: number
  failed: number
  results: TestResult[]
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  BASE_URL: process.env.NEXT_PUBLIC_SERVER_URL || 'http://localhost:3000',
  TIMEOUT: 10000, // 10 —Å–µ–∫—É–Ω–¥
  PARALLEL_REQUESTS: 5, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  RETRY_COUNT: 2,
  VERBOSE: process.argv.includes('--verbose'),
  ONLY_ERRORS: process.argv.includes('--only-errors'),
  TEST_LEGACY: process.argv.includes('--test-legacy'), // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = {
  info: (msg: string) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg: string) => console.log(`‚úÖ ${msg}`),
  warning: (msg: string) => console.log(`‚ö†Ô∏è  ${msg}`),
  error: (msg: string) => console.log(`‚ùå ${msg}`),
  verbose: (msg: string) => CONFIG.VERBOSE && console.log(`üîç ${msg}`),
}

// –°–ø–∏—Å–æ–∫ endpoints, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const PROTECTED_ENDPOINTS = [
  '/api/users',
  '/api/v1/users',
  '/api/orders',
  '/api/v1/orders',
  '/api/cart',
  '/api/v1/cart',
  '/api/admin',
  '/api/v1/admin',
]

// –°–ø–∏—Å–æ–∫ endpoints, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç POST –¥–∞–Ω–Ω—ã–µ
const POST_ENDPOINTS = [
  '/api/contact',
  '/api/v1/contact',
  '/api/form-submissions',
  '/api/checkout',
  '/api/v1/checkout',
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function fetchWithTimeout(url: string, options: RequestInit = {}): Promise<Response> {
  const controller = new AbortController()
  const timeoutId = setTimeout(() => controller.abort(), CONFIG.TIMEOUT)

  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal,
    })
    clearTimeout(timeoutId)
    return response
  } catch (error) {
    clearTimeout(timeoutId)
    throw error
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ endpoint
async function testEndpoint(path: string, retryCount = 0): Promise<TestResult> {
  const startTime = Date.now()
  const fullUrl = `${CONFIG.BASE_URL}${path}`

  log.verbose(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${fullUrl}`)

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    const method = POST_ENDPOINTS.some((ep) =>
      path.includes(ep.replace('/api/v1/', '').replace('/api/', '')),
    )
      ? 'POST'
      : 'GET'

    const options: RequestInit = {
      method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'API-Test-Script/1.0',
      },
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
    if (method === 'POST') {
      options.body = JSON.stringify({ test: true })
    }

    const response = await fetchWithTimeout(fullUrl, options)
    const responseTime = Date.now() - startTime
    const contentType = response.headers.get('content-type')

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    const isSuccess = response.status < 500 && response.status !== 404

    const result: TestResult = {
      path,
      status: response.status,
      success: isSuccess,
      responseTime,
      contentType: contentType || undefined,
    }

    if (isSuccess) {
      log.verbose(`‚úÖ ${path} - ${response.status} (${responseTime}ms)`)
    } else {
      log.verbose(`‚ùå ${path} - ${response.status} (${responseTime}ms)`)
    }

    return result
  } catch (error) {
    const responseTime = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'

    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (retryCount < CONFIG.RETRY_COUNT) {
      log.verbose(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è ${path} (${retryCount + 1}/${CONFIG.RETRY_COUNT})`)
      await new Promise((resolve) => setTimeout(resolve, 1000)) // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
      return testEndpoint(path, retryCount + 1)
    }

    const result: TestResult = {
      path,
      status: 0,
      success: false,
      error: errorMessage,
      responseTime,
    }

    log.verbose(`‚ùå ${path} - ERROR: ${errorMessage} (${responseTime}ms)`)
    return result
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã endpoints –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
async function testEndpointsParallel(paths: string[]): Promise<TestResult[]> {
  const results: TestResult[] = []

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  for (let i = 0; i < paths.length; i += CONFIG.PARALLEL_REQUESTS) {
    const batch = paths.slice(i, i + CONFIG.PARALLEL_REQUESTS)
    const batchResults = await Promise.all(batch.map((path) => testEndpoint(path)))
    results.push(...batchResults)

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
    if (i + CONFIG.PARALLEL_REQUESTS < paths.length) {
      await new Promise((resolve) => setTimeout(resolve, 100))
    }
  }

  return results
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function getPathsToTest(): string[] {
  const paths = getAllApiPaths()

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const staticPaths = paths.filter((path) => !path.includes(':') && !path.includes('{'))

  if (CONFIG.TEST_LEGACY) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const legacyPaths = staticPaths
      .filter((path) => !path.includes('/api/v1/'))
      .map((path) => path.replace('/api/', '/api/v1/'))

    return [...staticPaths, ...legacyPaths]
  }

  return staticPaths
}

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function printResults(summary: TestSummary): void {
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints:')
  console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
  console.log(`–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${summary.total}`)
  console.log(`–£—Å–ø–µ—à–Ω–æ: ${summary.passed} ‚úÖ`)
  console.log(`–û—à–∏–±–∫–∏: ${summary.failed} ‚ùå`)
  console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((summary.passed / summary.total) * 100).toFixed(1)}%`)

  if (summary.failed > 0) {
    console.log('\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:')
    summary.results
      .filter((r) => !r.success)
      .forEach((result) => {
        console.log(
          `  ${result.path} - ${result.status || 'ERROR'} ${result.error ? `(${result.error})` : ''}`,
        )
      })
  }

  if (!CONFIG.ONLY_ERRORS && CONFIG.VERBOSE) {
    console.log('\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:')
    summary.results
      .filter((r) => r.success)
      .forEach((result) => {
        console.log(`  ${result.path} - ${result.status} (${result.responseTime}ms)`)
      })
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
  const responseTimes = summary.results.map((r) => r.responseTime)
  const avgResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length
  const maxResponseTime = Math.max(...responseTimes)

  console.log(`\n‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(0)}ms`)
  console.log(`‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${maxResponseTime}ms`)
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests(): Promise<void> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints...\n')

  const pathsToTest = getPathsToTest()
  log.info(`–ù–∞–π–¥–µ–Ω–æ ${pathsToTest.length} endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`)

  if (CONFIG.TEST_LEGACY) {
    log.info('–í–∫–ª—é—á–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ legacy –ø—É—Ç–µ–π (/api/v1/)')
  }

  const startTime = Date.now()
  const results = await testEndpointsParallel(pathsToTest)
  const totalTime = Date.now() - startTime

  const summary: TestSummary = {
    total: results.length,
    passed: results.filter((r) => r.success).length,
    failed: results.filter((r) => !r.success).length,
    results,
  }

  printResults(summary)

  console.log(`\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${totalTime}ms`)

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  if (summary.failed > 0) {
    process.exit(1)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth(): Promise<boolean> {
  try {
    const response = await fetchWithTimeout(`${CONFIG.BASE_URL}/api/health`)
    return response.ok
  } catch {
    return false
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): void {
  console.log('üöÄ API Endpoints Tester\n')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  log.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...')
  const serverHealthy = await checkServerHealth()

  if (!serverHealthy) {
    log.error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${CONFIG.BASE_URL}`)
    log.info('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω')
    process.exit(1)
  }

  log.success('–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')

  await runTests()
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`)
    process.exit(1)
  })
}

export { testEndpoint, runTests }
