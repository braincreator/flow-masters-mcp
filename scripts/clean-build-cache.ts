#!/usr/bin/env tsx

import * as fs from 'fs'
import * as path from 'path'

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π —Å–±–æ—Ä–∫–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ API
 * 
 * –û—á–∏—â–∞–µ—Ç TypeScript, Next.js –∏ –¥—Ä—É–≥–∏–µ –∫—ç—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å
 * —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—ã–µ API –ø—É—Ç–∏
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  PROJECT_ROOT: process.cwd(),
  CACHE_DIRS: [
    '.next',
    'node_modules/.cache',
    '.turbo',
  ],
  CACHE_FILES: [
    'tsconfig.tsbuildinfo',
    '.eslintcache',
  ],
  DRY_RUN: process.argv.includes('--dry-run'),
  VERBOSE: process.argv.includes('--verbose'),
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = {
  info: (msg: string) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg: string) => console.log(`‚úÖ ${msg}`),
  warning: (msg: string) => console.log(`‚ö†Ô∏è  ${msg}`),
  error: (msg: string) => console.log(`‚ùå ${msg}`),
  verbose: (msg: string) => CONFIG.VERBOSE && console.log(`üîç ${msg}`),
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function getDirectorySize(dirPath: string): number {
  let totalSize = 0
  
  try {
    const items = fs.readdirSync(dirPath, { withFileTypes: true })
    
    for (const item of items) {
      const itemPath = path.join(dirPath, item.name)
      
      if (item.isDirectory()) {
        totalSize += getDirectorySize(itemPath)
      } else if (item.isFile()) {
        const stats = fs.statSync(itemPath)
        totalSize += stats.size
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  }
  
  return totalSize
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
function formatSize(bytes: number): string {
  const units = ['B', 'KB', 'MB', 'GB']
  let size = bytes
  let unitIndex = 0
  
  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024
    unitIndex++
  }
  
  return `${size.toFixed(1)} ${units[unitIndex]}`
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function removeDirectory(dirPath: string): boolean {
  const fullPath = path.resolve(CONFIG.PROJECT_ROOT, dirPath)
  
  if (!fs.existsSync(fullPath)) {
    log.verbose(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dirPath}`)
    return false
  }
  
  const size = getDirectorySize(fullPath)
  
  if (CONFIG.DRY_RUN) {
    log.info(`[DRY RUN] –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dirPath} (${formatSize(size)})`)
    return true
  }
  
  try {
    fs.rmSync(fullPath, { recursive: true, force: true })
    log.success(`–£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath} (${formatSize(size)})`)
    return true
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}: ${error}`)
    return false
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
function removeFile(filePath: string): boolean {
  const fullPath = path.resolve(CONFIG.PROJECT_ROOT, filePath)
  
  if (!fs.existsSync(fullPath)) {
    log.verbose(`–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${filePath}`)
    return false
  }
  
  const stats = fs.statSync(fullPath)
  const size = stats.size
  
  if (CONFIG.DRY_RUN) {
    log.info(`[DRY RUN] –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filePath} (${formatSize(size)})`)
    return true
  }
  
  try {
    fs.unlinkSync(fullPath)
    log.success(`–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${filePath} (${formatSize(size)})`)
    return true
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}: ${error}`)
    return false
  }
}

// –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—ç—à-—Ñ–∞–π–ª–æ–≤
function findAdditionalCacheFiles(): string[] {
  const additionalFiles: string[] = []
  
  try {
    // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –∫—ç—à–∞
    const cacheExtensions = ['.cache', '.tmp', '.temp']
    const items = fs.readdirSync(CONFIG.PROJECT_ROOT, { withFileTypes: true })
    
    for (const item of items) {
      if (item.isFile()) {
        const ext = path.extname(item.name)
        if (cacheExtensions.includes(ext)) {
          additionalFiles.push(item.name)
        }
      }
    }
  } catch (error) {
    log.verbose(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—ç—à-—Ñ–∞–π–ª–æ–≤: ${error}`)
  }
  
  return additionalFiles
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
function cleanBuildCache(): void {
  log.info('üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π —Å–±–æ—Ä–∫–∏...')
  
  if (CONFIG.DRY_RUN) {
    log.info('–†–µ–∂–∏–º DRY RUN - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')
  }
  
  let totalCleaned = 0
  let totalSize = 0
  
  // –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫—ç—à–∞
  log.info('\nüìÅ –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫—ç—à–∞:')
  for (const dir of CONFIG.CACHE_DIRS) {
    const fullPath = path.resolve(CONFIG.PROJECT_ROOT, dir)
    if (fs.existsSync(fullPath)) {
      const size = getDirectorySize(fullPath)
      totalSize += size
      
      if (removeDirectory(dir)) {
        totalCleaned++
      }
    } else {
      log.verbose(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dir}`)
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞
  log.info('\nüìÑ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞:')
  for (const file of CONFIG.CACHE_FILES) {
    const fullPath = path.resolve(CONFIG.PROJECT_ROOT, file)
    if (fs.existsSync(fullPath)) {
      const stats = fs.statSync(fullPath)
      totalSize += stats.size
      
      if (removeFile(file)) {
        totalCleaned++
      }
    } else {
      log.verbose(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`)
    }
  }
  
  // –ü–æ–∏—Å–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—ç—à-—Ñ–∞–π–ª–æ–≤
  const additionalFiles = findAdditionalCacheFiles()
  if (additionalFiles.length > 0) {
    log.info('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—ç—à-—Ñ–∞–π–ª—ã:')
    for (const file of additionalFiles) {
      const fullPath = path.resolve(CONFIG.PROJECT_ROOT, file)
      if (fs.existsSync(fullPath)) {
        const stats = fs.statSync(fullPath)
        totalSize += stats.size
        
        if (removeFile(file)) {
          totalCleaned++
        }
      }
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  log.info('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:')
  log.success(`–û—á–∏—â–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${totalCleaned}`)
  log.success(`–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: ${formatSize(totalSize)}`)
  
  if (!CONFIG.DRY_RUN) {
    log.info('\nüîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    log.info('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    log.info('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É: npm run build')
    log.info('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API endpoints: npm run test:api')
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function validateProjectRoot(): boolean {
  const packageJsonPath = path.resolve(CONFIG.PROJECT_ROOT, 'package.json')
  const nextConfigPath = path.resolve(CONFIG.PROJECT_ROOT, 'next.config.mjs')
  
  if (!fs.existsSync(packageJsonPath) || !fs.existsSync(nextConfigPath)) {
    log.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã package.json –∏–ª–∏ next.config.mjs')
    log.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞')
    return false
  }
  
  return true
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main(): void {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π —Å–±–æ—Ä–∫–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ API\n')
  
  if (!validateProjectRoot()) {
    process.exit(1)
  }
  
  cleanBuildCache()
  
  if (CONFIG.DRY_RUN) {
    log.info('\n–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run')
  } else {
    log.success('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  }
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}

export { cleanBuildCache, removeDirectory, removeFile }