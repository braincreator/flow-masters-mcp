#!/usr/bin/env node

/**
 * Script to create optimized subscription plans with clear differentiation
 * Run with: node scripts/optimize-subscription-plans.mjs
 */

const API_BASE = 'http://localhost:3000'

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã —É—Å–ª—É–≥ —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
const optimizedPlans = [
  {
    name: {
      ru: '–°—Ç–∞—Ä—Ç–µ—Ä',
      en: 'Starter',
    },
    description: {
      ru: '–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ë–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –±—ã—Å—Ç—Ä—ã–º —Å—Ç–∞—Ä—Ç–æ–º.',
      en: 'Perfect solution for small business. Basic automation with quick start.',
    },
    features: {
      ru: [
        { feature: '–ò–ò-—á–∞—Ç–±–æ—Ç –¥–ª—è 1 –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (Telegram/WhatsApp)' },
        { feature: '–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM' },
        { feature: '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∏ FAQ-–±–æ—Ç' },
        { feature: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 30 –¥–Ω–µ–π' },
        { feature: '–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (4 —á–∞—Å–∞)' },
        { feature: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞' },
      ],
      en: [
        { feature: 'AI chatbot for 1 platform (Telegram/WhatsApp)' },
        { feature: 'Basic CRM integration' },
        { feature: 'Auto-responder and FAQ bot' },
        { feature: '30 days technical support' },
        { feature: 'Team training (4 hours)' },
        { feature: 'Setup included' },
      ],
    },
    price: {
      ru: 89000,
      en: 999,
    },
    currency: {
      ru: 'RUB',
      en: 'USD',
    },
    period: 'monthly',
    trialPeriodDays: 0,
    maxSubscriptionMonths: 0,
    autoRenew: false,
    allowCancel: true,
    isActive: true,
    isPopular: false,
    metadata: {
      category: 'ai-agency',
      level: 'starter',
      prepaymentPercentage: 50,
      targetAudience: 'small-business',
    },
  },
  {
    name: {
      ru: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
      en: 'Professional',
    },
    description: {
      ru: '–î–ª—è —Ä–∞—Å—Ç—É—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.',
      en: 'For growing business. Complete sales and marketing automation with analytics.',
    },
    features: {
      ru: [
        { feature: '–ò–ò-—á–∞—Ç–±–æ—Ç—ã –¥–ª—è 3 –ø–ª–∞—Ç—Ñ–æ—Ä–º' },
        { feature: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CRM/ERP' },
        { feature: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è email –∏ SMS –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞' },
        { feature: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏' },
        { feature: '–õ–∏–¥-—Å–∫–æ—Ä–∏–Ω–≥ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è' },
        { feature: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 90 –¥–Ω–µ–π' },
        { feature: '–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (12 —á–∞—Å–æ–≤)' },
        { feature: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤' },
      ],
      en: [
        { feature: 'AI chatbots for 3 platforms' },
        { feature: 'Advanced CRM/ERP integration' },
        { feature: 'Email and SMS marketing automation' },
        { feature: 'Real-time analytics and reports' },
        { feature: 'Lead scoring and segmentation' },
        { feature: '90 days technical support' },
        { feature: 'Team training (12 hours)' },
        { feature: 'Business process setup' },
      ],
    },
    price: {
      ru: 189000,
      en: 2099,
    },
    currency: {
      ru: 'RUB',
      en: 'USD',
    },
    period: 'monthly',
    trialPeriodDays: 7,
    maxSubscriptionMonths: 0,
    autoRenew: true,
    allowCancel: true,
    isActive: true,
    isPopular: true,
    metadata: {
      category: 'ai-agency',
      level: 'professional',
      prepaymentPercentage: 30,
      targetAudience: 'medium-business',
    },
  },
  {
    name: {
      ru: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π',
      en: 'Enterprise',
    },
    description: {
      ru: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.',
      en: 'Maximum solution for large business. Custom development and priority support.',
    },
    features: {
      ru: [
        { feature: '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ò–ò-—Ä–µ—à–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' },
        { feature: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –∑–∞–¥–∞—á–∏' },
        { feature: '–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤' },
        { feature: '–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞' },
        { feature: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7' },
        { feature: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ BI' },
        { feature: '–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (40 —á–∞—Å–æ–≤)' },
        { feature: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ò–ò-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏' },
        { feature: 'SLA –≥–∞—Ä–∞–Ω—Ç–∏–∏ 99.9%' },
        { feature: 'API –¥–æ—Å—Ç—É–ø –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' },
      ],
      en: [
        { feature: 'Unlimited AI solutions and integrations' },
        { feature: 'Custom development for specific needs' },
        { feature: 'Complete automation of all processes' },
        { feature: 'Dedicated project manager' },
        { feature: 'Priority 24/7 support' },
        { feature: 'Advanced analytics and BI' },
        { feature: 'Team training (40 hours)' },
        { feature: 'AI strategy consultations' },
        { feature: '99.9% SLA guarantees' },
        { feature: 'API access and integrations' },
      ],
    },
    price: {
      ru: 399000,
      en: 4399,
    },
    currency: {
      ru: 'RUB',
      en: 'USD',
    },
    period: 'monthly',
    trialPeriodDays: 14,
    maxSubscriptionMonths: 0,
    autoRenew: true,
    allowCancel: true,
    isActive: true,
    isPopular: false,
    metadata: {
      category: 'ai-agency',
      level: 'enterprise',
      prepaymentPercentage: 20,
      targetAudience: 'large-business',
    },
  },
]

async function clearExistingPlans() {
  console.log('üóëÔ∏è  Removing existing AI agency plans...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã
    const response = await fetch(`${API_BASE}/api/subscription-plans?limit=100`)
    if (!response.ok) {
      throw new Error(`Failed to fetch plans: ${response.statusText}`)
    }

    const data = await response.json()
    const plans = data.docs || []

    // –£–¥–∞–ª—è–µ–º –ø–ª–∞–Ω—ã AI-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
    for (const plan of plans) {
      if (plan.metadata && plan.metadata.category === 'ai-agency') {
        try {
          const deleteResponse = await fetch(`${API_BASE}/api/subscription-plans/${plan.id}`, {
            method: 'DELETE',
          })

          if (deleteResponse.ok) {
            console.log(`‚úÖ Deleted old plan: ${plan.name?.ru || plan.name}`)
          } else {
            console.error(`‚ùå Failed to delete plan: ${plan.name?.ru || plan.name}`)
          }
        } catch (error) {
          console.error(`‚ùå Error deleting plan:`, error.message)
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Error clearing plans:', error.message)
  }
}

async function createOptimizedPlans() {
  console.log('üéØ Creating optimized subscription plans...')

  try {
    for (const planData of optimizedPlans) {
      try {
        console.log(`Creating plan: ${planData.name.ru}...`)

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
        const ruResponse = await fetch(`${API_BASE}/api/subscription-plans?locale=ru`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: planData.name.ru,
            description: planData.description.ru,
            features: planData.features.ru,
            price: planData.price.ru,
            currency: planData.currency.ru,
            period: planData.period,
            trialPeriodDays: planData.trialPeriodDays,
            maxSubscriptionMonths: planData.maxSubscriptionMonths,
            autoRenew: planData.autoRenew,
            allowCancel: planData.allowCancel,
            isActive: planData.isActive,
            isPopular: planData.isPopular,
            metadata: planData.metadata,
          }),
        })

        if (ruResponse.ok) {
          const ruResult = await ruResponse.json()
          const planId = ruResult.doc?.id
          console.log(
            `‚úÖ Created RU plan: ${planData.name.ru} - ${planData.price.ru.toLocaleString()}‚ÇΩ`,
          )

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
          const enResponse = await fetch(`${API_BASE}/api/subscription-plans/${planId}?locale=en`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              name: planData.name.en,
              description: planData.description.en,
              features: planData.features.en,
              price: planData.price.en,
              currency: planData.currency.en,
            }),
          })

          if (enResponse.ok) {
            console.log(
              `‚úÖ Updated EN plan: ${planData.name.en} - $${planData.price.en.toLocaleString()}`,
            )
          } else {
            console.error(`‚ùå Error updating EN plan ${planData.name.en}`)
          }
        } else {
          const error = await ruResponse.text()
          console.error(`‚ùå Error creating plan ${planData.name.ru}:`, error)
        }
      } catch (error) {
        console.error(`‚ùå Error processing plan ${planData.name.ru}:`, error.message)
      }
    }

    console.log('\nüéâ Optimization complete!')
    console.log('\nüìä New plan structure:')
    console.log('1. –°—Ç–∞—Ä—Ç–µ—Ä - 89,000‚ÇΩ (Basic automation)')
    console.log('2. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª - 189,000‚ÇΩ (Full automation) ‚≠ê')
    console.log('3. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π - 399,000‚ÇΩ (Enterprise solution)')
    console.log('\n‚ú® Clear pricing tiers with no overlaps!')
  } catch (error) {
    console.error('üí• Error:', error)
    process.exit(1)
  }
}

async function main() {
  await clearExistingPlans()
  await createOptimizedPlans()
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main()
