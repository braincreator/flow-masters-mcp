import * as fs from 'fs'
import * as path from 'path'

// –ë–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏
const API_DIR = path.resolve(process.cwd(), 'src/app/api')
const API_V1_DIR = path.resolve(API_DIR, 'v1')

// –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è v1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(API_V1_DIR)) {
  fs.mkdirSync(API_V1_DIR, { recursive: true })
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è v1')
}

// –ò—Å–∫–ª—é—á–µ–Ω–∏—è - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –∏–ª–∏ —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ
const EXCEPTIONS = ['v1', 'admin', '.DS_Store', 'revalidate', 'webhooks', 'docs']

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ api
const apiDirs = fs
  .readdirSync(API_DIR, { withFileTypes: true })
  .filter((dirent) => dirent.isDirectory() && !EXCEPTIONS.includes(dirent.name))

console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ v1...\n`)
console.log(
  `–ù–∞–π–¥–µ–Ω–æ ${apiDirs.length} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:\n${apiDirs.map((d) => '- ' + d.name).join('\n')}\n`,
)

apiDirs.forEach((dir) => {
  const srcDir = path.join(API_DIR, dir.name)
  const destDir = path.join(API_V1_DIR, dir.name)

  // –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ v1, —Å–∫–∏–ø–∞–µ–º
  if (fs.existsSync(destDir)) {
    console.log(`‚ö†Ô∏è ${dir.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ v1, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
    return
  }

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (!fs.existsSync(destDir)) {
    fs.mkdirSync(destDir, { recursive: true })
  }

  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  try {
    fs.cpSync(srcDir, destDir, { recursive: true })
    console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ${dir.name} –≤ v1/${dir.name}`)
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ ${dir.name}:`, error)
    return
  }

  // –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ä–æ–≥–æ –ø—É—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ route.ts –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
    const routeFiles = fs
      .readdirSync(srcDir)
      .filter((file) => file === 'route.ts' || file === 'route.js' || file === 'route.tsx')

    if (routeFiles.length > 0) {
      // –ó–∞–º–µ–Ω–∞ route.ts —Ñ–∞–π–ª–∞ –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç
      const redirectFile = path.join(srcDir, routeFiles[0])
      const redirectContent = `
import { NextResponse } from 'next/server';

// –≠—Ç–æ—Ç —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç–æ–º –º–∏–≥—Ä–∞—Ü–∏–∏ API
// –†–µ–¥–∏—Ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ä–æ–≥–æ API –ø—É—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π v1 –ø—É—Ç—å

export function GET(request: Request) {
  const url = new URL(request.url);
  const newUrl = \`\${url.origin}/api/v1/${dir.name}\${url.pathname.replace('/api/${dir.name}', '')}\${url.search}\`;
  return NextResponse.redirect(newUrl);
}

export function POST(request: Request) {
  const url = new URL(request.url);
  const newUrl = \`\${url.origin}/api/v1/${dir.name}\${url.pathname.replace('/api/${dir.name}', '')}\${url.search}\`;
  return NextResponse.redirect(newUrl);
}

export function PUT(request: Request) {
  const url = new URL(request.url);
  const newUrl = \`\${url.origin}/api/v1/${dir.name}\${url.pathname.replace('/api/${dir.name}', '')}\${url.search}\`;
  return NextResponse.redirect(newUrl);
}

export function DELETE(request: Request) {
  const url = new URL(request.url);
  const newUrl = \`\${url.origin}/api/v1/${dir.name}\${url.pathname.replace('/api/${dir.name}', '')}\${url.search}\`;
  return NextResponse.redirect(newUrl);
}
`
      fs.writeFileSync(redirectFile, redirectContent)
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è ${dir.name} (${routeFiles[0]})`)
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ route.ts
      const subdirs = fs
        .readdirSync(srcDir, { withFileTypes: true })
        .filter((dirent) => dirent.isDirectory())

      for (const subdir of subdirs) {
        const subdirPath = path.join(srcDir, subdir.name)
        const subRouteFiles = fs
          .readdirSync(subdirPath)
          .filter((file) => file === 'route.ts' || file === 'route.js' || file === 'route.tsx')

        if (subRouteFiles.length > 0) {
          const redirectFile = path.join(subdirPath, subRouteFiles[0])
          const redirectContent = `
import { NextResponse } from 'next/server';

// –≠—Ç–æ—Ç —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç–æ–º –º–∏–≥—Ä–∞—Ü–∏–∏ API
// –†–µ–¥–∏—Ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ä–æ–≥–æ API –ø—É—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π v1 –ø—É—Ç—å

export function GET(request: Request) {
  const url = new URL(request.url);
  const newUrl = \`\${url.origin}/api/v1/${dir.name}/${subdir.name}\${url.pathname.replace('/api/${dir.name}/${subdir.name}', '')}\${url.search}\`;
  return NextResponse.redirect(newUrl);
}

export function POST(request: Request) {
  const url = new URL(request.url);
  const newUrl = \`\${url.origin}/api/v1/${dir.name}/${subdir.name}\${url.pathname.replace('/api/${dir.name}/${subdir.name}', '')}\${url.search}\`;
  return NextResponse.redirect(newUrl);
}

export function PUT(request: Request) {
  const url = new URL(request.url);
  const newUrl = \`\${url.origin}/api/v1/${dir.name}/${subdir.name}\${url.pathname.replace('/api/${dir.name}/${subdir.name}', '')}\${url.search}\`;
  return NextResponse.redirect(newUrl);
}

export function DELETE(request: Request) {
  const url = new URL(request.url);
  const newUrl = \`\${url.origin}/api/v1/${dir.name}/${subdir.name}\${url.pathname.replace('/api/${dir.name}/${subdir.name}', '')}\${url.search}\`;
  return NextResponse.redirect(newUrl);
}
`
          fs.writeFileSync(redirectFile, redirectContent)
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è ${dir.name}/${subdir.name} (${subRouteFiles[0]})`)
        }
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –¥–ª—è ${dir.name}:`, error)
  }
})

console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
console.log('\n–î–∞–ª–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:')
console.log('1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏')
console.log('2. –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö URL')
console.log('3. –°–æ–∑–¥–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤\n')
