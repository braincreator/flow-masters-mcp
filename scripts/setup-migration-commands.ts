#!/usr/bin/env tsx

import * as fs from 'fs'
import * as path from 'path'

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ package.json
 */

const PACKAGE_JSON_PATH = path.resolve(process.cwd(), 'package.json')

const MIGRATION_COMMANDS = {
  'migrate:api': 'tsx scripts/safe-api-migration.ts',
  'migrate:api:dry-run': 'tsx scripts/safe-api-migration.ts --dry-run',
  'migrate:api:force': 'tsx scripts/safe-api-migration.ts --force',
  'migrate:api:rollback': 'tsx scripts/safe-api-migration.ts --rollback',
  'test:api': 'tsx scripts/test-api-endpoints.ts',
  'test:api:verbose': 'tsx scripts/test-api-endpoints.ts --verbose',
  'test:api:legacy': 'tsx scripts/test-api-endpoints.ts --test-legacy',
  'test:api:errors': 'tsx scripts/test-api-endpoints.ts --only-errors',
}

function updatePackageJson(): void {
  try {
    // –ß–∏—Ç–∞–µ–º package.json
    const packageJsonContent = fs.readFileSync(PACKAGE_JSON_PATH, 'utf8')
    const packageJson = JSON.parse(packageJsonContent)

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ scripts
    if (!packageJson.scripts) {
      packageJson.scripts = {}
    }

    let addedCommands = 0
    for (const [command, script] of Object.entries(MIGRATION_COMMANDS)) {
      if (!packageJson.scripts[command]) {
        packageJson.scripts[command] = script
        addedCommands++
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${command}`)
      } else {
        console.log(`‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${command}`)
      }
    }

    if (addedCommands > 0) {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
      fs.writeFileSync(PACKAGE_JSON_PATH, JSON.stringify(packageJson, null, 2) + '\n')
      console.log(`\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCommands} –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ package.json`)
    } else {
      console.log('\n‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ package.json')
    }

    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ API:')
    console.log('  npm run migrate:api:dry-run    - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–∏')
    console.log('  npm run migrate:api            - –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é')
    console.log('  npm run migrate:api:force      - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è')
    console.log('  npm run migrate:api:rollback   - –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏')
    console.log('  npm run test:api               - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints')
    console.log('  npm run test:api:verbose       - –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    console.log('  npm run test:api:legacy        - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ legacy –ø—É—Ç–µ–π')
    console.log('  npm run test:api:errors        - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ package.json:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ API...\n')
  updatePackageJson()
}

export { updatePackageJson }
