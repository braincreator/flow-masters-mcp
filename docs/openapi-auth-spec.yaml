openapi: 3.0.3
info:
  title: Flow Masters API
  description: |
    Enhanced API with dual authentication support for Flow Masters platform.
    
    ## Authentication
    
    This API supports two authentication methods:
    
    1. **Bearer Token (Recommended)**: Use `Authorization: Bearer <token>` header
    2. **Legacy API Key (Deprecated)**: Use `x-api-key: <token>` header
    
    When both headers are present, Bearer token takes precedence.
    
    ## Rate Limiting
    
    - Authenticated requests: 1000/hour
    - Public endpoints: 100/hour per IP
    - Debug endpoints: 50/hour (development only)
    
  version: 2.0.0
  contact:
    name: Flow Masters API Support
    email: api-support@flow-masters.ru
    url: https://flow-masters.ru/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.flow-masters.ru
    description: Production server
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Recommended authentication method using Authorization: Bearer <token>"
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: "Legacy authentication method using x-api-key header (deprecated but supported)"

  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
        message:
          type: string
          description: Detailed error description
      example:
        error: "Invalid API key"
        message: "The provided API key is not valid"

    AuthMetrics:
      type: object
      properties:
        bearer_requests:
          type: integer
          description: Number of requests using Bearer token
        legacy_requests:
          type: integer
          description: Number of requests using x-api-key header
        total_requests:
          type: integer
          description: Total number of authenticated requests
        bearer_percentage:
          type: integer
          description: Percentage of requests using Bearer token
        legacy_percentage:
          type: integer
          description: Percentage of requests using legacy format

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string

    Collection:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Post:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            title:
              type: string
              description: Post title
            content:
              type: string
              description: Post content
            status:
              type: string
              enum: [draft, published, archived]
            slug:
              type: string
              description: URL-friendly identifier

    PaginatedResponse:
      type: object
      properties:
        docs:
          type: array
          items: {}
        totalDocs:
          type: integer
        limit:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        hasNextPage:
          type: boolean
        hasPrevPage:
          type: boolean

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            missing_auth:
              summary: Missing authentication
              value:
                error: "Missing API key. Use either \"Authorization: Bearer <token>\" or \"x-api-key: <token>\" header"
            
    ForbiddenError:
      description: Invalid API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid_key:
              summary: Invalid API key
              value:
                error: "Invalid API key"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /api/health:
    get:
      summary: Health check
      description: Check API health status (no authentication required)
      tags:
        - System
      security: []  # No authentication required
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /api/test-enhanced-auth:
    get:
      summary: Test enhanced authentication
      description: Test endpoint for validating authentication system
      tags:
        - Authentication
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  metrics:
                    $ref: '#/components/schemas/AuthMetrics'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/auth-middleware:
    get:
      summary: Get authentication middleware status
      description: Retrieve authentication metrics, health, and configuration
      tags:
        - Authentication
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: action
          in: query
          required: false
          schema:
            type: string
            enum: [metrics, health, config]
            default: metrics
          description: Type of information to retrieve
      responses:
        '200':
          description: Middleware information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  metrics:
                    $ref: '#/components/schemas/AuthMetrics'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      summary: Manage authentication middleware
      description: Reset metrics or perform other management operations
      tags:
        - Authentication
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [reset_metrics, test_auth]
                test_key:
                  type: string
                  description: API key for testing (required for test_auth action)
      responses:
        '200':
          description: Operation completed successfully
        '400':
          description: Invalid request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/posts:
    get:
      summary: List posts
      description: Retrieve a paginated list of posts
      tags:
        - Collections
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: where
          in: query
          schema:
            type: string
          description: JSON string for filtering (e.g., {"status":"published"})
      responses:
        '200':
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      docs:
                        type: array
                        items:
                          $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      summary: Create post
      description: Create a new post
      tags:
        - Collections
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                content:
                  type: string
                status:
                  type: string
                  enum: [draft, published, archived]
                  default: draft
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid request data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/integrations:
    post:
      summary: Execute integration action
      description: Perform CRUD operations on collections via integration API
      tags:
        - Integrations
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - collection
              properties:
                action:
                  type: string
                  enum: [find, create, update, delete]
                collection:
                  type: string
                  description: Collection name (e.g., posts, categories)
                data:
                  type: object
                  description: Action-specific data
            examples:
              find_posts:
                summary: Find posts
                value:
                  action: "find"
                  collection: "posts"
                  data:
                    where:
                      status: "published"
                    limit: 5
              create_post:
                summary: Create post
                value:
                  action: "create"
                  collection: "posts"
                  data:
                    title: "New Post"
                    content: "Post content"
                    status: "draft"
      responses:
        '200':
          description: Integration action completed successfully
        '400':
          description: Invalid request data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

tags:
  - name: Authentication
    description: Authentication testing and management endpoints
  - name: System
    description: System health and monitoring endpoints
  - name: Collections
    description: Content collection endpoints (posts, pages, etc.)
  - name: Integrations
    description: Integration API for external systems
