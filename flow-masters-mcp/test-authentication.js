#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É MCP –∏ Flow Masters
 */

const http = require('http')
const https = require('https')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  API_HOST: process.env.API_HOST || 'localhost',
  API_PORT: parseInt(process.env.API_PORT || '3000', 10),
  API_URL: process.env.API_URL || null,
  API_KEY: process.env.API_KEY || 'test-api-key',
  TIMEOUT: parseInt(process.env.TEST_TIMEOUT || '10000', 10),
  USE_HTTPS: process.env.USE_HTTPS === 'true',
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = {
  info: (msg) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg) => console.log(`‚úÖ ${msg}`),
  warning: (msg) => console.log(`‚ö†Ô∏è  ${msg}`),
  error: (msg) => console.log(`‚ùå ${msg}`),
  debug: (msg) => console.log(`üîç ${msg}`),
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP/HTTPS –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const client = options.protocol === 'https:' ? https : http
    
    const req = client.request(options, (res) => {
      let body = ''
      res.on('data', (chunk) => {
        body += chunk
      })
      res.on('end', () => {
        try {
          const result = {
            statusCode: res.statusCode,
            headers: res.headers,
            body: body ? JSON.parse(body) : null,
            rawBody: body,
          }
          resolve(result)
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: null,
            rawBody: body,
          })
        }
      })
    })

    req.on('error', reject)
    req.setTimeout(CONFIG.TIMEOUT, () => {
      req.destroy()
      reject(new Error('Request timeout'))
    })

    if (data) {
      req.write(JSON.stringify(data))
    }

    req.end()
  })
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π –∑–∞–ø—Ä–æ—Å–∞
function createRequestOptions(path, method = 'GET', headers = {}) {
  if (CONFIG.API_URL) {
    const url = new URL(path, CONFIG.API_URL)
    return {
      protocol: url.protocol,
      hostname: url.hostname,
      port: url.port || (url.protocol === 'https:' ? 443 : 80),
      path: url.pathname + url.search,
      method,
      headers: {
        'Content-Type': 'application/json',
        'Host': url.host,
        ...headers,
      },
    }
  } else {
    return {
      protocol: CONFIG.USE_HTTPS ? 'https:' : 'http:',
      hostname: CONFIG.API_HOST,
      port: CONFIG.API_PORT,
      path,
      method,
      headers: {
        'Content-Type': 'application/json',
        ...headers,
      },
    }
  }
}

// –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º
async function testValidApiKey() {
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º...')
  
  try {
    const options = createRequestOptions('/api/category-types', 'GET', {
      'Authorization': `Bearer ${CONFIG.API_KEY}`,
      'X-Client': 'MCP-Auth-Test',
    })
    
    log.debug(`–ó–∞–ø—Ä–æ—Å: ${options.method} ${options.protocol}//${options.hostname}:${options.port}${options.path}`)
    log.debug(`–ó–∞–≥–æ–ª–æ–≤–æ–∫: Authorization: Bearer ${CONFIG.API_KEY.substring(0, 8)}...`)
    
    const response = await makeRequest(options)
    
    if (response.statusCode === 200) {
      log.success('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º –∫–ª—é—á–æ–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
      log.info(`–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${response.body?.data?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
      return true
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
      log.warning(`–û—Ç–≤–µ—Ç: ${response.rawBody}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–ª—é—á–∞: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º
async function testInvalidApiKey() {
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º...')
  
  try {
    const options = createRequestOptions('/api/category-types', 'GET', {
      'Authorization': 'Bearer invalid-api-key-12345',
      'X-Client': 'MCP-Auth-Test',
    })
    
    const response = await makeRequest(options)
    
    if (response.statusCode === 403) {
      log.success('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (403 Forbidden)')
      return true
    } else if (response.statusCode === 401) {
      log.success('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (401 Unauthorized)')
      return true
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–ª—é—á–∞: ${response.statusCode}`)
      log.warning(`–û—Ç–≤–µ—Ç: ${response.rawBody}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–ª—é—á–∞: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç –±–µ–∑ API –∫–ª—é—á–∞
async function testMissingApiKey() {
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ API –∫–ª—é—á–∞...')
  
  try {
    const options = createRequestOptions('/api/category-types', 'GET', {
      'X-Client': 'MCP-Auth-Test',
    })
    
    const response = await makeRequest(options)
    
    if (response.statusCode === 401) {
      log.success('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (401 Unauthorized)')
      return true
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞: ${response.statusCode}`)
      log.warning(`–û—Ç–≤–µ—Ç: ${response.rawBody}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞
async function testWrongHeaderFormat() {
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞...')
  
  try {
    const options = createRequestOptions('/api/category-types', 'GET', {
      'Authorization': `ApiKey ${CONFIG.API_KEY}`, // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      'X-Client': 'MCP-Auth-Test',
    })
    
    const response = await makeRequest(options)
    
    if (response.statusCode === 401) {
      log.success('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (401 Unauthorized)')
      return true
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: ${response.statusCode}`)
      log.warning(`–û—Ç–≤–µ—Ç: ${response.rawBody}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
async function testApiAvailability() {
  log.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...')
  
  try {
    const options = createRequestOptions('/api/health', 'GET')
    
    const response = await makeRequest(options)
    
    if (response.statusCode === 200) {
      log.success('API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')
      return true
    } else {
      log.warning(`API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
      return false
    }
  } catch (error) {
    log.error(`API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints
async function testDifferentEndpoints() {
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints...')
  
  const endpoints = [
    '/api/category-types',
    '/api/services',
    '/api/subscription-plans',
    '/api/blocks',
  ]
  
  let successCount = 0
  
  for (const endpoint of endpoints) {
    try {
      const options = createRequestOptions(endpoint, 'GET', {
        'Authorization': `Bearer ${CONFIG.API_KEY}`,
        'X-Client': 'MCP-Auth-Test',
      })
      
      const response = await makeRequest(options)
      
      if (response.statusCode === 200) {
        log.success(`${endpoint}: OK`)
        successCount++
      } else {
        log.warning(`${endpoint}: ${response.statusCode}`)
      }
    } catch (error) {
      log.error(`${endpoint}: ${error.message}`)
    }
  }
  
  log.info(`–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ endpoints: ${successCount}/${endpoints.length}`)
  return successCount === endpoints.length
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAuthenticationTests() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ MCP ‚Üî Flow Masters\n')
  
  // –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log(`   API —Å–µ—Ä–≤–µ—Ä: ${CONFIG.API_URL || `${CONFIG.API_HOST}:${CONFIG.API_PORT}`}`)
  console.log(`   API –∫–ª—é—á: ${CONFIG.API_KEY.substring(0, 8)}...`)
  console.log(`   –ü—Ä–æ—Ç–æ–∫–æ–ª: ${CONFIG.USE_HTTPS ? 'HTTPS' : 'HTTP'}`)
  console.log(`   –¢–∞–π–º–∞—É—Ç: ${CONFIG.TIMEOUT}ms\n`)
  
  const tests = [
    { name: 'API Availability', fn: testApiAvailability },
    { name: 'Valid API Key', fn: testValidApiKey },
    { name: 'Invalid API Key', fn: testInvalidApiKey },
    { name: 'Missing API Key', fn: testMissingApiKey },
    { name: 'Wrong Header Format', fn: testWrongHeaderFormat },
    { name: 'Different Endpoints', fn: testDifferentEndpoints },
  ]
  
  let passed = 0
  let failed = 0
  
  for (const test of tests) {
    console.log(`\nüîç –¢–µ—Å—Ç: ${test.name}`)
    console.log('‚îÄ'.repeat(50))
    
    try {
      const result = await test.fn()
      if (result) {
        passed++
      } else {
        failed++
      }
    } catch (error) {
      log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${test.name}: ${error.message}`)
      failed++
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:')
  console.log('‚ïê'.repeat(60))
  log.success(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passed}`)
  if (failed > 0) {
    log.error(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${failed}`)
  }
  log.info(`–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((passed / tests.length) * 100).toFixed(1)}%`)
  
  if (failed === 0) {
    log.success('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! MCP ‚Üî Flow Masters –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.')
  } else {
    log.warning('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π.')
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
  console.log('  1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API_KEY –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤ MCP –∏ Flow Masters')
  console.log('  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PAYLOAD_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏')
  console.log('  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–∏')
  console.log('  4. –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–æ—Ç–∏—Ä—É–π—Ç–µ API –∫–ª—é—á–∏')
  
  process.exit(failed > 0 ? 1 : 0)
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAuthenticationTests().catch(error => {
  log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`)
  process.exit(1)
})