#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ API
 */

const http = require('http')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const CONFIG = {
  MCP_HOST: process.env.MCP_HOST || 'localhost',
  MCP_PORT: parseInt(process.env.MCP_PORT || '3030', 10),
  API_HOST: process.env.API_HOST || 'localhost',
  API_PORT: parseInt(process.env.API_PORT || '3000', 10),
  API_URL: process.env.API_URL || null, // –ü–æ–ª–Ω—ã–π URL API (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ HOST:PORT)
  TIMEOUT: parseInt(process.env.TEST_TIMEOUT || '10000', 10),
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = {
  info: (msg) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg) => console.log(`‚úÖ ${msg}`),
  warning: (msg) => console.log(`‚ö†Ô∏è  ${msg}`),
  error: (msg) => console.log(`‚ùå ${msg}`),
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = ''
      res.on('data', (chunk) => {
        body += chunk
      })
      res.on('end', () => {
        try {
          const result = {
            statusCode: res.statusCode,
            headers: res.headers,
            body: body ? JSON.parse(body) : null,
          }
          resolve(result)
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: body,
          })
        }
      })
    })

    req.on('error', reject)
    req.setTimeout(CONFIG.TIMEOUT, () => {
      req.destroy()
      reject(new Error('Request timeout'))
    })

    if (data) {
      req.write(JSON.stringify(data))
    }

    req.end()
  })
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
async function testApiConnection() {
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...')
  log.info(`API –∞–¥—Ä–µ—Å: ${CONFIG.API_URL || `${CONFIG.API_HOST}:${CONFIG.API_PORT}`}`)
  
  try {
    let requestOptions
    
    if (CONFIG.API_URL) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL (–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API)
      const url = new URL('/api/health', CONFIG.API_URL)
      requestOptions = {
        hostname: url.hostname,
        port: url.port || (url.protocol === 'https:' ? 443 : 80),
        path: url.pathname,
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Host': url.host,
        },
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º HOST:PORT (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      requestOptions = {
        hostname: CONFIG.API_HOST,
        port: CONFIG.API_PORT,
        path: '/api/health',
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      }
    }

    const response = await makeRequest(requestOptions)

    if (response.statusCode === 200) {
      log.success('API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')
      return true
    } else {
      log.warning(`API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
async function testMcpConnection() {
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É...')
  
  try {
    const response = await makeRequest({
      hostname: CONFIG.MCP_HOST,
      port: CONFIG.MCP_PORT,
      path: '/mcp/health',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    if (response.statusCode === 200) {
      log.success('MCP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')
      log.info(`–°—Ç–∞—Ç—É—Å API: ${response.body?.apiConnected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`)
      return response.body?.apiConnected || false
    } else {
      log.warning(`MCP —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
async function testVersionInfo() {
  log.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏...')
  
  try {
    const response = await makeRequest({
      hostname: CONFIG.MCP_HOST,
      port: CONFIG.MCP_PORT,
      path: '/mcp/version',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    if (response.statusCode === 200) {
      log.success('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞')
      log.info(`MCP –≤–µ—Ä—Å–∏—è: ${response.body?.version}`)
      log.info(`API –≤–µ—Ä—Å–∏—è: ${response.body?.apiVersion || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`)
      log.info(`–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: ${response.body?.basePath}`)
      return true
    } else {
      log.warning(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: ${response.statusCode}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å–∞
async function testProxyRequest() {
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å–∞...')
  
  try {
    const response = await makeRequest({
      hostname: CONFIG.MCP_HOST,
      port: CONFIG.MCP_PORT,
      path: '/mcp/proxy',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    }, {
      method: 'GET',
      path: '/category-types',
      params: {},
    })

    if (response.statusCode === 200 && response.body?.success) {
      log.success('–ü—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      log.info(`–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${response.body?.data?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
      return true
    } else {
      log.warning(`–ü—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: ${response.statusCode}`)
      log.warning(`–û—à–∏–±–∫–∞: ${response.body?.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è endpoints
async function testEndpointsList() {
  log.info('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ endpoints...')
  
  try {
    const response = await makeRequest({
      hostname: CONFIG.MCP_HOST,
      port: CONFIG.MCP_PORT,
      path: '/mcp/endpoints',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    if (response.statusCode === 200 && response.body?.success) {
      log.success('–°–ø–∏—Å–æ–∫ endpoints –ø–æ–ª—É—á–µ–Ω')
      log.info(`–ù–∞–π–¥–µ–Ω–æ endpoints: ${response.body?.data?.length || 0}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ endpoints –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ v1
      const hasV1Paths = response.body?.data?.some(endpoint => 
        endpoint.path && endpoint.path.includes('/v1/')
      )
      
      if (hasV1Paths) {
        log.warning('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã endpoints —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—É—Ç—è–º–∏ /v1/')
      } else {
        log.success('–í—Å–µ endpoints –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–µ –ø—É—Ç–∏ –±–µ–∑ /v1/')
      }
      
      return true
    } else {
      log.warning(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è endpoints: ${response.statusCode}`)
      return false
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è endpoints: ${error.message}`)
    return false
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ API\n')
  
  // –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log(`   MCP —Å–µ—Ä–≤–µ—Ä: ${CONFIG.MCP_HOST}:${CONFIG.MCP_PORT}`)
  console.log(`   API —Å–µ—Ä–≤–µ—Ä: ${CONFIG.API_URL || `${CONFIG.API_HOST}:${CONFIG.API_PORT}`}`)
  console.log(`   –¢–∞–π–º–∞—É—Ç: ${CONFIG.TIMEOUT}ms\n`)
  
  const tests = [
    { name: 'API Connection', fn: testApiConnection },
    { name: 'MCP Connection', fn: testMcpConnection },
    { name: 'Version Info', fn: testVersionInfo },
    { name: 'Endpoints List', fn: testEndpointsList },
    { name: 'Proxy Request', fn: testProxyRequest },
  ]
  
  let passed = 0
  let failed = 0
  
  for (const test of tests) {
    console.log(`\nüîç –¢–µ—Å—Ç: ${test.name}`)
    console.log('‚îÄ'.repeat(50))
    
    try {
      const result = await test.fn()
      if (result) {
        passed++
      } else {
        failed++
      }
    } catch (error) {
      log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${test.name}: ${error.message}`)
      failed++
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log('‚ïê'.repeat(50))
  log.success(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passed}`)
  if (failed > 0) {
    log.error(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${failed}`)
  }
  log.info(`–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((passed / tests.length) * 100).toFixed(1)}%`)
  
  if (failed === 0) {
    log.success('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º API.')
  } else {
    log.warning('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤.')
  }
  
  process.exit(failed > 0 ? 1 : 0)
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`)
  process.exit(1)
})