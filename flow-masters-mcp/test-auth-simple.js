#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 */

const http = require('http')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_KEY = 'your-secret-here-change-in-production'
const API_HOST = 'localhost'
const API_PORT = 3000

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = {
  info: (msg) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg) => console.log(`‚úÖ ${msg}`),
  warning: (msg) => console.log(`‚ö†Ô∏è  ${msg}`),
  error: (msg) => console.log(`‚ùå ${msg}`),
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(path, headers = {}) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: API_HOST,
      port: API_PORT,
      path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...headers,
      },
    }

    const req = http.request(options, (res) => {
      let body = ''
      res.on('data', (chunk) => {
        body += chunk
      })
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: body,
        })
      })
    })

    req.on('error', reject)
    req.setTimeout(5000, () => {
      req.destroy()
      reject(new Error('Request timeout'))
    })

    req.end()
  })
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testAuthentication() {
  console.log('üîê –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ MCP ‚Üî Flow Masters\n')

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  log.info('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...')
  try {
    const response = await makeRequest('/api/health')
    if (response.statusCode === 200) {
      log.success('API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')
    } else {
      log.error(`API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}`)
      return
    }
  } catch (error) {
    log.error(`API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`)
    return
  }

  // –¢–µ—Å—Ç 2: Endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  log.info('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
  try {
    const response = await makeRequest('/api/category-types')
    if (response.statusCode === 200) {
      log.success('Endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞: ${error.message}`)
  }

  // –¢–µ—Å—Ç 3: Endpoint —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - –±–µ–∑ –∫–ª—é—á–∞
  log.info('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–±–µ–∑ –∫–ª—é—á–∞)...')
  try {
    const response = await makeRequest('/api/test-auth')
    log.info(`–°—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    log.info(`–û—Ç–≤–µ—Ç: ${response.body}`)
    
    if (response.statusCode === 401) {
      log.success('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á')
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞: ${error.message}`)
  }

  // –¢–µ—Å—Ç 4: Endpoint —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
  log.info('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º (Bearer —Ñ–æ—Ä–º–∞—Ç)...')
  try {
    const response = await makeRequest('/api/test-auth', {
      'Authorization': `Bearer ${API_KEY}`,
      'X-Client': 'MCP-Auth-Test',
    })
    log.info(`–°—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    log.info(`–û—Ç–≤–µ—Ç: ${response.body}`)
    
    if (response.statusCode === 200) {
      log.success('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Bearer —Ç–æ–∫–µ–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞: ${error.message}`)
  }

  // –¢–µ—Å—Ç 5: Endpoint —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
  log.info('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (ApiKey)...')
  try {
    const response = await makeRequest('/api/test-auth', {
      'Authorization': `ApiKey ${API_KEY}`,
      'X-Client': 'MCP-Auth-Test',
    })
    log.info(`–°—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    log.info(`–û—Ç–≤–µ—Ç: ${response.body}`)
    
    if (response.statusCode === 401) {
      log.success('–°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç ApiKey –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω')
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞: ${error.message}`)
  }

  // –¢–µ—Å—Ç 6: Endpoint —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
  log.info('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º...')
  try {
    const response = await makeRequest('/api/test-auth', {
      'Authorization': `Bearer invalid-key-12345`,
      'X-Client': 'MCP-Auth-Test',
    })
    log.info(`–°—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    log.info(`–û—Ç–≤–µ—Ç: ${response.body}`)
    
    if (response.statusCode === 403) {
      log.success('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω')
    } else {
      log.warning(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`)
    }
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞: ${error.message}`)
  }

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log('‚ïê'.repeat(50))
  log.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
  log.info('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
  
  console.log('\nüí° –í—ã–≤–æ–¥—ã:')
  console.log('  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å ApiKey –Ω–∞ Bearer')
  console.log('  ‚úÖ MCP —Å–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º')
  console.log('  ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints')
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAuthentication().catch(error => {
  log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`)
  process.exit(1)
})