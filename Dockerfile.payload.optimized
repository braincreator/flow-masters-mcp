# Optimized Dockerfile for FlowMasters Payload CMS Production
# Multi-stage build for optimal size and security

FROM node:20-alpine AS base

# Install security updates and required packages
RUN apk update && apk upgrade && apk add --no-cache \
    libc6-compat \
    dumb-init \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs payload

# ================================
# Dependencies stage
# ================================
FROM base AS deps

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml* package-lock.json* yarn.lock* ./

# Install dependencies based on available lock file
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm i --frozen-lockfile --production=false; \
  elif [ -f yarn.lock ]; then \
    yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then \
    npm ci; \
  else \
    echo "No lockfile found. Please add package-lock.json, yarn.lock, or pnpm-lock.yaml" && exit 1; \
  fi

# ================================
# Builder stage
# ================================
FROM base AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Set build environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PAYLOAD_TELEMETRY_DISABLED=true

# Build the application
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm run build:prod; \
  elif [ -f yarn.lock ]; then \
    yarn run build:prod; \
  elif [ -f package-lock.json ]; then \
    npm run build:prod; \
  else \
    npm run build; \
  fi

# ================================
# Production stage
# ================================
FROM base AS runner

WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PAYLOAD_TELEMETRY_DISABLED=true
ENV PORT=3000

# Copy package files for production dependencies
COPY package.json pnpm-lock.yaml* package-lock.json* yarn.lock* ./

# Install only production dependencies
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm i --frozen-lockfile --production=true; \
  elif [ -f yarn.lock ]; then \
    yarn --frozen-lockfile --production; \
  elif [ -f package-lock.json ]; then \
    npm ci --only=production; \
  else \
    npm install --only=production; \
  fi && \
  npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=payload:nodejs /app/.next/standalone ./
COPY --from=builder --chown=payload:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=payload:nodejs /app/public ./public

# Create necessary directories with correct permissions
RUN mkdir -p .next/cache && \
    chown -R payload:nodejs .next && \
    chmod -R 755 .next

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Switch to non-root user
USER payload

# Expose port
EXPOSE 3000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server.js"]